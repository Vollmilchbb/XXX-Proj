(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c="function"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error("Cannot find module '"+i+"'");throw a.code="MODULE_NOT_FOUND",a;}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r);},p,p.exports,r,e,n,t);}return n[i].exports;}for(var u="function"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o;}return r;})()({1:[function(require,module,exports){
	"use strict";

	exports.byteLength = byteLength;
	exports.toByteArray = toByteArray;
	exports.fromByteArray = fromByteArray;

	var lookup = [];
	var revLookup = [];
	var Arr = typeof Uint8Array !== "undefined" ? Uint8Array : Array;

	var code = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/";
	for (var i = 0, len = code.length; i < len; ++i) {
		lookup[i] = code[i];
		revLookup[code.charCodeAt(i)] = i;
	}

	// Support decoding URL-safe base64 strings, as Node.js does.
	// See: https://en.wikipedia.org/wiki/Base64#URL_applications
	revLookup["-".charCodeAt(0)] = 62;
	revLookup["_".charCodeAt(0)] = 63;

	function getLens (b64) {
		var len = b64.length;

		if (len % 4 > 0) {
			throw new Error("Invalid string. Length must be a multiple of 4");
		}

		// Trim off extra bytes after placeholder bytes are found
		// See: https://github.com/beatgammit/base64-js/issues/42
		var validLen = b64.indexOf("=");
		if (validLen === -1) validLen = len;

		var placeHoldersLen = validLen === len
			? 0
			: 4 - (validLen % 4);

		return [validLen, placeHoldersLen];
	}

	// base64 is 4/3 + up to two characters of the original data
	function byteLength (b64) {
		var lens = getLens(b64);
		var validLen = lens[0];
		var placeHoldersLen = lens[1];
		return ((validLen + placeHoldersLen) * 3 / 4) - placeHoldersLen;
	}

	function _byteLength (b64, validLen, placeHoldersLen) {
		return ((validLen + placeHoldersLen) * 3 / 4) - placeHoldersLen;
	}

	function toByteArray (b64) {
		var tmp;
		var lens = getLens(b64);
		var validLen = lens[0];
		var placeHoldersLen = lens[1];

		var arr = new Arr(_byteLength(b64, validLen, placeHoldersLen));

		var curByte = 0;

		// if there are placeholders, only get up to the last complete 4 chars
		var len = placeHoldersLen > 0
			? validLen - 4
			: validLen;

		for (var i = 0; i < len; i += 4) {
			tmp =
      (revLookup[b64.charCodeAt(i)] << 18) |
      (revLookup[b64.charCodeAt(i + 1)] << 12) |
      (revLookup[b64.charCodeAt(i + 2)] << 6) |
      revLookup[b64.charCodeAt(i + 3)];
			arr[curByte++] = (tmp >> 16) & 0xFF;
			arr[curByte++] = (tmp >> 8) & 0xFF;
			arr[curByte++] = tmp & 0xFF;
		}

		if (placeHoldersLen === 2) {
			tmp =
      (revLookup[b64.charCodeAt(i)] << 2) |
      (revLookup[b64.charCodeAt(i + 1)] >> 4);
			arr[curByte++] = tmp & 0xFF;
		}

		if (placeHoldersLen === 1) {
			tmp =
      (revLookup[b64.charCodeAt(i)] << 10) |
      (revLookup[b64.charCodeAt(i + 1)] << 4) |
      (revLookup[b64.charCodeAt(i + 2)] >> 2);
			arr[curByte++] = (tmp >> 8) & 0xFF;
			arr[curByte++] = tmp & 0xFF;
		}

		return arr;
	}

	function tripletToBase64 (num) {
		return lookup[num >> 18 & 0x3F] +
    lookup[num >> 12 & 0x3F] +
    lookup[num >> 6 & 0x3F] +
    lookup[num & 0x3F];
	}

	function encodeChunk (uint8, start, end) {
		var tmp;
		var output = [];
		for (var i = start; i < end; i += 3) {
			tmp =
      ((uint8[i] << 16) & 0xFF0000) +
      ((uint8[i + 1] << 8) & 0xFF00) +
      (uint8[i + 2] & 0xFF);
			output.push(tripletToBase64(tmp));
		}
		return output.join("");
	}

	function fromByteArray (uint8) {
		var tmp;
		var len = uint8.length;
		var extraBytes = len % 3; // if we have 1 byte left, pad 2 bytes
		var parts = [];
		var maxChunkLength = 16383; // must be multiple of 3

		// go through the array every three bytes, we'll deal with trailing stuff later
		for (var i = 0, len2 = len - extraBytes; i < len2; i += maxChunkLength) {
			parts.push(encodeChunk(
				uint8, i, (i + maxChunkLength) > len2 ? len2 : (i + maxChunkLength)
			));
		}

		// pad the end with zeros, but make sure to not forget the extra bytes
		if (extraBytes === 1) {
			tmp = uint8[len - 1];
			parts.push(
				lookup[tmp >> 2] +
      lookup[(tmp << 4) & 0x3F] +
      "=="
			);
		} else if (extraBytes === 2) {
			tmp = (uint8[len - 2] << 8) + uint8[len - 1];
			parts.push(
				lookup[tmp >> 10] +
      lookup[(tmp >> 4) & 0x3F] +
      lookup[(tmp << 2) & 0x3F] +
      "="
			);
		}

		return parts.join("");
	}

},{}],2:[function(require,module,exports){

},{}],3:[function(require,module,exports){
/*!
 * The buffer module from node.js, for the browser.
 *
 * @author   Feross Aboukhadijeh <https://feross.org>
 * @license  MIT
 */
/* eslint-disable no-proto */

	"use strict";

	var base64 = require("base64-js");
	var ieee754 = require("ieee754");

	exports.Buffer = Buffer;
	exports.SlowBuffer = SlowBuffer;
	exports.INSPECT_MAX_BYTES = 50;

	var K_MAX_LENGTH = 0x7fffffff;
	exports.kMaxLength = K_MAX_LENGTH;

	/**
 * If `Buffer.TYPED_ARRAY_SUPPORT`:
 *   === true    Use Uint8Array implementation (fastest)
 *   === false   Print warning and recommend using `buffer` v4.x which has an Object
 *               implementation (most compatible, even IE6)
 *
 * Browsers that support typed arrays are IE 10+, Firefox 4+, Chrome 7+, Safari 5.1+,
 * Opera 11.6+, iOS 4.2+.
 *
 * We report that the browser does not support typed arrays if the are not subclassable
 * using __proto__. Firefox 4-29 lacks support for adding new properties to `Uint8Array`
 * (See: https://bugzilla.mozilla.org/show_bug.cgi?id=695438). IE 10 lacks support
 * for __proto__ and has a buggy typed array implementation.
 */
	Buffer.TYPED_ARRAY_SUPPORT = typedArraySupport();

	if (!Buffer.TYPED_ARRAY_SUPPORT && typeof console !== "undefined" &&
    typeof console.error === "function") {
		console.error(
			"This browser lacks typed array (Uint8Array) support which is required by " +
    "`buffer` v5.x. Use `buffer` v4.x if you require old browser support."
		);
	}

	function typedArraySupport () {
		// Can typed array instances can be augmented?
		try {
			var arr = new Uint8Array(1);
			arr.__proto__ = {__proto__: Uint8Array.prototype, foo: function () { return 42; }};
			return arr.foo() === 42;
		} catch (e) {
			return false;
		}
	}

	Object.defineProperty(Buffer.prototype, "parent", {
		get: function () {
			if (!(this instanceof Buffer)) {
				return undefined;
			}
			return this.buffer;
		}
	});

	Object.defineProperty(Buffer.prototype, "offset", {
		get: function () {
			if (!(this instanceof Buffer)) {
				return undefined;
			}
			return this.byteOffset;
		}
	});

	function createBuffer (length) {
		if (length > K_MAX_LENGTH) {
			throw new RangeError("Invalid typed array length");
		}
		// Return an augmented `Uint8Array` instance
		var buf = new Uint8Array(length);
		buf.__proto__ = Buffer.prototype;
		return buf;
	}

	/**
 * The Buffer constructor returns instances of `Uint8Array` that have their
 * prototype changed to `Buffer.prototype`. Furthermore, `Buffer` is a subclass of
 * `Uint8Array`, so the returned instances will have all the node `Buffer` methods
 * and the `Uint8Array` methods. Square bracket notation works as expected -- it
 * returns a single octet.
 *
 * The `Uint8Array` prototype remains unmodified.
 */

	function Buffer (arg, encodingOrOffset, length) {
		// Common case.
		if (typeof arg === "number") {
			if (typeof encodingOrOffset === "string") {
				throw new Error(
					"If encoding is specified then the first argument must be a string"
				);
			}
			return allocUnsafe(arg);
		}
		return from(arg, encodingOrOffset, length);
	}

	// Fix subarray() in ES2016. See: https://github.com/feross/buffer/pull/97
	if (typeof Symbol !== "undefined" && Symbol.species &&
    Buffer[Symbol.species] === Buffer) {
		Object.defineProperty(Buffer, Symbol.species, {
			value: null,
			configurable: true,
			enumerable: false,
			writable: false
		});
	}

	Buffer.poolSize = 8192; // not used by this implementation

	function from (value, encodingOrOffset, length) {
		if (typeof value === "number") {
			throw new TypeError("\"value\" argument must not be a number");
		}

		if (isArrayBuffer(value) || (value && isArrayBuffer(value.buffer))) {
			return fromArrayBuffer(value, encodingOrOffset, length);
		}

		if (typeof value === "string") {
			return fromString(value, encodingOrOffset);
		}

		return fromObject(value);
	}

	/**
 * Functionally equivalent to Buffer(arg, encoding) but throws a TypeError
 * if value is a number.
 * Buffer.from(str[, encoding])
 * Buffer.from(array)
 * Buffer.from(buffer)
 * Buffer.from(arrayBuffer[, byteOffset[, length]])
 **/
	Buffer.from = function (value, encodingOrOffset, length) {
		return from(value, encodingOrOffset, length);
	};

	// Note: Change prototype *after* Buffer.from is defined to workaround Chrome bug:
	// https://github.com/feross/buffer/pull/148
	Buffer.prototype.__proto__ = Uint8Array.prototype;
	Buffer.__proto__ = Uint8Array;

	function assertSize (size) {
		if (typeof size !== "number") {
			throw new TypeError("\"size\" argument must be of type number");
		} else if (size < 0) {
			throw new RangeError("\"size\" argument must not be negative");
		}
	}

	function alloc (size, fill, encoding) {
		assertSize(size);
		if (size <= 0) {
			return createBuffer(size);
		}
		if (fill !== undefined) {
			// Only pay attention to encoding if it's a string. This
			// prevents accidentally sending in a number that would
			// be interpretted as a start offset.
			return typeof encoding === "string"
				? createBuffer(size).fill(fill, encoding)
				: createBuffer(size).fill(fill);
		}
		return createBuffer(size);
	}

	/**
 * Creates a new filled Buffer instance.
 * alloc(size[, fill[, encoding]])
 **/
	Buffer.alloc = function (size, fill, encoding) {
		return alloc(size, fill, encoding);
	};

	function allocUnsafe (size) {
		assertSize(size);
		return createBuffer(size < 0 ? 0 : checked(size) | 0);
	}

	/**
 * Equivalent to Buffer(num), by default creates a non-zero-filled Buffer instance.
 * */
	Buffer.allocUnsafe = function (size) {
		return allocUnsafe(size);
	};
	/**
 * Equivalent to SlowBuffer(num), by default creates a non-zero-filled Buffer instance.
 */
	Buffer.allocUnsafeSlow = function (size) {
		return allocUnsafe(size);
	};

	function fromString (string, encoding) {
		if (typeof encoding !== "string" || encoding === "") {
			encoding = "utf8";
		}

		if (!Buffer.isEncoding(encoding)) {
			throw new TypeError("Unknown encoding: " + encoding);
		}

		var length = byteLength(string, encoding) | 0;
		var buf = createBuffer(length);

		var actual = buf.write(string, encoding);

		if (actual !== length) {
			// Writing a hex string, for example, that contains invalid characters will
			// cause everything after the first invalid character to be ignored. (e.g.
			// 'abxxcd' will be treated as 'ab')
			buf = buf.slice(0, actual);
		}

		return buf;
	}

	function fromArrayLike (array) {
		var length = array.length < 0 ? 0 : checked(array.length) | 0;
		var buf = createBuffer(length);
		for (var i = 0; i < length; i += 1) {
			buf[i] = array[i] & 255;
		}
		return buf;
	}

	function fromArrayBuffer (array, byteOffset, length) {
		if (byteOffset < 0 || array.byteLength < byteOffset) {
			throw new RangeError("\"offset\" is outside of buffer bounds");
		}

		if (array.byteLength < byteOffset + (length || 0)) {
			throw new RangeError("\"length\" is outside of buffer bounds");
		}

		var buf;
		if (byteOffset === undefined && length === undefined) {
			buf = new Uint8Array(array);
		} else if (length === undefined) {
			buf = new Uint8Array(array, byteOffset);
		} else {
			buf = new Uint8Array(array, byteOffset, length);
		}

		// Return an augmented `Uint8Array` instance
		buf.__proto__ = Buffer.prototype;
		return buf;
	}

	function fromObject (obj) {
		if (Buffer.isBuffer(obj)) {
			var len = checked(obj.length) | 0;
			var buf = createBuffer(len);

			if (buf.length === 0) {
				return buf;
			}

			obj.copy(buf, 0, 0, len);
			return buf;
		}

		if (obj) {
			if (ArrayBuffer.isView(obj) || "length" in obj) {
				if (typeof obj.length !== "number" || numberIsNaN(obj.length)) {
					return createBuffer(0);
				}
				return fromArrayLike(obj);
			}

			if (obj.type === "Buffer" && Array.isArray(obj.data)) {
				return fromArrayLike(obj.data);
			}
		}

		throw new TypeError("The first argument must be one of type string, Buffer, ArrayBuffer, Array, or Array-like Object.");
	}

	function checked (length) {
		// Note: cannot use `length < K_MAX_LENGTH` here because that fails when
		// length is NaN (which is otherwise coerced to zero.)
		if (length >= K_MAX_LENGTH) {
			throw new RangeError("Attempt to allocate Buffer larger than maximum " +
                         "size: 0x" + K_MAX_LENGTH.toString(16) + " bytes");
		}
		return length | 0;
	}

	function SlowBuffer (length) {
		if (+length != length) { // eslint-disable-line eqeqeq
			length = 0;
		}
		return Buffer.alloc(+length);
	}

	Buffer.isBuffer = function isBuffer (b) {
		return b != null && b._isBuffer === true;
	};

	Buffer.compare = function compare (a, b) {
		if (!Buffer.isBuffer(a) || !Buffer.isBuffer(b)) {
			throw new TypeError("Arguments must be Buffers");
		}

		if (a === b) return 0;

		var x = a.length;
		var y = b.length;

		for (var i = 0, len = Math.min(x, y); i < len; ++i) {
			if (a[i] !== b[i]) {
				x = a[i];
				y = b[i];
				break;
			}
		}

		if (x < y) return -1;
		if (y < x) return 1;
		return 0;
	};

	Buffer.isEncoding = function isEncoding (encoding) {
		switch (String(encoding).toLowerCase()) {
		case "hex":
		case "utf8":
		case "utf-8":
		case "ascii":
		case "latin1":
		case "binary":
		case "base64":
		case "ucs2":
		case "ucs-2":
		case "utf16le":
		case "utf-16le":
			return true;
		default:
			return false;
		}
	};

	Buffer.concat = function concat (list, length) {
		if (!Array.isArray(list)) {
			throw new TypeError("\"list\" argument must be an Array of Buffers");
		}

		if (list.length === 0) {
			return Buffer.alloc(0);
		}

		var i;
		if (length === undefined) {
			length = 0;
			for (i = 0; i < list.length; ++i) {
				length += list[i].length;
			}
		}

		var buffer = Buffer.allocUnsafe(length);
		var pos = 0;
		for (i = 0; i < list.length; ++i) {
			var buf = list[i];
			if (ArrayBuffer.isView(buf)) {
				buf = Buffer.from(buf);
			}
			if (!Buffer.isBuffer(buf)) {
				throw new TypeError("\"list\" argument must be an Array of Buffers");
			}
			buf.copy(buffer, pos);
			pos += buf.length;
		}
		return buffer;
	};

	function byteLength (string, encoding) {
		if (Buffer.isBuffer(string)) {
			return string.length;
		}
		if (ArrayBuffer.isView(string) || isArrayBuffer(string)) {
			return string.byteLength;
		}
		if (typeof string !== "string") {
			string = "" + string;
		}

		var len = string.length;
		if (len === 0) return 0;

		// Use a for loop to avoid recursion
		var loweredCase = false;
		for (;;) {
			switch (encoding) {
			case "ascii":
			case "latin1":
			case "binary":
				return len;
			case "utf8":
			case "utf-8":
			case undefined:
				return utf8ToBytes(string).length;
			case "ucs2":
			case "ucs-2":
			case "utf16le":
			case "utf-16le":
				return len * 2;
			case "hex":
				return len >>> 1;
			case "base64":
				return base64ToBytes(string).length;
			default:
				if (loweredCase) return utf8ToBytes(string).length; // assume utf8
				encoding = ("" + encoding).toLowerCase();
				loweredCase = true;
			}
		}
	}
	Buffer.byteLength = byteLength;

	function slowToString (encoding, start, end) {
		var loweredCase = false;

		// No need to verify that "this.length <= MAX_UINT32" since it's a read-only
		// property of a typed array.

		// This behaves neither like String nor Uint8Array in that we set start/end
		// to their upper/lower bounds if the value passed is out of range.
		// undefined is handled specially as per ECMA-262 6th Edition,
		// Section 13.3.3.7 Runtime Semantics: KeyedBindingInitialization.
		if (start === undefined || start < 0) {
			start = 0;
		}
		// Return early if start > this.length. Done here to prevent potential uint32
		// coercion fail below.
		if (start > this.length) {
			return "";
		}

		if (end === undefined || end > this.length) {
			end = this.length;
		}

		if (end <= 0) {
			return "";
		}

		// Force coersion to uint32. This will also coerce falsey/NaN values to 0.
		end >>>= 0;
		start >>>= 0;

		if (end <= start) {
			return "";
		}

		if (!encoding) encoding = "utf8";

		while (true) {
			switch (encoding) {
			case "hex":
				return hexSlice(this, start, end);

			case "utf8":
			case "utf-8":
				return utf8Slice(this, start, end);

			case "ascii":
				return asciiSlice(this, start, end);

			case "latin1":
			case "binary":
				return latin1Slice(this, start, end);

			case "base64":
				return base64Slice(this, start, end);

			case "ucs2":
			case "ucs-2":
			case "utf16le":
			case "utf-16le":
				return utf16leSlice(this, start, end);

			default:
				if (loweredCase) throw new TypeError("Unknown encoding: " + encoding);
				encoding = (encoding + "").toLowerCase();
				loweredCase = true;
			}
		}
	}

	// This property is used by `Buffer.isBuffer` (and the `is-buffer` npm package)
	// to detect a Buffer instance. It's not possible to use `instanceof Buffer`
	// reliably in a browserify context because there could be multiple different
	// copies of the 'buffer' package in use. This method works even for Buffer
	// instances that were created from another copy of the `buffer` package.
	// See: https://github.com/feross/buffer/issues/154
	Buffer.prototype._isBuffer = true;

	function swap (b, n, m) {
		var i = b[n];
		b[n] = b[m];
		b[m] = i;
	}

	Buffer.prototype.swap16 = function swap16 () {
		var len = this.length;
		if (len % 2 !== 0) {
			throw new RangeError("Buffer size must be a multiple of 16-bits");
		}
		for (var i = 0; i < len; i += 2) {
			swap(this, i, i + 1);
		}
		return this;
	};

	Buffer.prototype.swap32 = function swap32 () {
		var len = this.length;
		if (len % 4 !== 0) {
			throw new RangeError("Buffer size must be a multiple of 32-bits");
		}
		for (var i = 0; i < len; i += 4) {
			swap(this, i, i + 3);
			swap(this, i + 1, i + 2);
		}
		return this;
	};

	Buffer.prototype.swap64 = function swap64 () {
		var len = this.length;
		if (len % 8 !== 0) {
			throw new RangeError("Buffer size must be a multiple of 64-bits");
		}
		for (var i = 0; i < len; i += 8) {
			swap(this, i, i + 7);
			swap(this, i + 1, i + 6);
			swap(this, i + 2, i + 5);
			swap(this, i + 3, i + 4);
		}
		return this;
	};

	Buffer.prototype.toString = function toString () {
		var length = this.length;
		if (length === 0) return "";
		if (arguments.length === 0) return utf8Slice(this, 0, length);
		return slowToString.apply(this, arguments);
	};

	Buffer.prototype.toLocaleString = Buffer.prototype.toString;

	Buffer.prototype.equals = function equals (b) {
		if (!Buffer.isBuffer(b)) throw new TypeError("Argument must be a Buffer");
		if (this === b) return true;
		return Buffer.compare(this, b) === 0;
	};

	Buffer.prototype.inspect = function inspect () {
		var str = "";
		var max = exports.INSPECT_MAX_BYTES;
		if (this.length > 0) {
			str = this.toString("hex", 0, max).match(/.{2}/g).join(" ");
			if (this.length > max) str += " ... ";
		}
		return "<Buffer " + str + ">";
	};

	Buffer.prototype.compare = function compare (target, start, end, thisStart, thisEnd) {
		if (!Buffer.isBuffer(target)) {
			throw new TypeError("Argument must be a Buffer");
		}

		if (start === undefined) {
			start = 0;
		}
		if (end === undefined) {
			end = target ? target.length : 0;
		}
		if (thisStart === undefined) {
			thisStart = 0;
		}
		if (thisEnd === undefined) {
			thisEnd = this.length;
		}

		if (start < 0 || end > target.length || thisStart < 0 || thisEnd > this.length) {
			throw new RangeError("out of range index");
		}

		if (thisStart >= thisEnd && start >= end) {
			return 0;
		}
		if (thisStart >= thisEnd) {
			return -1;
		}
		if (start >= end) {
			return 1;
		}

		start >>>= 0;
		end >>>= 0;
		thisStart >>>= 0;
		thisEnd >>>= 0;

		if (this === target) return 0;

		var x = thisEnd - thisStart;
		var y = end - start;
		var len = Math.min(x, y);

		var thisCopy = this.slice(thisStart, thisEnd);
		var targetCopy = target.slice(start, end);

		for (var i = 0; i < len; ++i) {
			if (thisCopy[i] !== targetCopy[i]) {
				x = thisCopy[i];
				y = targetCopy[i];
				break;
			}
		}

		if (x < y) return -1;
		if (y < x) return 1;
		return 0;
	};

	// Finds either the first index of `val` in `buffer` at offset >= `byteOffset`,
	// OR the last index of `val` in `buffer` at offset <= `byteOffset`.
	//
	// Arguments:
	// - buffer - a Buffer to search
	// - val - a string, Buffer, or number
	// - byteOffset - an index into `buffer`; will be clamped to an int32
	// - encoding - an optional encoding, relevant is val is a string
	// - dir - true for indexOf, false for lastIndexOf
	function bidirectionalIndexOf (buffer, val, byteOffset, encoding, dir) {
		// Empty buffer means no match
		if (buffer.length === 0) return -1;

		// Normalize byteOffset
		if (typeof byteOffset === "string") {
			encoding = byteOffset;
			byteOffset = 0;
		} else if (byteOffset > 0x7fffffff) {
			byteOffset = 0x7fffffff;
		} else if (byteOffset < -0x80000000) {
			byteOffset = -0x80000000;
		}
		byteOffset = +byteOffset;  // Coerce to Number.
		if (numberIsNaN(byteOffset)) {
			// byteOffset: it it's undefined, null, NaN, "foo", etc, search whole buffer
			byteOffset = dir ? 0 : (buffer.length - 1);
		}

		// Normalize byteOffset: negative offsets start from the end of the buffer
		if (byteOffset < 0) byteOffset = buffer.length + byteOffset;
		if (byteOffset >= buffer.length) {
			if (dir) return -1;
			else byteOffset = buffer.length - 1;
		} else if (byteOffset < 0) {
			if (dir) byteOffset = 0;
			else return -1;
		}

		// Normalize val
		if (typeof val === "string") {
			val = Buffer.from(val, encoding);
		}

		// Finally, search either indexOf (if dir is true) or lastIndexOf
		if (Buffer.isBuffer(val)) {
			// Special case: looking for empty string/buffer always fails
			if (val.length === 0) {
				return -1;
			}
			return arrayIndexOf(buffer, val, byteOffset, encoding, dir);
		} else if (typeof val === "number") {
			val = val & 0xFF; // Search for a byte value [0-255]
			if (typeof Uint8Array.prototype.indexOf === "function") {
				if (dir) {
					return Uint8Array.prototype.indexOf.call(buffer, val, byteOffset);
				} else {
					return Uint8Array.prototype.lastIndexOf.call(buffer, val, byteOffset);
				}
			}
			return arrayIndexOf(buffer, [ val ], byteOffset, encoding, dir);
		}

		throw new TypeError("val must be string, number or Buffer");
	}

	function arrayIndexOf (arr, val, byteOffset, encoding, dir) {
		var indexSize = 1;
		var arrLength = arr.length;
		var valLength = val.length;

		if (encoding !== undefined) {
			encoding = String(encoding).toLowerCase();
			if (encoding === "ucs2" || encoding === "ucs-2" ||
        encoding === "utf16le" || encoding === "utf-16le") {
				if (arr.length < 2 || val.length < 2) {
					return -1;
				}
				indexSize = 2;
				arrLength /= 2;
				valLength /= 2;
				byteOffset /= 2;
			}
		}

		function read (buf, i) {
			if (indexSize === 1) {
				return buf[i];
			} else {
				return buf.readUInt16BE(i * indexSize);
			}
		}

		var i;
		if (dir) {
			var foundIndex = -1;
			for (i = byteOffset; i < arrLength; i++) {
				if (read(arr, i) === read(val, foundIndex === -1 ? 0 : i - foundIndex)) {
					if (foundIndex === -1) foundIndex = i;
					if (i - foundIndex + 1 === valLength) return foundIndex * indexSize;
				} else {
					if (foundIndex !== -1) i -= i - foundIndex;
					foundIndex = -1;
				}
			}
		} else {
			if (byteOffset + valLength > arrLength) byteOffset = arrLength - valLength;
			for (i = byteOffset; i >= 0; i--) {
				var found = true;
				for (var j = 0; j < valLength; j++) {
					if (read(arr, i + j) !== read(val, j)) {
						found = false;
						break;
					}
				}
				if (found) return i;
			}
		}

		return -1;
	}

	Buffer.prototype.includes = function includes (val, byteOffset, encoding) {
		return this.indexOf(val, byteOffset, encoding) !== -1;
	};

	Buffer.prototype.indexOf = function indexOf (val, byteOffset, encoding) {
		return bidirectionalIndexOf(this, val, byteOffset, encoding, true);
	};

	Buffer.prototype.lastIndexOf = function lastIndexOf (val, byteOffset, encoding) {
		return bidirectionalIndexOf(this, val, byteOffset, encoding, false);
	};

	function hexWrite (buf, string, offset, length) {
		offset = Number(offset) || 0;
		var remaining = buf.length - offset;
		if (!length) {
			length = remaining;
		} else {
			length = Number(length);
			if (length > remaining) {
				length = remaining;
			}
		}

		var strLen = string.length;

		if (length > strLen / 2) {
			length = strLen / 2;
		}
		for (var i = 0; i < length; ++i) {
			var parsed = parseInt(string.substr(i * 2, 2), 16);
			if (numberIsNaN(parsed)) return i;
			buf[offset + i] = parsed;
		}
		return i;
	}

	function utf8Write (buf, string, offset, length) {
		return blitBuffer(utf8ToBytes(string, buf.length - offset), buf, offset, length);
	}

	function asciiWrite (buf, string, offset, length) {
		return blitBuffer(asciiToBytes(string), buf, offset, length);
	}

	function latin1Write (buf, string, offset, length) {
		return asciiWrite(buf, string, offset, length);
	}

	function base64Write (buf, string, offset, length) {
		return blitBuffer(base64ToBytes(string), buf, offset, length);
	}

	function ucs2Write (buf, string, offset, length) {
		return blitBuffer(utf16leToBytes(string, buf.length - offset), buf, offset, length);
	}

	Buffer.prototype.write = function write (string, offset, length, encoding) {
		// Buffer#write(string)
		if (offset === undefined) {
			encoding = "utf8";
			length = this.length;
			offset = 0;
			// Buffer#write(string, encoding)
		} else if (length === undefined && typeof offset === "string") {
			encoding = offset;
			length = this.length;
			offset = 0;
			// Buffer#write(string, offset[, length][, encoding])
		} else if (isFinite(offset)) {
			offset = offset >>> 0;
			if (isFinite(length)) {
				length = length >>> 0;
				if (encoding === undefined) encoding = "utf8";
			} else {
				encoding = length;
				length = undefined;
			}
		} else {
			throw new Error(
				"Buffer.write(string, encoding, offset[, length]) is no longer supported"
			);
		}

		var remaining = this.length - offset;
		if (length === undefined || length > remaining) length = remaining;

		if ((string.length > 0 && (length < 0 || offset < 0)) || offset > this.length) {
			throw new RangeError("Attempt to write outside buffer bounds");
		}

		if (!encoding) encoding = "utf8";

		var loweredCase = false;
		for (;;) {
			switch (encoding) {
			case "hex":
				return hexWrite(this, string, offset, length);

			case "utf8":
			case "utf-8":
				return utf8Write(this, string, offset, length);

			case "ascii":
				return asciiWrite(this, string, offset, length);

			case "latin1":
			case "binary":
				return latin1Write(this, string, offset, length);

			case "base64":
				// Warning: maxLength not taken into account in base64Write
				return base64Write(this, string, offset, length);

			case "ucs2":
			case "ucs-2":
			case "utf16le":
			case "utf-16le":
				return ucs2Write(this, string, offset, length);

			default:
				if (loweredCase) throw new TypeError("Unknown encoding: " + encoding);
				encoding = ("" + encoding).toLowerCase();
				loweredCase = true;
			}
		}
	};

	Buffer.prototype.toJSON = function toJSON () {
		return {
			type: "Buffer",
			data: Array.prototype.slice.call(this._arr || this, 0)
		};
	};

	function base64Slice (buf, start, end) {
		if (start === 0 && end === buf.length) {
			return base64.fromByteArray(buf);
		} else {
			return base64.fromByteArray(buf.slice(start, end));
		}
	}

	function utf8Slice (buf, start, end) {
		end = Math.min(buf.length, end);
		var res = [];

		var i = start;
		while (i < end) {
			var firstByte = buf[i];
			var codePoint = null;
			var bytesPerSequence = (firstByte > 0xEF) ? 4
				: (firstByte > 0xDF) ? 3
					: (firstByte > 0xBF) ? 2
						: 1;

			if (i + bytesPerSequence <= end) {
				var secondByte, thirdByte, fourthByte, tempCodePoint;

				switch (bytesPerSequence) {
				case 1:
					if (firstByte < 0x80) {
						codePoint = firstByte;
					}
					break;
				case 2:
					secondByte = buf[i + 1];
					if ((secondByte & 0xC0) === 0x80) {
						tempCodePoint = (firstByte & 0x1F) << 0x6 | (secondByte & 0x3F);
						if (tempCodePoint > 0x7F) {
							codePoint = tempCodePoint;
						}
					}
					break;
				case 3:
					secondByte = buf[i + 1];
					thirdByte = buf[i + 2];
					if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80) {
						tempCodePoint = (firstByte & 0xF) << 0xC | (secondByte & 0x3F) << 0x6 | (thirdByte & 0x3F);
						if (tempCodePoint > 0x7FF && (tempCodePoint < 0xD800 || tempCodePoint > 0xDFFF)) {
							codePoint = tempCodePoint;
						}
					}
					break;
				case 4:
					secondByte = buf[i + 1];
					thirdByte = buf[i + 2];
					fourthByte = buf[i + 3];
					if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80 && (fourthByte & 0xC0) === 0x80) {
						tempCodePoint = (firstByte & 0xF) << 0x12 | (secondByte & 0x3F) << 0xC | (thirdByte & 0x3F) << 0x6 | (fourthByte & 0x3F);
						if (tempCodePoint > 0xFFFF && tempCodePoint < 0x110000) {
							codePoint = tempCodePoint;
						}
					}
				}
			}

			if (codePoint === null) {
				// we did not generate a valid codePoint so insert a
				// replacement char (U+FFFD) and advance only 1 byte
				codePoint = 0xFFFD;
				bytesPerSequence = 1;
			} else if (codePoint > 0xFFFF) {
				// encode to utf16 (surrogate pair dance)
				codePoint -= 0x10000;
				res.push(codePoint >>> 10 & 0x3FF | 0xD800);
				codePoint = 0xDC00 | codePoint & 0x3FF;
			}

			res.push(codePoint);
			i += bytesPerSequence;
		}

		return decodeCodePointsArray(res);
	}

	// Based on http://stackoverflow.com/a/22747272/680742, the browser with
	// the lowest limit is Chrome, with 0x10000 args.
	// We go 1 magnitude less, for safety
	var MAX_ARGUMENTS_LENGTH = 0x1000;

	function decodeCodePointsArray (codePoints) {
		var len = codePoints.length;
		if (len <= MAX_ARGUMENTS_LENGTH) {
			return String.fromCharCode.apply(String, codePoints); // avoid extra slice()
		}

		// Decode in chunks to avoid "call stack size exceeded".
		var res = "";
		var i = 0;
		while (i < len) {
			res += String.fromCharCode.apply(
				String,
				codePoints.slice(i, i += MAX_ARGUMENTS_LENGTH)
			);
		}
		return res;
	}

	function asciiSlice (buf, start, end) {
		var ret = "";
		end = Math.min(buf.length, end);

		for (var i = start; i < end; ++i) {
			ret += String.fromCharCode(buf[i] & 0x7F);
		}
		return ret;
	}

	function latin1Slice (buf, start, end) {
		var ret = "";
		end = Math.min(buf.length, end);

		for (var i = start; i < end; ++i) {
			ret += String.fromCharCode(buf[i]);
		}
		return ret;
	}

	function hexSlice (buf, start, end) {
		var len = buf.length;

		if (!start || start < 0) start = 0;
		if (!end || end < 0 || end > len) end = len;

		var out = "";
		for (var i = start; i < end; ++i) {
			out += toHex(buf[i]);
		}
		return out;
	}

	function utf16leSlice (buf, start, end) {
		var bytes = buf.slice(start, end);
		var res = "";
		for (var i = 0; i < bytes.length; i += 2) {
			res += String.fromCharCode(bytes[i] + (bytes[i + 1] * 256));
		}
		return res;
	}

	Buffer.prototype.slice = function slice (start, end) {
		var len = this.length;
		start = ~~start;
		end = end === undefined ? len : ~~end;

		if (start < 0) {
			start += len;
			if (start < 0) start = 0;
		} else if (start > len) {
			start = len;
		}

		if (end < 0) {
			end += len;
			if (end < 0) end = 0;
		} else if (end > len) {
			end = len;
		}

		if (end < start) end = start;

		var newBuf = this.subarray(start, end);
		// Return an augmented `Uint8Array` instance
		newBuf.__proto__ = Buffer.prototype;
		return newBuf;
	};

	/*
 * Need to make sure that buffer isn't trying to write out of bounds.
 */
	function checkOffset (offset, ext, length) {
		if ((offset % 1) !== 0 || offset < 0) throw new RangeError("offset is not uint");
		if (offset + ext > length) throw new RangeError("Trying to access beyond buffer length");
	}

	Buffer.prototype.readUIntLE = function readUIntLE (offset, byteLength, noAssert) {
		offset = offset >>> 0;
		byteLength = byteLength >>> 0;
		if (!noAssert) checkOffset(offset, byteLength, this.length);

		var val = this[offset];
		var mul = 1;
		var i = 0;
		while (++i < byteLength && (mul *= 0x100)) {
			val += this[offset + i] * mul;
		}

		return val;
	};

	Buffer.prototype.readUIntBE = function readUIntBE (offset, byteLength, noAssert) {
		offset = offset >>> 0;
		byteLength = byteLength >>> 0;
		if (!noAssert) {
			checkOffset(offset, byteLength, this.length);
		}

		var val = this[offset + --byteLength];
		var mul = 1;
		while (byteLength > 0 && (mul *= 0x100)) {
			val += this[offset + --byteLength] * mul;
		}

		return val;
	};

	Buffer.prototype.readUInt8 = function readUInt8 (offset, noAssert) {
		offset = offset >>> 0;
		if (!noAssert) checkOffset(offset, 1, this.length);
		return this[offset];
	};

	Buffer.prototype.readUInt16LE = function readUInt16LE (offset, noAssert) {
		offset = offset >>> 0;
		if (!noAssert) checkOffset(offset, 2, this.length);
		return this[offset] | (this[offset + 1] << 8);
	};

	Buffer.prototype.readUInt16BE = function readUInt16BE (offset, noAssert) {
		offset = offset >>> 0;
		if (!noAssert) checkOffset(offset, 2, this.length);
		return (this[offset] << 8) | this[offset + 1];
	};

	Buffer.prototype.readUInt32LE = function readUInt32LE (offset, noAssert) {
		offset = offset >>> 0;
		if (!noAssert) checkOffset(offset, 4, this.length);

		return ((this[offset]) |
      (this[offset + 1] << 8) |
      (this[offset + 2] << 16)) +
      (this[offset + 3] * 0x1000000);
	};

	Buffer.prototype.readUInt32BE = function readUInt32BE (offset, noAssert) {
		offset = offset >>> 0;
		if (!noAssert) checkOffset(offset, 4, this.length);

		return (this[offset] * 0x1000000) +
    ((this[offset + 1] << 16) |
    (this[offset + 2] << 8) |
    this[offset + 3]);
	};

	Buffer.prototype.readIntLE = function readIntLE (offset, byteLength, noAssert) {
		offset = offset >>> 0;
		byteLength = byteLength >>> 0;
		if (!noAssert) checkOffset(offset, byteLength, this.length);

		var val = this[offset];
		var mul = 1;
		var i = 0;
		while (++i < byteLength && (mul *= 0x100)) {
			val += this[offset + i] * mul;
		}
		mul *= 0x80;

		if (val >= mul) val -= Math.pow(2, 8 * byteLength);

		return val;
	};

	Buffer.prototype.readIntBE = function readIntBE (offset, byteLength, noAssert) {
		offset = offset >>> 0;
		byteLength = byteLength >>> 0;
		if (!noAssert) checkOffset(offset, byteLength, this.length);

		var i = byteLength;
		var mul = 1;
		var val = this[offset + --i];
		while (i > 0 && (mul *= 0x100)) {
			val += this[offset + --i] * mul;
		}
		mul *= 0x80;

		if (val >= mul) val -= Math.pow(2, 8 * byteLength);

		return val;
	};

	Buffer.prototype.readInt8 = function readInt8 (offset, noAssert) {
		offset = offset >>> 0;
		if (!noAssert) checkOffset(offset, 1, this.length);
		if (!(this[offset] & 0x80)) return (this[offset]);
		return ((0xff - this[offset] + 1) * -1);
	};

	Buffer.prototype.readInt16LE = function readInt16LE (offset, noAssert) {
		offset = offset >>> 0;
		if (!noAssert) checkOffset(offset, 2, this.length);
		var val = this[offset] | (this[offset + 1] << 8);
		return (val & 0x8000) ? val | 0xFFFF0000 : val;
	};

	Buffer.prototype.readInt16BE = function readInt16BE (offset, noAssert) {
		offset = offset >>> 0;
		if (!noAssert) checkOffset(offset, 2, this.length);
		var val = this[offset + 1] | (this[offset] << 8);
		return (val & 0x8000) ? val | 0xFFFF0000 : val;
	};

	Buffer.prototype.readInt32LE = function readInt32LE (offset, noAssert) {
		offset = offset >>> 0;
		if (!noAssert) checkOffset(offset, 4, this.length);

		return (this[offset]) |
    (this[offset + 1] << 8) |
    (this[offset + 2] << 16) |
    (this[offset + 3] << 24);
	};

	Buffer.prototype.readInt32BE = function readInt32BE (offset, noAssert) {
		offset = offset >>> 0;
		if (!noAssert) checkOffset(offset, 4, this.length);

		return (this[offset] << 24) |
    (this[offset + 1] << 16) |
    (this[offset + 2] << 8) |
    (this[offset + 3]);
	};

	Buffer.prototype.readFloatLE = function readFloatLE (offset, noAssert) {
		offset = offset >>> 0;
		if (!noAssert) checkOffset(offset, 4, this.length);
		return ieee754.read(this, offset, true, 23, 4);
	};

	Buffer.prototype.readFloatBE = function readFloatBE (offset, noAssert) {
		offset = offset >>> 0;
		if (!noAssert) checkOffset(offset, 4, this.length);
		return ieee754.read(this, offset, false, 23, 4);
	};

	Buffer.prototype.readDoubleLE = function readDoubleLE (offset, noAssert) {
		offset = offset >>> 0;
		if (!noAssert) checkOffset(offset, 8, this.length);
		return ieee754.read(this, offset, true, 52, 8);
	};

	Buffer.prototype.readDoubleBE = function readDoubleBE (offset, noAssert) {
		offset = offset >>> 0;
		if (!noAssert) checkOffset(offset, 8, this.length);
		return ieee754.read(this, offset, false, 52, 8);
	};

	function checkInt (buf, value, offset, ext, max, min) {
		if (!Buffer.isBuffer(buf)) throw new TypeError("\"buffer\" argument must be a Buffer instance");
		if (value > max || value < min) throw new RangeError("\"value\" argument is out of bounds");
		if (offset + ext > buf.length) throw new RangeError("Index out of range");
	}

	Buffer.prototype.writeUIntLE = function writeUIntLE (value, offset, byteLength, noAssert) {
		value = +value;
		offset = offset >>> 0;
		byteLength = byteLength >>> 0;
		if (!noAssert) {
			var maxBytes = Math.pow(2, 8 * byteLength) - 1;
			checkInt(this, value, offset, byteLength, maxBytes, 0);
		}

		var mul = 1;
		var i = 0;
		this[offset] = value & 0xFF;
		while (++i < byteLength && (mul *= 0x100)) {
			this[offset + i] = (value / mul) & 0xFF;
		}

		return offset + byteLength;
	};

	Buffer.prototype.writeUIntBE = function writeUIntBE (value, offset, byteLength, noAssert) {
		value = +value;
		offset = offset >>> 0;
		byteLength = byteLength >>> 0;
		if (!noAssert) {
			var maxBytes = Math.pow(2, 8 * byteLength) - 1;
			checkInt(this, value, offset, byteLength, maxBytes, 0);
		}

		var i = byteLength - 1;
		var mul = 1;
		this[offset + i] = value & 0xFF;
		while (--i >= 0 && (mul *= 0x100)) {
			this[offset + i] = (value / mul) & 0xFF;
		}

		return offset + byteLength;
	};

	Buffer.prototype.writeUInt8 = function writeUInt8 (value, offset, noAssert) {
		value = +value;
		offset = offset >>> 0;
		if (!noAssert) checkInt(this, value, offset, 1, 0xff, 0);
		this[offset] = (value & 0xff);
		return offset + 1;
	};

	Buffer.prototype.writeUInt16LE = function writeUInt16LE (value, offset, noAssert) {
		value = +value;
		offset = offset >>> 0;
		if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0);
		this[offset] = (value & 0xff);
		this[offset + 1] = (value >>> 8);
		return offset + 2;
	};

	Buffer.prototype.writeUInt16BE = function writeUInt16BE (value, offset, noAssert) {
		value = +value;
		offset = offset >>> 0;
		if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0);
		this[offset] = (value >>> 8);
		this[offset + 1] = (value & 0xff);
		return offset + 2;
	};

	Buffer.prototype.writeUInt32LE = function writeUInt32LE (value, offset, noAssert) {
		value = +value;
		offset = offset >>> 0;
		if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0);
		this[offset + 3] = (value >>> 24);
		this[offset + 2] = (value >>> 16);
		this[offset + 1] = (value >>> 8);
		this[offset] = (value & 0xff);
		return offset + 4;
	};

	Buffer.prototype.writeUInt32BE = function writeUInt32BE (value, offset, noAssert) {
		value = +value;
		offset = offset >>> 0;
		if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0);
		this[offset] = (value >>> 24);
		this[offset + 1] = (value >>> 16);
		this[offset + 2] = (value >>> 8);
		this[offset + 3] = (value & 0xff);
		return offset + 4;
	};

	Buffer.prototype.writeIntLE = function writeIntLE (value, offset, byteLength, noAssert) {
		value = +value;
		offset = offset >>> 0;
		if (!noAssert) {
			var limit = Math.pow(2, (8 * byteLength) - 1);

			checkInt(this, value, offset, byteLength, limit - 1, -limit);
		}

		var i = 0;
		var mul = 1;
		var sub = 0;
		this[offset] = value & 0xFF;
		while (++i < byteLength && (mul *= 0x100)) {
			if (value < 0 && sub === 0 && this[offset + i - 1] !== 0) {
				sub = 1;
			}
			this[offset + i] = ((value / mul) >> 0) - sub & 0xFF;
		}

		return offset + byteLength;
	};

	Buffer.prototype.writeIntBE = function writeIntBE (value, offset, byteLength, noAssert) {
		value = +value;
		offset = offset >>> 0;
		if (!noAssert) {
			var limit = Math.pow(2, (8 * byteLength) - 1);

			checkInt(this, value, offset, byteLength, limit - 1, -limit);
		}

		var i = byteLength - 1;
		var mul = 1;
		var sub = 0;
		this[offset + i] = value & 0xFF;
		while (--i >= 0 && (mul *= 0x100)) {
			if (value < 0 && sub === 0 && this[offset + i + 1] !== 0) {
				sub = 1;
			}
			this[offset + i] = ((value / mul) >> 0) - sub & 0xFF;
		}

		return offset + byteLength;
	};

	Buffer.prototype.writeInt8 = function writeInt8 (value, offset, noAssert) {
		value = +value;
		offset = offset >>> 0;
		if (!noAssert) checkInt(this, value, offset, 1, 0x7f, -0x80);
		if (value < 0) value = 0xff + value + 1;
		this[offset] = (value & 0xff);
		return offset + 1;
	};

	Buffer.prototype.writeInt16LE = function writeInt16LE (value, offset, noAssert) {
		value = +value;
		offset = offset >>> 0;
		if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000);
		this[offset] = (value & 0xff);
		this[offset + 1] = (value >>> 8);
		return offset + 2;
	};

	Buffer.prototype.writeInt16BE = function writeInt16BE (value, offset, noAssert) {
		value = +value;
		offset = offset >>> 0;
		if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000);
		this[offset] = (value >>> 8);
		this[offset + 1] = (value & 0xff);
		return offset + 2;
	};

	Buffer.prototype.writeInt32LE = function writeInt32LE (value, offset, noAssert) {
		value = +value;
		offset = offset >>> 0;
		if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000);
		this[offset] = (value & 0xff);
		this[offset + 1] = (value >>> 8);
		this[offset + 2] = (value >>> 16);
		this[offset + 3] = (value >>> 24);
		return offset + 4;
	};

	Buffer.prototype.writeInt32BE = function writeInt32BE (value, offset, noAssert) {
		value = +value;
		offset = offset >>> 0;
		if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000);
		if (value < 0) value = 0xffffffff + value + 1;
		this[offset] = (value >>> 24);
		this[offset + 1] = (value >>> 16);
		this[offset + 2] = (value >>> 8);
		this[offset + 3] = (value & 0xff);
		return offset + 4;
	};

	function checkIEEE754 (buf, value, offset, ext, max, min) {
		if (offset + ext > buf.length) throw new RangeError("Index out of range");
		if (offset < 0) throw new RangeError("Index out of range");
	}

	function writeFloat (buf, value, offset, littleEndian, noAssert) {
		value = +value;
		offset = offset >>> 0;
		if (!noAssert) {
			checkIEEE754(buf, value, offset, 4, 3.4028234663852886e+38, -3.4028234663852886e+38);
		}
		ieee754.write(buf, value, offset, littleEndian, 23, 4);
		return offset + 4;
	}

	Buffer.prototype.writeFloatLE = function writeFloatLE (value, offset, noAssert) {
		return writeFloat(this, value, offset, true, noAssert);
	};

	Buffer.prototype.writeFloatBE = function writeFloatBE (value, offset, noAssert) {
		return writeFloat(this, value, offset, false, noAssert);
	};

	function writeDouble (buf, value, offset, littleEndian, noAssert) {
		value = +value;
		offset = offset >>> 0;
		if (!noAssert) {
			checkIEEE754(buf, value, offset, 8, 1.7976931348623157E+308, -1.7976931348623157E+308);
		}
		ieee754.write(buf, value, offset, littleEndian, 52, 8);
		return offset + 8;
	}

	Buffer.prototype.writeDoubleLE = function writeDoubleLE (value, offset, noAssert) {
		return writeDouble(this, value, offset, true, noAssert);
	};

	Buffer.prototype.writeDoubleBE = function writeDoubleBE (value, offset, noAssert) {
		return writeDouble(this, value, offset, false, noAssert);
	};

	// copy(targetBuffer, targetStart=0, sourceStart=0, sourceEnd=buffer.length)
	Buffer.prototype.copy = function copy (target, targetStart, start, end) {
		if (!Buffer.isBuffer(target)) throw new TypeError("argument should be a Buffer");
		if (!start) start = 0;
		if (!end && end !== 0) end = this.length;
		if (targetStart >= target.length) targetStart = target.length;
		if (!targetStart) targetStart = 0;
		if (end > 0 && end < start) end = start;

		// Copy 0 bytes; we're done
		if (end === start) return 0;
		if (target.length === 0 || this.length === 0) return 0;

		// Fatal error conditions
		if (targetStart < 0) {
			throw new RangeError("targetStart out of bounds");
		}
		if (start < 0 || start >= this.length) throw new RangeError("Index out of range");
		if (end < 0) throw new RangeError("sourceEnd out of bounds");

		// Are we oob?
		if (end > this.length) end = this.length;
		if (target.length - targetStart < end - start) {
			end = target.length - targetStart + start;
		}

		var len = end - start;

		if (this === target && typeof Uint8Array.prototype.copyWithin === "function") {
			// Use built-in when available, missing from IE11
			this.copyWithin(targetStart, start, end);
		} else if (this === target && start < targetStart && targetStart < end) {
			// descending copy from end
			for (var i = len - 1; i >= 0; --i) {
				target[i + targetStart] = this[i + start];
			}
		} else {
			Uint8Array.prototype.set.call(
				target,
				this.subarray(start, end),
				targetStart
			);
		}

		return len;
	};

	// Usage:
	//    buffer.fill(number[, offset[, end]])
	//    buffer.fill(buffer[, offset[, end]])
	//    buffer.fill(string[, offset[, end]][, encoding])
	Buffer.prototype.fill = function fill (val, start, end, encoding) {
		// Handle string cases:
		if (typeof val === "string") {
			if (typeof start === "string") {
				encoding = start;
				start = 0;
				end = this.length;
			} else if (typeof end === "string") {
				encoding = end;
				end = this.length;
			}
			if (encoding !== undefined && typeof encoding !== "string") {
				throw new TypeError("encoding must be a string");
			}
			if (typeof encoding === "string" && !Buffer.isEncoding(encoding)) {
				throw new TypeError("Unknown encoding: " + encoding);
			}
			if (val.length === 1) {
				var code = val.charCodeAt(0);
				if ((encoding === "utf8" && code < 128) ||
          encoding === "latin1") {
					// Fast path: If `val` fits into a single byte, use that numeric value.
					val = code;
				}
			}
		} else if (typeof val === "number") {
			val = val & 255;
		}

		// Invalid ranges are not set to a default, so can range check early.
		if (start < 0 || this.length < start || this.length < end) {
			throw new RangeError("Out of range index");
		}

		if (end <= start) {
			return this;
		}

		start = start >>> 0;
		end = end === undefined ? this.length : end >>> 0;

		if (!val) val = 0;

		var i;
		if (typeof val === "number") {
			for (i = start; i < end; ++i) {
				this[i] = val;
			}
		} else {
			var bytes = Buffer.isBuffer(val)
				? val
				: new Buffer(val, encoding);
			var len = bytes.length;
			if (len === 0) {
				throw new TypeError("The value \"" + val +
        "\" is invalid for argument \"value\"");
			}
			for (i = 0; i < end - start; ++i) {
				this[i + start] = bytes[i % len];
			}
		}

		return this;
	};

	// HELPER FUNCTIONS
	// ================

	var INVALID_BASE64_RE = /[^+/0-9A-Za-z-_]/g;

	function base64clean (str) {
		// Node takes equal signs as end of the Base64 encoding
		str = str.split("=")[0];
		// Node strips out invalid characters like \n and \t from the string, base64-js does not
		str = str.trim().replace(INVALID_BASE64_RE, "");
		// Node converts strings with length < 2 to ''
		if (str.length < 2) return "";
		// Node allows for non-padded base64 strings (missing trailing ===), base64-js does not
		while (str.length % 4 !== 0) {
			str = str + "=";
		}
		return str;
	}

	function toHex (n) {
		if (n < 16) return "0" + n.toString(16);
		return n.toString(16);
	}

	function utf8ToBytes (string, units) {
		units = units || Infinity;
		var codePoint;
		var length = string.length;
		var leadSurrogate = null;
		var bytes = [];

		for (var i = 0; i < length; ++i) {
			codePoint = string.charCodeAt(i);

			// is surrogate component
			if (codePoint > 0xD7FF && codePoint < 0xE000) {
				// last char was a lead
				if (!leadSurrogate) {
					// no lead yet
					if (codePoint > 0xDBFF) {
						// unexpected trail
						if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD);
						continue;
					} else if (i + 1 === length) {
						// unpaired lead
						if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD);
						continue;
					}

					// valid lead
					leadSurrogate = codePoint;

					continue;
				}

				// 2 leads in a row
				if (codePoint < 0xDC00) {
					if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD);
					leadSurrogate = codePoint;
					continue;
				}

				// valid surrogate pair
				codePoint = (leadSurrogate - 0xD800 << 10 | codePoint - 0xDC00) + 0x10000;
			} else if (leadSurrogate) {
				// valid bmp char, but last char was a lead
				if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD);
			}

			leadSurrogate = null;

			// encode utf8
			if (codePoint < 0x80) {
				if ((units -= 1) < 0) break;
				bytes.push(codePoint);
			} else if (codePoint < 0x800) {
				if ((units -= 2) < 0) break;
				bytes.push(
					codePoint >> 0x6 | 0xC0,
					codePoint & 0x3F | 0x80
				);
			} else if (codePoint < 0x10000) {
				if ((units -= 3) < 0) break;
				bytes.push(
					codePoint >> 0xC | 0xE0,
					codePoint >> 0x6 & 0x3F | 0x80,
					codePoint & 0x3F | 0x80
				);
			} else if (codePoint < 0x110000) {
				if ((units -= 4) < 0) break;
				bytes.push(
					codePoint >> 0x12 | 0xF0,
					codePoint >> 0xC & 0x3F | 0x80,
					codePoint >> 0x6 & 0x3F | 0x80,
					codePoint & 0x3F | 0x80
				);
			} else {
				throw new Error("Invalid code point");
			}
		}

		return bytes;
	}

	function asciiToBytes (str) {
		var byteArray = [];
		for (var i = 0; i < str.length; ++i) {
			// Node's code seems to be doing this and not & 0x7F..
			byteArray.push(str.charCodeAt(i) & 0xFF);
		}
		return byteArray;
	}

	function utf16leToBytes (str, units) {
		var c, hi, lo;
		var byteArray = [];
		for (var i = 0; i < str.length; ++i) {
			if ((units -= 2) < 0) break;

			c = str.charCodeAt(i);
			hi = c >> 8;
			lo = c % 256;
			byteArray.push(lo);
			byteArray.push(hi);
		}

		return byteArray;
	}

	function base64ToBytes (str) {
		return base64.toByteArray(base64clean(str));
	}

	function blitBuffer (src, dst, offset, length) {
		for (var i = 0; i < length; ++i) {
			if ((i + offset >= dst.length) || (i >= src.length)) break;
			dst[i + offset] = src[i];
		}
		return i;
	}

	// ArrayBuffers from another context (i.e. an iframe) do not pass the `instanceof` check
	// but they should be treated as valid. See: https://github.com/feross/buffer/issues/166
	function isArrayBuffer (obj) {
		return obj instanceof ArrayBuffer ||
    (obj != null && obj.constructor != null && obj.constructor.name === "ArrayBuffer" &&
      typeof obj.byteLength === "number");
	}

	function numberIsNaN (obj) {
		return obj !== obj; // eslint-disable-line no-self-compare
	}

},{"base64-js":1,"ieee754":4}],4:[function(require,module,exports){
	exports.read = function (buffer, offset, isLE, mLen, nBytes) {
		var e, m;
		var eLen = (nBytes * 8) - mLen - 1;
		var eMax = (1 << eLen) - 1;
		var eBias = eMax >> 1;
		var nBits = -7;
		var i = isLE ? (nBytes - 1) : 0;
		var d = isLE ? -1 : 1;
		var s = buffer[offset + i];

		i += d;

		e = s & ((1 << (-nBits)) - 1);
		s >>= (-nBits);
		nBits += eLen;
		for (; nBits > 0; e = (e * 256) + buffer[offset + i], i += d, nBits -= 8) {}

		m = e & ((1 << (-nBits)) - 1);
		e >>= (-nBits);
		nBits += mLen;
		for (; nBits > 0; m = (m * 256) + buffer[offset + i], i += d, nBits -= 8) {}

		if (e === 0) {
			e = 1 - eBias;
		} else if (e === eMax) {
			return m ? NaN : ((s ? -1 : 1) * Infinity);
		} else {
			m = m + Math.pow(2, mLen);
			e = e - eBias;
		}
		return (s ? -1 : 1) * m * Math.pow(2, e - mLen);
	};

	exports.write = function (buffer, value, offset, isLE, mLen, nBytes) {
		var e, m, c;
		var eLen = (nBytes * 8) - mLen - 1;
		var eMax = (1 << eLen) - 1;
		var eBias = eMax >> 1;
		var rt = (mLen === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0);
		var i = isLE ? 0 : (nBytes - 1);
		var d = isLE ? 1 : -1;
		var s = value < 0 || (value === 0 && 1 / value < 0) ? 1 : 0;

		value = Math.abs(value);

		if (isNaN(value) || value === Infinity) {
			m = isNaN(value) ? 1 : 0;
			e = eMax;
		} else {
			e = Math.floor(Math.log(value) / Math.LN2);
			if (value * (c = Math.pow(2, -e)) < 1) {
				e--;
				c *= 2;
			}
			if (e + eBias >= 1) {
				value += rt / c;
			} else {
				value += rt * Math.pow(2, 1 - eBias);
			}
			if (value * c >= 2) {
				e++;
				c /= 2;
			}

			if (e + eBias >= eMax) {
				m = 0;
				e = eMax;
			} else if (e + eBias >= 1) {
				m = ((value * c) - 1) * Math.pow(2, mLen);
				e = e + eBias;
			} else {
				m = value * Math.pow(2, eBias - 1) * Math.pow(2, mLen);
				e = 0;
			}
		}

		for (; mLen >= 8; buffer[offset + i] = m & 0xff, i += d, m /= 256, mLen -= 8) {}

		e = (e << mLen) | m;
		eLen += mLen;
		for (; eLen > 0; buffer[offset + i] = e & 0xff, i += d, e /= 256, eLen -= 8) {}

		buffer[offset + i - d] |= s * 128;
	};

},{}],5:[function(require,module,exports){
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

	"use strict";

	// If obj.hasOwnProperty has been overridden, then calling
	// obj.hasOwnProperty(prop) will break.
	// See: https://github.com/joyent/node/issues/1707
	function hasOwnProperty(obj, prop) {
		return Object.prototype.hasOwnProperty.call(obj, prop);
	}

	module.exports = function(qs, sep, eq, options) {
		sep = sep || "&";
		eq = eq || "=";
		var obj = {};

		if (typeof qs !== "string" || qs.length === 0) {
			return obj;
		}

		var regexp = /\+/g;
		qs = qs.split(sep);

		var maxKeys = 1000;
		if (options && typeof options.maxKeys === "number") {
			maxKeys = options.maxKeys;
		}

		var len = qs.length;
		// maxKeys <= 0 means that we should not limit keys count
		if (maxKeys > 0 && len > maxKeys) {
			len = maxKeys;
		}

		for (var i = 0; i < len; ++i) {
			var x = qs[i].replace(regexp, "%20"),
				idx = x.indexOf(eq),
				kstr, vstr, k, v;

			if (idx >= 0) {
				kstr = x.substr(0, idx);
				vstr = x.substr(idx + 1);
			} else {
				kstr = x;
				vstr = "";
			}

			k = decodeURIComponent(kstr);
			v = decodeURIComponent(vstr);

			if (!hasOwnProperty(obj, k)) {
				obj[k] = v;
			} else if (isArray(obj[k])) {
				obj[k].push(v);
			} else {
				obj[k] = [obj[k], v];
			}
		}

		return obj;
	};

	var isArray = Array.isArray || function (xs) {
		return Object.prototype.toString.call(xs) === "[object Array]";
	};

},{}],6:[function(require,module,exports){
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

	"use strict";

	var stringifyPrimitive = function(v) {
		switch (typeof v) {
		case "string":
			return v;

		case "boolean":
			return v ? "true" : "false";

		case "number":
			return isFinite(v) ? v : "";

		default:
			return "";
		}
	};

	module.exports = function(obj, sep, eq, name) {
		sep = sep || "&";
		eq = eq || "=";
		if (obj === null) {
			obj = undefined;
		}

		if (typeof obj === "object") {
			return map(objectKeys(obj), function(k) {
				var ks = encodeURIComponent(stringifyPrimitive(k)) + eq;
				if (isArray(obj[k])) {
					return map(obj[k], function(v) {
						return ks + encodeURIComponent(stringifyPrimitive(v));
					}).join(sep);
				} else {
					return ks + encodeURIComponent(stringifyPrimitive(obj[k]));
				}
			}).join(sep);

		}

		if (!name) return "";
		return encodeURIComponent(stringifyPrimitive(name)) + eq +
         encodeURIComponent(stringifyPrimitive(obj));
	};

	var isArray = Array.isArray || function (xs) {
		return Object.prototype.toString.call(xs) === "[object Array]";
	};

	function map (xs, f) {
		if (xs.map) return xs.map(f);
		var res = [];
		for (var i = 0; i < xs.length; i++) {
			res.push(f(xs[i], i));
		}
		return res;
	}

	var objectKeys = Object.keys || function (obj) {
		var res = [];
		for (var key in obj) {
			if (Object.prototype.hasOwnProperty.call(obj, key)) res.push(key);
		}
		return res;
	};

},{}],7:[function(require,module,exports){
	"use strict";

	exports.decode = exports.parse = require("./decode");
	exports.encode = exports.stringify = require("./encode");

},{"./decode":5,"./encode":6}],8:[function(require,module,exports){

/**
 * Expose `Emitter`.
 */

	if (typeof module !== "undefined") {
		module.exports = Emitter;
	}

	/**
 * Initialize a new `Emitter`.
 *
 * @api public
 */

	function Emitter(obj) {
		if (obj) return mixin(obj);
	}

	/**
 * Mixin the emitter properties.
 *
 * @param {Object} obj
 * @return {Object}
 * @api private
 */

	function mixin(obj) {
		for (var key in Emitter.prototype) {
			obj[key] = Emitter.prototype[key];
		}
		return obj;
	}

	/**
 * Listen on the given `event` with `fn`.
 *
 * @param {String} event
 * @param {Function} fn
 * @return {Emitter}
 * @api public
 */

	Emitter.prototype.on =
Emitter.prototype.addEventListener = function(event, fn){
	this._callbacks = this._callbacks || {};
	(this._callbacks["$" + event] = this._callbacks["$" + event] || [])
		.push(fn);
	return this;
};

	/**
 * Adds an `event` listener that will be invoked a single
 * time then automatically removed.
 *
 * @param {String} event
 * @param {Function} fn
 * @return {Emitter}
 * @api public
 */

	Emitter.prototype.once = function(event, fn){
		function on() {
			this.off(event, on);
			fn.apply(this, arguments);
		}

		on.fn = fn;
		this.on(event, on);
		return this;
	};

	/**
 * Remove the given callback for `event` or all
 * registered callbacks.
 *
 * @param {String} event
 * @param {Function} fn
 * @return {Emitter}
 * @api public
 */

	Emitter.prototype.off =
Emitter.prototype.removeListener =
Emitter.prototype.removeAllListeners =
Emitter.prototype.removeEventListener = function(event, fn){
	this._callbacks = this._callbacks || {};

	// all
	if (0 == arguments.length) {
		this._callbacks = {};
		return this;
	}

	// specific event
	var callbacks = this._callbacks["$" + event];
	if (!callbacks) return this;

	// remove all handlers
	if (1 == arguments.length) {
		delete this._callbacks["$" + event];
		return this;
	}

	// remove specific handler
	var cb;
	for (var i = 0; i < callbacks.length; i++) {
		cb = callbacks[i];
		if (cb === fn || cb.fn === fn) {
			callbacks.splice(i, 1);
			break;
		}
	}
	return this;
};

	/**
 * Emit `event` with the given args.
 *
 * @param {String} event
 * @param {Mixed} ...
 * @return {Emitter}
 */

	Emitter.prototype.emit = function(event){
		this._callbacks = this._callbacks || {};
		var args = [].slice.call(arguments, 1)
			, callbacks = this._callbacks["$" + event];

		if (callbacks) {
			callbacks = callbacks.slice(0);
			for (var i = 0, len = callbacks.length; i < len; ++i) {
				callbacks[i].apply(this, args);
			}
		}

		return this;
	};

	/**
 * Return array of callbacks for `event`.
 *
 * @param {String} event
 * @return {Array}
 * @api public
 */

	Emitter.prototype.listeners = function(event){
		this._callbacks = this._callbacks || {};
		return this._callbacks["$" + event] || [];
	};

	/**
 * Check if this emitter has `event` handlers.
 *
 * @param {String} event
 * @return {Boolean}
 * @api public
 */

	Emitter.prototype.hasListeners = function(event){
		return !! this.listeners(event).length;
	};

},{}],9:[function(require,module,exports){
/**
 * Root reference for iframes.
 */

	var root;
	if (typeof window !== "undefined") { // Browser window
		root = window;
	} else if (typeof self !== "undefined") { // Web Worker
		root = self;
	} else { // Other environments
		console.warn("Using browser-only version of superagent in non-browser environment");
		root = this;
	}

	var Emitter = require("component-emitter");
	var RequestBase = require("./request-base");
	var isObject = require("./is-object");
	var isFunction = require("./is-function");
	var ResponseBase = require("./response-base");
	var shouldRetry = require("./should-retry");

	/**
 * Noop.
 */

	function noop(){}

	/**
 * Expose `request`.
 */

	var request = exports = module.exports = function(method, url) {
		// callback
		if ("function" == typeof url) {
			return new exports.Request("GET", method).end(url);
		}

		// url first
		if (1 == arguments.length) {
			return new exports.Request("GET", method);
		}

		return new exports.Request(method, url);
	};

	exports.Request = Request;

	/**
 * Determine XHR.
 */

	request.getXHR = function () {
		if (root.XMLHttpRequest
      && (!root.location || "file:" != root.location.protocol
          || !root.ActiveXObject)) {
			return new XMLHttpRequest;
		} else {
			try { return new ActiveXObject("Microsoft.XMLHTTP"); } catch(e) {}
			try { return new ActiveXObject("Msxml2.XMLHTTP.6.0"); } catch(e) {}
			try { return new ActiveXObject("Msxml2.XMLHTTP.3.0"); } catch(e) {}
			try { return new ActiveXObject("Msxml2.XMLHTTP"); } catch(e) {}
		}
		throw Error("Browser-only verison of superagent could not find XHR");
	};

	/**
 * Removes leading and trailing whitespace, added to support IE.
 *
 * @param {String} s
 * @return {String}
 * @api private
 */

	var trim = "".trim
		? function(s) { return s.trim(); }
		: function(s) { return s.replace(/(^\s*|\s*$)/g, ""); };

	/**
 * Serialize the given `obj`.
 *
 * @param {Object} obj
 * @return {String}
 * @api private
 */

	function serialize(obj) {
		if (!isObject(obj)) return obj;
		var pairs = [];
		for (var key in obj) {
			pushEncodedKeyValuePair(pairs, key, obj[key]);
		}
		return pairs.join("&");
	}

	/**
 * Helps 'serialize' with serializing arrays.
 * Mutates the pairs array.
 *
 * @param {Array} pairs
 * @param {String} key
 * @param {Mixed} val
 */

	function pushEncodedKeyValuePair(pairs, key, val) {
		if (val != null) {
			if (Array.isArray(val)) {
				val.forEach(function(v) {
					pushEncodedKeyValuePair(pairs, key, v);
				});
			} else if (isObject(val)) {
				for(var subkey in val) {
					pushEncodedKeyValuePair(pairs, key + "[" + subkey + "]", val[subkey]);
				}
			} else {
				pairs.push(encodeURIComponent(key)
        + "=" + encodeURIComponent(val));
			}
		} else if (val === null) {
			pairs.push(encodeURIComponent(key));
		}
	}

	/**
 * Expose serialization method.
 */

	request.serializeObject = serialize;

	/**
  * Parse the given x-www-form-urlencoded `str`.
  *
  * @param {String} str
  * @return {Object}
  * @api private
  */

	function parseString(str) {
		var obj = {};
		var pairs = str.split("&");
		var pair;
		var pos;

		for (var i = 0, len = pairs.length; i < len; ++i) {
			pair = pairs[i];
			pos = pair.indexOf("=");
			if (pos == -1) {
				obj[decodeURIComponent(pair)] = "";
			} else {
				obj[decodeURIComponent(pair.slice(0, pos))] =
        decodeURIComponent(pair.slice(pos + 1));
			}
		}

		return obj;
	}

	/**
 * Expose parser.
 */

	request.parseString = parseString;

	/**
 * Default MIME type map.
 *
 *     superagent.types.xml = 'application/xml';
 *
 */

	request.types = {
		html: "text/html",
		json: "application/json",
		xml: "application/xml",
		urlencoded: "application/x-www-form-urlencoded",
		"form": "application/x-www-form-urlencoded",
		"form-data": "application/x-www-form-urlencoded"
	};

	/**
 * Default serialization map.
 *
 *     superagent.serialize['application/xml'] = function(obj){
 *       return 'generated xml here';
 *     };
 *
 */

	request.serialize = {
		"application/x-www-form-urlencoded": serialize,
		"application/json": JSON.stringify
	};

	/**
  * Default parsers.
  *
  *     superagent.parse['application/xml'] = function(str){
  *       return { object parsed from str };
  *     };
  *
  */

	request.parse = {
		"application/x-www-form-urlencoded": parseString,
		"application/json": JSON.parse
	};

	/**
 * Parse the given header `str` into
 * an object containing the mapped fields.
 *
 * @param {String} str
 * @return {Object}
 * @api private
 */

	function parseHeader(str) {
		var lines = str.split(/\r?\n/);
		var fields = {};
		var index;
		var line;
		var field;
		var val;

		lines.pop(); // trailing CRLF

		for (var i = 0, len = lines.length; i < len; ++i) {
			line = lines[i];
			index = line.indexOf(":");
			field = line.slice(0, index).toLowerCase();
			val = trim(line.slice(index + 1));
			fields[field] = val;
		}

		return fields;
	}

	/**
 * Check if `mime` is json or has +json structured syntax suffix.
 *
 * @param {String} mime
 * @return {Boolean}
 * @api private
 */

	function isJSON(mime) {
		return /[\/+]json\b/.test(mime);
	}

	/**
 * Initialize a new `Response` with the given `xhr`.
 *
 *  - set flags (.ok, .error, etc)
 *  - parse header
 *
 * Examples:
 *
 *  Aliasing `superagent` as `request` is nice:
 *
 *      request = superagent;
 *
 *  We can use the promise-like API, or pass callbacks:
 *
 *      request.get('/').end(function(res){});
 *      request.get('/', function(res){});
 *
 *  Sending data can be chained:
 *
 *      request
 *        .post('/user')
 *        .send({ name: 'tj' })
 *        .end(function(res){});
 *
 *  Or passed to `.send()`:
 *
 *      request
 *        .post('/user')
 *        .send({ name: 'tj' }, function(res){});
 *
 *  Or passed to `.post()`:
 *
 *      request
 *        .post('/user', { name: 'tj' })
 *        .end(function(res){});
 *
 * Or further reduced to a single call for simple cases:
 *
 *      request
 *        .post('/user', { name: 'tj' }, function(res){});
 *
 * @param {XMLHTTPRequest} xhr
 * @param {Object} options
 * @api private
 */

	function Response(req) {
		this.req = req;
		this.xhr = this.req.xhr;
		// responseText is accessible only if responseType is '' or 'text' and on older browsers
		this.text = ((this.req.method !="HEAD" && (this.xhr.responseType === "" || this.xhr.responseType === "text")) || typeof this.xhr.responseType === "undefined")
			? this.xhr.responseText
			: null;
		this.statusText = this.req.xhr.statusText;
		var status = this.xhr.status;
		// handle IE9 bug: http://stackoverflow.com/questions/10046972/msie-returns-status-code-of-1223-for-ajax-request
		if (status === 1223) {
			status = 204;
		}
		this._setStatusProperties(status);
		this.header = this.headers = parseHeader(this.xhr.getAllResponseHeaders());
		// getAllResponseHeaders sometimes falsely returns "" for CORS requests, but
		// getResponseHeader still works. so we get content-type even if getting
		// other headers fails.
		this.header["content-type"] = this.xhr.getResponseHeader("content-type");
		this._setHeaderProperties(this.header);

		if (null === this.text && req._responseType) {
			this.body = this.xhr.response;
		} else {
			this.body = this.req.method != "HEAD"
				? this._parseBody(this.text ? this.text : this.xhr.response)
				: null;
		}
	}

	ResponseBase(Response.prototype);

	/**
 * Parse the given body `str`.
 *
 * Used for auto-parsing of bodies. Parsers
 * are defined on the `superagent.parse` object.
 *
 * @param {String} str
 * @return {Mixed}
 * @api private
 */

	Response.prototype._parseBody = function(str){
		var parse = request.parse[this.type];
		if(this.req._parser) {
			return this.req._parser(this, str);
		}
		if (!parse && isJSON(this.type)) {
			parse = request.parse["application/json"];
		}
		return parse && str && (str.length || str instanceof Object)
			? parse(str)
			: null;
	};

	/**
 * Return an `Error` representative of this response.
 *
 * @return {Error}
 * @api public
 */

	Response.prototype.toError = function(){
		var req = this.req;
		var method = req.method;
		var url = req.url;

		var msg = "cannot " + method + " " + url + " (" + this.status + ")";
		var err = new Error(msg);
		err.status = this.status;
		err.method = method;
		err.url = url;

		return err;
	};

	/**
 * Expose `Response`.
 */

	request.Response = Response;

	/**
 * Initialize a new `Request` with the given `method` and `url`.
 *
 * @param {String} method
 * @param {String} url
 * @api public
 */

	function Request(method, url) {
		var self = this;
		this._query = this._query || [];
		this.method = method;
		this.url = url;
		this.header = {}; // preserves header name case
		this._header = {}; // coerces header names to lowercase
		this.on("end", function(){
			var err = null;
			var res = null;

			try {
				res = new Response(self);
			} catch(e) {
				err = new Error("Parser is unable to parse the response");
				err.parse = true;
				err.original = e;
				// issue #675: return the raw response if the response parsing fails
				if (self.xhr) {
					// ie9 doesn't have 'response' property
					err.rawResponse = typeof self.xhr.responseType == "undefined" ? self.xhr.responseText : self.xhr.response;
					// issue #876: return the http status code if the response parsing fails
					err.status = self.xhr.status ? self.xhr.status : null;
					err.statusCode = err.status; // backwards-compat only
				} else {
					err.rawResponse = null;
					err.status = null;
				}

				return self.callback(err);
			}

			self.emit("response", res);

			var new_err;
			try {
				if (!self._isResponseOK(res)) {
					new_err = new Error(res.statusText || "Unsuccessful HTTP response");
					new_err.original = err;
					new_err.response = res;
					new_err.status = res.status;
				}
			} catch(e) {
				new_err = e; // #985 touching res may cause INVALID_STATE_ERR on old Android
			}

			// #1000 don't catch errors from the callback to avoid double calling it
			if (new_err) {
				self.callback(new_err, res);
			} else {
				self.callback(null, res);
			}
		});
	}

	/**
 * Mixin `Emitter` and `RequestBase`.
 */

	Emitter(Request.prototype);
	RequestBase(Request.prototype);

	/**
 * Set Content-Type to `type`, mapping values from `request.types`.
 *
 * Examples:
 *
 *      superagent.types.xml = 'application/xml';
 *
 *      request.post('/')
 *        .type('xml')
 *        .send(xmlstring)
 *        .end(callback);
 *
 *      request.post('/')
 *        .type('application/xml')
 *        .send(xmlstring)
 *        .end(callback);
 *
 * @param {String} type
 * @return {Request} for chaining
 * @api public
 */

	Request.prototype.type = function(type){
		this.set("Content-Type", request.types[type] || type);
		return this;
	};

	/**
 * Set Accept to `type`, mapping values from `request.types`.
 *
 * Examples:
 *
 *      superagent.types.json = 'application/json';
 *
 *      request.get('/agent')
 *        .accept('json')
 *        .end(callback);
 *
 *      request.get('/agent')
 *        .accept('application/json')
 *        .end(callback);
 *
 * @param {String} accept
 * @return {Request} for chaining
 * @api public
 */

	Request.prototype.accept = function(type){
		this.set("Accept", request.types[type] || type);
		return this;
	};

	/**
 * Set Authorization field value with `user` and `pass`.
 *
 * @param {String} user
 * @param {String} [pass] optional in case of using 'bearer' as type
 * @param {Object} options with 'type' property 'auto', 'basic' or 'bearer' (default 'basic')
 * @return {Request} for chaining
 * @api public
 */

	Request.prototype.auth = function(user, pass, options){
		if (typeof pass === "object" && pass !== null) { // pass is optional and can substitute for options
			options = pass;
		}
		if (!options) {
			options = {
				type: "function" === typeof btoa ? "basic" : "auto",
			};
		}

		switch (options.type) {
		case "basic":
			this.set("Authorization", "Basic " + btoa(user + ":" + pass));
			break;

		case "auto":
			this.username = user;
			this.password = pass;
			break;

		case "bearer": // usage would be .auth(accessToken, { type: 'bearer' })
			this.set("Authorization", "Bearer " + user);
			break;
		}
		return this;
	};

	/**
 * Add query-string `val`.
 *
 * Examples:
 *
 *   request.get('/shoes')
 *     .query('size=10')
 *     .query({ color: 'blue' })
 *
 * @param {Object|String} val
 * @return {Request} for chaining
 * @api public
 */

	Request.prototype.query = function(val){
		if ("string" != typeof val) val = serialize(val);
		if (val) this._query.push(val);
		return this;
	};

	/**
 * Queue the given `file` as an attachment to the specified `field`,
 * with optional `options` (or filename).
 *
 * ``` js
 * request.post('/upload')
 *   .attach('content', new Blob(['<a id="a"><b id="b">hey!</b></a>'], { type: "text/html"}))
 *   .end(callback);
 * ```
 *
 * @param {String} field
 * @param {Blob|File} file
 * @param {String|Object} options
 * @return {Request} for chaining
 * @api public
 */

	Request.prototype.attach = function(field, file, options){
		if (file) {
			if (this._data) {
				throw Error("superagent can't mix .send() and .attach()");
			}

			this._getFormData().append(field, file, options || file.name);
		}
		return this;
	};

	Request.prototype._getFormData = function(){
		if (!this._formData) {
			this._formData = new root.FormData();
		}
		return this._formData;
	};

	/**
 * Invoke the callback with `err` and `res`
 * and handle arity check.
 *
 * @param {Error} err
 * @param {Response} res
 * @api private
 */

	Request.prototype.callback = function(err, res){
		// console.log(this._retries, this._maxRetries)
		if (this._maxRetries && this._retries++ < this._maxRetries && shouldRetry(err, res)) {
			return this._retry();
		}

		var fn = this._callback;
		this.clearTimeout();

		if (err) {
			if (this._maxRetries) err.retries = this._retries - 1;
			this.emit("error", err);
		}

		fn(err, res);
	};

	/**
 * Invoke callback with x-domain error.
 *
 * @api private
 */

	Request.prototype.crossDomainError = function(){
		var err = new Error("Request has been terminated\nPossible causes: the network is offline, Origin is not allowed by Access-Control-Allow-Origin, the page is being unloaded, etc.");
		err.crossDomain = true;

		err.status = this.status;
		err.method = this.method;
		err.url = this.url;

		this.callback(err);
	};

	// This only warns, because the request is still likely to work
	Request.prototype.buffer = Request.prototype.ca = Request.prototype.agent = function(){
		console.warn("This is not supported in browser version of superagent");
		return this;
	};

	// This throws, because it can't send/receive data as expected
	Request.prototype.pipe = Request.prototype.write = function(){
		throw Error("Streaming is not supported in browser version of superagent");
	};

	/**
 * Compose querystring to append to req.url
 *
 * @api private
 */

	Request.prototype._appendQueryString = function(){
		var query = this._query.join("&");
		if (query) {
			this.url += (this.url.indexOf("?") >= 0 ? "&" : "?") + query;
		}

		if (this._sort) {
			var index = this.url.indexOf("?");
			if (index >= 0) {
				var queryArr = this.url.substring(index + 1).split("&");
				if (isFunction(this._sort)) {
					queryArr.sort(this._sort);
				} else {
					queryArr.sort();
				}
				this.url = this.url.substring(0, index) + "?" + queryArr.join("&");
			}
		}
	};

	/**
 * Check if `obj` is a host object,
 * we don't want to serialize these :)
 *
 * @param {Object} obj
 * @return {Boolean}
 * @api private
 */
	Request.prototype._isHost = function _isHost(obj) {
		// Native objects stringify to [object File], [object Blob], [object FormData], etc.
		return obj && "object" === typeof obj && !Array.isArray(obj) && Object.prototype.toString.call(obj) !== "[object Object]";
	};

	/**
 * Initiate request, invoking callback `fn(res)`
 * with an instanceof `Response`.
 *
 * @param {Function} fn
 * @return {Request} for chaining
 * @api public
 */

	Request.prototype.end = function(fn){
		if (this._endCalled) {
			console.warn("Warning: .end() was called twice. This is not supported in superagent");
		}
		this._endCalled = true;

		// store callback
		this._callback = fn || noop;

		// querystring
		this._appendQueryString();

		return this._end();
	};

	Request.prototype._end = function() {
		var self = this;
		var xhr = this.xhr = request.getXHR();
		var data = this._formData || this._data;

		this._setTimeouts();

		// state change
		xhr.onreadystatechange = function(){
			var readyState = xhr.readyState;
			if (readyState >= 2 && self._responseTimeoutTimer) {
				clearTimeout(self._responseTimeoutTimer);
			}
			if (4 != readyState) {
				return;
			}

			// In IE9, reads to any property (e.g. status) off of an aborted XHR will
			// result in the error "Could not complete the operation due to error c00c023f"
			var status;
			try { status = xhr.status; } catch(e) { status = 0; }

			if (!status) {
				if (self.timedout || self._aborted) return;
				return self.crossDomainError();
			}
			self.emit("end");
		};

		// progress
		var handleProgress = function(direction, e) {
			if (e.total > 0) {
				e.percent = e.loaded / e.total * 100;
			}
			e.direction = direction;
			self.emit("progress", e);
		};
		if (this.hasListeners("progress")) {
			try {
				xhr.onprogress = handleProgress.bind(null, "download");
				if (xhr.upload) {
					xhr.upload.onprogress = handleProgress.bind(null, "upload");
				}
			} catch(e) {
				// Accessing xhr.upload fails in IE from a web worker, so just pretend it doesn't exist.
				// Reported here:
				// https://connect.microsoft.com/IE/feedback/details/837245/xmlhttprequest-upload-throws-invalid-argument-when-used-from-web-worker-context
			}
		}

		// initiate request
		try {
			if (this.username && this.password) {
				xhr.open(this.method, this.url, true, this.username, this.password);
			} else {
				xhr.open(this.method, this.url, true);
			}
		} catch (err) {
			// see #1149
			return this.callback(err);
		}

		// CORS
		if (this._withCredentials) xhr.withCredentials = true;

		// body
		if (!this._formData && "GET" != this.method && "HEAD" != this.method && "string" != typeof data && !this._isHost(data)) {
			// serialize stuff
			var contentType = this._header["content-type"];
			var serialize = this._serializer || request.serialize[contentType ? contentType.split(";")[0] : ""];
			if (!serialize && isJSON(contentType)) {
				serialize = request.serialize["application/json"];
			}
			if (serialize) data = serialize(data);
		}

		// set header fields
		for (var field in this.header) {
			if (null == this.header[field]) continue;

			if (this.header.hasOwnProperty(field))
				xhr.setRequestHeader(field, this.header[field]);
		}

		if (this._responseType) {
			xhr.responseType = this._responseType;
		}

		// send stuff
		this.emit("request", this);

		// IE11 xhr.send(undefined) sends 'undefined' string as POST payload (instead of nothing)
		// We need null here if data is undefined
		xhr.send(typeof data !== "undefined" ? data : null);
		return this;
	};

	/**
 * GET `url` with optional callback `fn(res)`.
 *
 * @param {String} url
 * @param {Mixed|Function} [data] or fn
 * @param {Function} [fn]
 * @return {Request}
 * @api public
 */

	request.get = function(url, data, fn){
		var req = request("GET", url);
		if ("function" == typeof data) fn = data, data = null;
		if (data) req.query(data);
		if (fn) req.end(fn);
		return req;
	};

	/**
 * HEAD `url` with optional callback `fn(res)`.
 *
 * @param {String} url
 * @param {Mixed|Function} [data] or fn
 * @param {Function} [fn]
 * @return {Request}
 * @api public
 */

	request.head = function(url, data, fn){
		var req = request("HEAD", url);
		if ("function" == typeof data) fn = data, data = null;
		if (data) req.send(data);
		if (fn) req.end(fn);
		return req;
	};

	/**
 * OPTIONS query to `url` with optional callback `fn(res)`.
 *
 * @param {String} url
 * @param {Mixed|Function} [data] or fn
 * @param {Function} [fn]
 * @return {Request}
 * @api public
 */

	request.options = function(url, data, fn){
		var req = request("OPTIONS", url);
		if ("function" == typeof data) fn = data, data = null;
		if (data) req.send(data);
		if (fn) req.end(fn);
		return req;
	};

	/**
 * DELETE `url` with optional `data` and callback `fn(res)`.
 *
 * @param {String} url
 * @param {Mixed} [data]
 * @param {Function} [fn]
 * @return {Request}
 * @api public
 */

	function del(url, data, fn){
		var req = request("DELETE", url);
		if ("function" == typeof data) fn = data, data = null;
		if (data) req.send(data);
		if (fn) req.end(fn);
		return req;
	}

	request["del"] = del;
	request["delete"] = del;

	/**
 * PATCH `url` with optional `data` and callback `fn(res)`.
 *
 * @param {String} url
 * @param {Mixed} [data]
 * @param {Function} [fn]
 * @return {Request}
 * @api public
 */

	request.patch = function(url, data, fn){
		var req = request("PATCH", url);
		if ("function" == typeof data) fn = data, data = null;
		if (data) req.send(data);
		if (fn) req.end(fn);
		return req;
	};

	/**
 * POST `url` with optional `data` and callback `fn(res)`.
 *
 * @param {String} url
 * @param {Mixed} [data]
 * @param {Function} [fn]
 * @return {Request}
 * @api public
 */

	request.post = function(url, data, fn){
		var req = request("POST", url);
		if ("function" == typeof data) fn = data, data = null;
		if (data) req.send(data);
		if (fn) req.end(fn);
		return req;
	};

	/**
 * PUT `url` with optional `data` and callback `fn(res)`.
 *
 * @param {String} url
 * @param {Mixed|Function} [data] or fn
 * @param {Function} [fn]
 * @return {Request}
 * @api public
 */

	request.put = function(url, data, fn){
		var req = request("PUT", url);
		if ("function" == typeof data) fn = data, data = null;
		if (data) req.send(data);
		if (fn) req.end(fn);
		return req;
	};

},{"./is-function":10,"./is-object":11,"./request-base":12,"./response-base":13,"./should-retry":14,"component-emitter":8}],10:[function(require,module,exports){
/**
 * Check if `fn` is a function.
 *
 * @param {Function} fn
 * @return {Boolean}
 * @api private
 */
	var isObject = require("./is-object");

	function isFunction(fn) {
		var tag = isObject(fn) ? Object.prototype.toString.call(fn) : "";
		return tag === "[object Function]";
	}

	module.exports = isFunction;

},{"./is-object":11}],11:[function(require,module,exports){
/**
 * Check if `obj` is an object.
 *
 * @param {Object} obj
 * @return {Boolean}
 * @api private
 */

	function isObject(obj) {
		return null !== obj && "object" === typeof obj;
	}

	module.exports = isObject;

},{}],12:[function(require,module,exports){
/**
 * Module of mixed-in functions shared between node and client code
 */
	var isObject = require("./is-object");

	/**
 * Expose `RequestBase`.
 */

	module.exports = RequestBase;

	/**
 * Initialize a new `RequestBase`.
 *
 * @api public
 */

	function RequestBase(obj) {
		if (obj) return mixin(obj);
	}

	/**
 * Mixin the prototype properties.
 *
 * @param {Object} obj
 * @return {Object}
 * @api private
 */

	function mixin(obj) {
		for (var key in RequestBase.prototype) {
			obj[key] = RequestBase.prototype[key];
		}
		return obj;
	}

	/**
 * Clear previous timeout.
 *
 * @return {Request} for chaining
 * @api public
 */

	RequestBase.prototype.clearTimeout = function _clearTimeout(){
		clearTimeout(this._timer);
		clearTimeout(this._responseTimeoutTimer);
		delete this._timer;
		delete this._responseTimeoutTimer;
		return this;
	};

	/**
 * Override default response body parser
 *
 * This function will be called to convert incoming data into request.body
 *
 * @param {Function}
 * @api public
 */

	RequestBase.prototype.parse = function parse(fn){
		this._parser = fn;
		return this;
	};

	/**
 * Set format of binary response body.
 * In browser valid formats are 'blob' and 'arraybuffer',
 * which return Blob and ArrayBuffer, respectively.
 *
 * In Node all values result in Buffer.
 *
 * Examples:
 *
 *      req.get('/')
 *        .responseType('blob')
 *        .end(callback);
 *
 * @param {String} val
 * @return {Request} for chaining
 * @api public
 */

	RequestBase.prototype.responseType = function(val){
		this._responseType = val;
		return this;
	};

	/**
 * Override default request body serializer
 *
 * This function will be called to convert data set via .send or .attach into payload to send
 *
 * @param {Function}
 * @api public
 */

	RequestBase.prototype.serialize = function serialize(fn){
		this._serializer = fn;
		return this;
	};

	/**
 * Set timeouts.
 *
 * - response timeout is time between sending request and receiving the first byte of the response. Includes DNS and connection time.
 * - deadline is the time from start of the request to receiving response body in full. If the deadline is too short large files may not load at all on slow connections.
 *
 * Value of 0 or false means no timeout.
 *
 * @param {Number|Object} ms or {response, read, deadline}
 * @return {Request} for chaining
 * @api public
 */

	RequestBase.prototype.timeout = function timeout(options){
		if (!options || "object" !== typeof options) {
			this._timeout = options;
			this._responseTimeout = 0;
			return this;
		}

		for(var option in options) {
			switch(option) {
			case "deadline":
				this._timeout = options.deadline;
				break;
			case "response":
				this._responseTimeout = options.response;
				break;
			default:
				console.warn("Unknown timeout option", option);
			}
		}
		return this;
	};

	/**
 * Set number of retry attempts on error.
 *
 * Failed requests will be retried 'count' times if timeout or err.code >= 500.
 *
 * @param {Number} count
 * @return {Request} for chaining
 * @api public
 */

	RequestBase.prototype.retry = function retry(count){
		// Default to 1 if no count passed or true
		if (arguments.length === 0 || count === true) count = 1;
		if (count <= 0) count = 0;
		this._maxRetries = count;
		this._retries = 0;
		return this;
	};

	/**
 * Retry request
 *
 * @return {Request} for chaining
 * @api private
 */

	RequestBase.prototype._retry = function() {
		this.clearTimeout();

		// node
		if (this.req) {
			this.req = null;
			this.req = this.request();
		}

		this._aborted = false;
		this.timedout = false;

		return this._end();
	};

	/**
 * Promise support
 *
 * @param {Function} resolve
 * @param {Function} [reject]
 * @return {Request}
 */

	RequestBase.prototype.then = function then(resolve, reject) {
		if (!this._fullfilledPromise) {
			var self = this;
			if (this._endCalled) {
				console.warn("Warning: superagent request was sent twice, because both .end() and .then() were called. Never call .end() if you use promises");
			}
			this._fullfilledPromise = new Promise(function(innerResolve, innerReject){
				self.end(function(err, res){
					if (err) innerReject(err); else innerResolve(res);
				});
			});
		}
		return this._fullfilledPromise.then(resolve, reject);
	};

	RequestBase.prototype.catch = function(cb) {
		return this.then(undefined, cb);
	};

	/**
 * Allow for extension
 */

	RequestBase.prototype.use = function use(fn) {
		fn(this);
		return this;
	};

	RequestBase.prototype.ok = function(cb) {
		if ("function" !== typeof cb) throw Error("Callback required");
		this._okCallback = cb;
		return this;
	};

	RequestBase.prototype._isResponseOK = function(res) {
		if (!res) {
			return false;
		}

		if (this._okCallback) {
			return this._okCallback(res);
		}

		return res.status >= 200 && res.status < 300;
	};


	/**
 * Get request header `field`.
 * Case-insensitive.
 *
 * @param {String} field
 * @return {String}
 * @api public
 */

	RequestBase.prototype.get = function(field){
		return this._header[field.toLowerCase()];
	};

	/**
 * Get case-insensitive header `field` value.
 * This is a deprecated internal API. Use `.get(field)` instead.
 *
 * (getHeader is no longer used internally by the superagent code base)
 *
 * @param {String} field
 * @return {String}
 * @api private
 * @deprecated
 */

	RequestBase.prototype.getHeader = RequestBase.prototype.get;

	/**
 * Set header `field` to `val`, or multiple fields with one object.
 * Case-insensitive.
 *
 * Examples:
 *
 *      req.get('/')
 *        .set('Accept', 'application/json')
 *        .set('X-API-Key', 'foobar')
 *        .end(callback);
 *
 *      req.get('/')
 *        .set({ Accept: 'application/json', 'X-API-Key': 'foobar' })
 *        .end(callback);
 *
 * @param {String|Object} field
 * @param {String} val
 * @return {Request} for chaining
 * @api public
 */

	RequestBase.prototype.set = function(field, val){
		if (isObject(field)) {
			for (var key in field) {
				this.set(key, field[key]);
			}
			return this;
		}
		this._header[field.toLowerCase()] = val;
		this.header[field] = val;
		return this;
	};

	/**
 * Remove header `field`.
 * Case-insensitive.
 *
 * Example:
 *
 *      req.get('/')
 *        .unset('User-Agent')
 *        .end(callback);
 *
 * @param {String} field
 */
	RequestBase.prototype.unset = function(field){
		delete this._header[field.toLowerCase()];
		delete this.header[field];
		return this;
	};

	/**
 * Write the field `name` and `val`, or multiple fields with one object
 * for "multipart/form-data" request bodies.
 *
 * ``` js
 * request.post('/upload')
 *   .field('foo', 'bar')
 *   .end(callback);
 *
 * request.post('/upload')
 *   .field({ foo: 'bar', baz: 'qux' })
 *   .end(callback);
 * ```
 *
 * @param {String|Object} name
 * @param {String|Blob|File|Buffer|fs.ReadStream} val
 * @return {Request} for chaining
 * @api public
 */
	RequestBase.prototype.field = function(name, val) {

		// name should be either a string or an object.
		if (null === name ||  undefined === name) {
			throw new Error(".field(name, val) name can not be empty");
		}

		if (this._data) {
			console.error(".field() can't be used if .send() is used. Please use only .send() or only .field() & .attach()");
		}

		if (isObject(name)) {
			for (var key in name) {
				this.field(key, name[key]);
			}
			return this;
		}

		if (Array.isArray(val)) {
			for (var i in val) {
				this.field(name, val[i]);
			}
			return this;
		}

		// val should be defined now
		if (null === val || undefined === val) {
			throw new Error(".field(name, val) val can not be empty");
		}
		if ("boolean" === typeof val) {
			val = "" + val;
		}
		this._getFormData().append(name, val);
		return this;
	};

	/**
 * Abort the request, and clear potential timeout.
 *
 * @return {Request}
 * @api public
 */
	RequestBase.prototype.abort = function(){
		if (this._aborted) {
			return this;
		}
		this._aborted = true;
		this.xhr && this.xhr.abort(); // browser
		this.req && this.req.abort(); // node
		this.clearTimeout();
		this.emit("abort");
		return this;
	};

	/**
 * Enable transmission of cookies with x-domain requests.
 *
 * Note that for this to work the origin must not be
 * using "Access-Control-Allow-Origin" with a wildcard,
 * and also must set "Access-Control-Allow-Credentials"
 * to "true".
 *
 * @api public
 */

	RequestBase.prototype.withCredentials = function(on){
		// This is browser-only functionality. Node side is no-op.
		if(on==undefined) on = true;
		this._withCredentials = on;
		return this;
	};

	/**
 * Set the max redirects to `n`. Does noting in browser XHR implementation.
 *
 * @param {Number} n
 * @return {Request} for chaining
 * @api public
 */

	RequestBase.prototype.redirects = function(n){
		this._maxRedirects = n;
		return this;
	};

	/**
 * Convert to a plain javascript object (not JSON string) of scalar properties.
 * Note as this method is designed to return a useful non-this value,
 * it cannot be chained.
 *
 * @return {Object} describing method, url, and data of this request
 * @api public
 */

	RequestBase.prototype.toJSON = function(){
		return {
			method: this.method,
			url: this.url,
			data: this._data,
			headers: this._header
		};
	};


	/**
 * Send `data` as the request body, defaulting the `.type()` to "json" when
 * an object is given.
 *
 * Examples:
 *
 *       // manual json
 *       request.post('/user')
 *         .type('json')
 *         .send('{"name":"tj"}')
 *         .end(callback)
 *
 *       // auto json
 *       request.post('/user')
 *         .send({ name: 'tj' })
 *         .end(callback)
 *
 *       // manual x-www-form-urlencoded
 *       request.post('/user')
 *         .type('form')
 *         .send('name=tj')
 *         .end(callback)
 *
 *       // auto x-www-form-urlencoded
 *       request.post('/user')
 *         .type('form')
 *         .send({ name: 'tj' })
 *         .end(callback)
 *
 *       // defaults to x-www-form-urlencoded
 *      request.post('/user')
 *        .send('name=tobi')
 *        .send('species=ferret')
 *        .end(callback)
 *
 * @param {String|Object} data
 * @return {Request} for chaining
 * @api public
 */

	RequestBase.prototype.send = function(data){
		var isObj = isObject(data);
		var type = this._header["content-type"];

		if (this._formData) {
			console.error(".send() can't be used if .attach() or .field() is used. Please use only .send() or only .field() & .attach()");
		}

		if (isObj && !this._data) {
			if (Array.isArray(data)) {
				this._data = [];
			} else if (!this._isHost(data)) {
				this._data = {};
			}
		} else if (data && this._data && this._isHost(this._data)) {
			throw Error("Can't merge these send calls");
		}

		// merge
		if (isObj && isObject(this._data)) {
			for (var key in data) {
				this._data[key] = data[key];
			}
		} else if ("string" == typeof data) {
			// default to x-www-form-urlencoded
			if (!type) this.type("form");
			type = this._header["content-type"];
			if ("application/x-www-form-urlencoded" == type) {
				this._data = this._data
					? this._data + "&" + data
					: data;
			} else {
				this._data = (this._data || "") + data;
			}
		} else {
			this._data = data;
		}

		if (!isObj || this._isHost(data)) {
			return this;
		}

		// default to json
		if (!type) this.type("json");
		return this;
	};


	/**
 * Sort `querystring` by the sort function
 *
 *
 * Examples:
 *
 *       // default order
 *       request.get('/user')
 *         .query('name=Nick')
 *         .query('search=Manny')
 *         .sortQuery()
 *         .end(callback)
 *
 *       // customized sort function
 *       request.get('/user')
 *         .query('name=Nick')
 *         .query('search=Manny')
 *         .sortQuery(function(a, b){
 *           return a.length - b.length;
 *         })
 *         .end(callback)
 *
 *
 * @param {Function} sort
 * @return {Request} for chaining
 * @api public
 */

	RequestBase.prototype.sortQuery = function(sort) {
		// _sort default to true but otherwise can be a function or boolean
		this._sort = typeof sort === "undefined" ? true : sort;
		return this;
	};

	/**
 * Invoke callback with timeout error.
 *
 * @api private
 */

	RequestBase.prototype._timeoutError = function(reason, timeout, errno){
		if (this._aborted) {
			return;
		}
		var err = new Error(reason + timeout + "ms exceeded");
		err.timeout = timeout;
		err.code = "ECONNABORTED";
		err.errno = errno;
		this.timedout = true;
		this.abort();
		this.callback(err);
	};

	RequestBase.prototype._setTimeouts = function() {
		var self = this;

		// deadline
		if (this._timeout && !this._timer) {
			this._timer = setTimeout(function(){
				self._timeoutError("Timeout of ", self._timeout, "ETIME");
			}, this._timeout);
		}
		// response timeout
		if (this._responseTimeout && !this._responseTimeoutTimer) {
			this._responseTimeoutTimer = setTimeout(function(){
				self._timeoutError("Response timeout of ", self._responseTimeout, "ETIMEDOUT");
			}, this._responseTimeout);
		}
	};

},{"./is-object":11}],13:[function(require,module,exports){

/**
 * Module dependencies.
 */

	var utils = require("./utils");

	/**
 * Expose `ResponseBase`.
 */

	module.exports = ResponseBase;

	/**
 * Initialize a new `ResponseBase`.
 *
 * @api public
 */

	function ResponseBase(obj) {
		if (obj) return mixin(obj);
	}

	/**
 * Mixin the prototype properties.
 *
 * @param {Object} obj
 * @return {Object}
 * @api private
 */

	function mixin(obj) {
		for (var key in ResponseBase.prototype) {
			obj[key] = ResponseBase.prototype[key];
		}
		return obj;
	}

	/**
 * Get case-insensitive `field` value.
 *
 * @param {String} field
 * @return {String}
 * @api public
 */

	ResponseBase.prototype.get = function(field){
		return this.header[field.toLowerCase()];
	};

	/**
 * Set header related properties:
 *
 *   - `.type` the content type without params
 *
 * A response of "Content-Type: text/plain; charset=utf-8"
 * will provide you with a `.type` of "text/plain".
 *
 * @param {Object} header
 * @api private
 */

	ResponseBase.prototype._setHeaderProperties = function(header){
		// TODO: moar!
		// TODO: make this a util

		// content-type
		var ct = header["content-type"] || "";
		this.type = utils.type(ct);

		// params
		var params = utils.params(ct);
		for (var key in params) this[key] = params[key];

		this.links = {};

		// links
		try {
			if (header.link) {
				this.links = utils.parseLinks(header.link);
			}
		} catch (err) {
			// ignore
		}
	};

	/**
 * Set flags such as `.ok` based on `status`.
 *
 * For example a 2xx response will give you a `.ok` of __true__
 * whereas 5xx will be __false__ and `.error` will be __true__. The
 * `.clientError` and `.serverError` are also available to be more
 * specific, and `.statusType` is the class of error ranging from 1..5
 * sometimes useful for mapping respond colors etc.
 *
 * "sugar" properties are also defined for common cases. Currently providing:
 *
 *   - .noContent
 *   - .badRequest
 *   - .unauthorized
 *   - .notAcceptable
 *   - .notFound
 *
 * @param {Number} status
 * @api private
 */

	ResponseBase.prototype._setStatusProperties = function(status){
		var type = status / 100 | 0;

		// status / class
		this.status = this.statusCode = status;
		this.statusType = type;

		// basics
		this.info = 1 == type;
		this.ok = 2 == type;
		this.redirect = 3 == type;
		this.clientError = 4 == type;
		this.serverError = 5 == type;
		this.error = (4 == type || 5 == type)
			? this.toError()
			: false;

		// sugar
		this.accepted = 202 == status;
		this.noContent = 204 == status;
		this.badRequest = 400 == status;
		this.unauthorized = 401 == status;
		this.notAcceptable = 406 == status;
		this.forbidden = 403 == status;
		this.notFound = 404 == status;
	};

},{"./utils":15}],14:[function(require,module,exports){
	var ERROR_CODES = [
		"ECONNRESET",
		"ETIMEDOUT",
		"EADDRINFO",
		"ESOCKETTIMEDOUT"
	];

	/**
 * Determine if a request should be retried.
 * (Borrowed from segmentio/superagent-retry)
 *
 * @param {Error} err
 * @param {Response} [res]
 * @returns {Boolean}
 */
	module.exports = function shouldRetry(err, res) {
		if (err && err.code && ~ERROR_CODES.indexOf(err.code)) return true;
		if (res && res.status && res.status >= 500) return true;
		// Superagent timeout
		if (err && "timeout" in err && err.code == "ECONNABORTED") return true;
		if (err && "crossDomain" in err) return true;
		return false;
	};

},{}],15:[function(require,module,exports){

/**
 * Return the mime type for the given `str`.
 *
 * @param {String} str
 * @return {String}
 * @api private
 */

	exports.type = function(str){
		return str.split(/ *; */).shift();
	};

	/**
 * Return header field parameters.
 *
 * @param {String} str
 * @return {Object}
 * @api private
 */

	exports.params = function(str){
		return str.split(/ *; */).reduce(function(obj, str){
			var parts = str.split(/ *= */);
			var key = parts.shift();
			var val = parts.shift();

			if (key && val) obj[key] = val;
			return obj;
		}, {});
	};

	/**
 * Parse Link header fields.
 *
 * @param {String} str
 * @return {Object}
 * @api private
 */

	exports.parseLinks = function(str){
		return str.split(/ *, */).reduce(function(obj, str){
			var parts = str.split(/ *; */);
			var url = parts[0].slice(1, -1);
			var rel = parts[1].split(/ *= */)[1].slice(1, -1);
			obj[rel] = url;
			return obj;
		}, {});
	};

	/**
 * Strip content related fields from `header`.
 *
 * @param {Object} header
 * @return {Object} header
 * @api private
 */

	exports.cleanHeader = function(header, shouldStripCookie){
		delete header["content-type"];
		delete header["content-length"];
		delete header["transfer-encoding"];
		delete header["host"];
		if (shouldStripCookie) {
			delete header["cookie"];
		}
		return header;
	};
},{}],16:[function(require,module,exports){
	(function (Buffer){
		/**
 * Camunda REST API
 * Swagger OpenApi Spec for Camunda REST API.
 *
 * OpenAPI spec version: v7.8.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.3.1
 *
 * Do not edit the class manually.
 *
 */

		(function(root, factory) {
			if (typeof define === "function" && define.amd) {
				// AMD. Register as an anonymous module.
				define(["superagent", "querystring"], factory);
			} else if (typeof module === "object" && module.exports) {
				// CommonJS-like environments that support module.exports, like Node.
				module.exports = factory(require("superagent"), require("querystring"));
			} else {
				// Browser globals (root is window)
				if (!root.CamundaRestApi) {
					root.CamundaRestApi = {};
				}
				root.CamundaRestApi.ApiClient = factory(root.superagent, root.querystring);
			}
		}(this, function(superagent, querystring) {
			"use strict";

			/**
   * @module ApiClient
   * @version v7.8.0
   */

			/**
   * Manages low level client-server communications, parameter marshalling, etc. There should not be any need for an
   * application to use this class directly - the *Api and model classes provide the public API for the service. The
   * contents of this file should be regarded as internal but are documented for completeness.
   * @alias module:ApiClient
   * @class
   */
			var exports = function() {
				/**
     * The base URL against which to resolve every API call's (relative) path.
     * @type {String}
     * @default http://vmwls2t:27111/engine-rest/engine/default
     */
				this.basePath = "https://vmcampte:8443/engine-rest/engine/default".replace(/\/+$/, "");

				/**
     * The authentication methods to be included for all API calls.
     * @type {Array.<String>}
     */
				this.authentications = {
				};
				/**
     * The default HTTP headers to be included for all API calls.
     * @type {Array.<String>}
     * @default {}
     */
				this.defaultHeaders = {};

				/**
     * The default HTTP timeout for all API calls.
     * @type {Number}
     * @default 60000
     */
				this.timeout = 60000;

				/**
     * If set to false an additional timestamp parameter is added to all API GET calls to
     * prevent browser caching
     * @type {Boolean}
     * @default true
     */
				this.cache = true;

				/**
     * If set to true, the client will save the cookies from each server
     * response, and return them in the next request.
     * @default false
     */
				this.enableCookies = false;

				/*
     * Used to save and return cookies in a node.js (non-browser) setting,
     * if this.enableCookies is set to true.
     */
				if (typeof window === "undefined") {
					this.agent = new superagent.agent();
				}

				/*
     * Allow user to override superagent agent
     */
				this.requestAgent = null;
			};

			/**
   * Returns a string representation for an actual parameter.
   * @param param The actual parameter.
   * @returns {String} The string representation of <code>param</code>.
   */
			exports.prototype.paramToString = function(param) {
				if (param == undefined || param == null) {
					return "";
				}
				if (param instanceof Date) {
					return param.toJSON();
				}
				return param.toString();
			};

			/**
   * Builds full URL by appending the given path to the base URL and replacing path parameter place-holders with parameter values.
   * NOTE: query parameters are not handled here.
   * @param {String} path The path to append to the base URL.
   * @param {Object} pathParams The parameter values to append.
   * @returns {String} The encoded path with parameter values substituted.
   */
			exports.prototype.buildUrl = function(path, pathParams) {
				if (!path.match(/^\//)) {
					path = "/" + path;
				}
				var url = this.basePath + path;
				var _this = this;
				url = url.replace(/\{([\w-]+)\}/g, function(fullMatch, key) {
					var value;
					if (pathParams.hasOwnProperty(key)) {
						value = _this.paramToString(pathParams[key]);
					} else {
						value = fullMatch;
					}
					return encodeURIComponent(value);
				});
				return url;
			};

			/**
   * Checks whether the given content type represents JSON.<br>
   * JSON content type examples:<br>
   * <ul>
   * <li>application/json</li>
   * <li>application/json; charset=UTF8</li>
   * <li>APPLICATION/JSON</li>
   * </ul>
   * @param {String} contentType The MIME content type to check.
   * @returns {Boolean} <code>true</code> if <code>contentType</code> represents JSON, otherwise <code>false</code>.
   */
			exports.prototype.isJsonMime = function(contentType) {
				return Boolean(contentType != null && contentType.match(/^application\/json(;.*)?$/i));
			};

			/**
   * Chooses a content type from the given array, with JSON preferred; i.e. return JSON if included, otherwise return the first.
   * @param {Array.<String>} contentTypes
   * @returns {String} The chosen content type, preferring JSON.
   */
			exports.prototype.jsonPreferredMime = function(contentTypes) {
				for (var i = 0; i < contentTypes.length; i++) {
					if (this.isJsonMime(contentTypes[i])) {
						return contentTypes[i];
					}
				}
				return contentTypes[0];
			};

			/**
   * Checks whether the given parameter value represents file-like content.
   * @param param The parameter to check.
   * @returns {Boolean} <code>true</code> if <code>param</code> represents a file.
   */
			exports.prototype.isFileParam = function(param) {
				// fs.ReadStream in Node.js and Electron (but not in runtime like browserify)
				if (typeof require === "function") {
					var fs;
					try {
						fs = require("fs");
					} catch (err) {}
					if (fs && fs.ReadStream && param instanceof fs.ReadStream) {
						return true;
					}
				}
				// Buffer in Node.js
				if (typeof Buffer === "function" && param instanceof Buffer) {
					return true;
				}
				// Blob in browser
				if (typeof Blob === "function" && param instanceof Blob) {
					return true;
				}
				// File in browser (it seems File object is also instance of Blob, but keep this for safe)
				if (typeof File === "function" && param instanceof File) {
					return true;
				}
				return false;
			};

			/**
   * Normalizes parameter values:
   * <ul>
   * <li>remove nils</li>
   * <li>keep files and arrays</li>
   * <li>format to string with `paramToString` for other cases</li>
   * </ul>
   * @param {Object.<String, Object>} params The parameters as object properties.
   * @returns {Object.<String, Object>} normalized parameters.
   */
			exports.prototype.normalizeParams = function(params) {
				var newParams = {};
				for (var key in params) {
					if (params.hasOwnProperty(key) && params[key] != undefined && params[key] != null) {
						var value = params[key];
						if (this.isFileParam(value) || Array.isArray(value)) {
							newParams[key] = value;
						} else {
							newParams[key] = this.paramToString(value);
						}
					}
				}
				return newParams;
			};

			/**
   * Enumeration of collection format separator strategies.
   * @enum {String}
   * @readonly
   */
			exports.CollectionFormatEnum = {
				/**
     * Comma-separated values. Value: <code>csv</code>
     * @const
     */
				CSV: ",",
				/**
     * Space-separated values. Value: <code>ssv</code>
     * @const
     */
				SSV: " ",
				/**
     * Tab-separated values. Value: <code>tsv</code>
     * @const
     */
				TSV: "\t",
				/**
     * Pipe(|)-separated values. Value: <code>pipes</code>
     * @const
     */
				PIPES: "|",
				/**
     * Native array. Value: <code>multi</code>
     * @const
     */
				MULTI: "multi"
			};

			/**
   * Builds a string representation of an array-type actual parameter, according to the given collection format.
   * @param {Array} param An array parameter.
   * @param {module:ApiClient.CollectionFormatEnum} collectionFormat The array element separator strategy.
   * @returns {String|Array} A string representation of the supplied collection, using the specified delimiter. Returns
   * <code>param</code> as is if <code>collectionFormat</code> is <code>multi</code>.
   */
			exports.prototype.buildCollectionParam = function buildCollectionParam(param, collectionFormat) {
				if (param == null) {
					return null;
				}
				switch (collectionFormat) {
				case "csv":
					return param.map(this.paramToString).join(",");
				case "ssv":
					return param.map(this.paramToString).join(" ");
				case "tsv":
					return param.map(this.paramToString).join("\t");
				case "pipes":
					return param.map(this.paramToString).join("|");
				case "multi":
					// return the array directly as SuperAgent will handle it as expected
					return param.map(this.paramToString);
				default:
					throw new Error("Unknown collection format: " + collectionFormat);
				}
			};

			/**
   * Applies authentication headers to the request.
   * @param {Object} request The request object created by a <code>superagent()</code> call.
   * @param {Array.<String>} authNames An array of authentication method names.
   */
			exports.prototype.applyAuthToRequest = function(request, authNames) {
				var _this = this;
				authNames.forEach(function(authName) {
					var auth = _this.authentications[authName];
					switch (auth.type) {
					case "basic":
						if (auth.username || auth.password) {
							request.auth(auth.username || "", auth.password || "");
						}
						break;
					case "apiKey":
						if (auth.apiKey) {
							var data = {};
							if (auth.apiKeyPrefix) {
								data[auth.name] = auth.apiKeyPrefix + " " + auth.apiKey;
							} else {
								data[auth.name] = auth.apiKey;
							}
							if (auth["in"] === "header") {
								request.set(data);
							} else {
								request.query(data);
							}
						}
						break;
					case "oauth2":
						if (auth.accessToken) {
							request.set({"Authorization": "Bearer " + auth.accessToken});
						}
						break;
					default:
						throw new Error("Unknown authentication type: " + auth.type);
					}
				});
			};

			/**
   * Deserializes an HTTP response body into a value of the specified type.
   * @param {Object} response A SuperAgent response object.
   * @param {(String|Array.<String>|Object.<String, Object>|Function)} returnType The type to return. Pass a string for simple types
   * or the constructor function for a complex type. Pass an array containing the type name to return an array of that type. To
   * return an object, pass an object with one property whose name is the key type and whose value is the corresponding value type:
   * all properties on <code>data<code> will be converted to this type.
   * @returns A value of the specified type.
   */
			exports.prototype.deserialize = function deserialize(response, returnType) {
				if (response == null || returnType == null || response.status == 204) {
					return null;
				}
				// Rely on SuperAgent for parsing response body.
				// See http://visionmedia.github.io/superagent/#parsing-response-bodies
				var data = response.body;
				if (data == null || (typeof data === "object" && typeof data.length === "undefined" && !Object.keys(data).length)) {
					// SuperAgent does not always produce a body; use the unparsed response as a fallback
					data = response.text;
				}
				return exports.convertToType(data, returnType);
			};

			/**
   * Callback function to receive the result of the operation.
   * @callback module:ApiClient~callApiCallback
   * @param {String} error Error message, if any.
   * @param data The data returned by the service call.
   * @param {String} response The complete HTTP response.
   */

			/**
   * Invokes the REST service using the supplied settings and parameters.
   * @param {String} path The base URL to invoke.
   * @param {String} httpMethod The HTTP method to use.
   * @param {Object.<String, String>} pathParams A map of path parameters and their values.
   * @param {Object.<String, Object>} queryParams A map of query parameters and their values.
   * @param {Object.<String, Object>} collectionQueryParams A map of collection query parameters and their values.
   * @param {Object.<String, Object>} headerParams A map of header parameters and their values.
   * @param {Object.<String, Object>} formParams A map of form parameters and their values.
   * @param {Object} bodyParam The value to pass as the request body.
   * @param {Array.<String>} authNames An array of authentication type names.
   * @param {Array.<String>} contentTypes An array of request MIME types.
   * @param {Array.<String>} accepts An array of acceptable response MIME types.
   * @param {(String|Array|ObjectFunction)} returnType The required type to return; can be a string for simple types or the
   * constructor for a complex type.
   * @param {module:ApiClient~callApiCallback} callback The callback function.
   * @returns {Object} The SuperAgent request object.
   */
			exports.prototype.callApi = function callApi(path, httpMethod, pathParams,
				queryParams, collectionQueryParams, headerParams, formParams, bodyParam, authNames, contentTypes, accepts,
				returnType, callback) {

				var _this = this;
				var url = this.buildUrl(path, pathParams);
				var request = superagent(httpMethod, url);

				// apply authentications
				this.applyAuthToRequest(request, authNames);

				// set collection query parameters
				for (var key in collectionQueryParams) {
					if (collectionQueryParams.hasOwnProperty(key)) {
						var param = collectionQueryParams[key];
						if (param.collectionFormat === "csv") {
							// SuperAgent normally percent-encodes all reserved characters in a query parameter. However,
							// commas are used as delimiters for the 'csv' collectionFormat so they must not be encoded. We
							// must therefore construct and encode 'csv' collection query parameters manually.
							if (param.value != null) {
								var value = param.value.map(this.paramToString).map(encodeURIComponent).join(",");
								request.query(encodeURIComponent(key) + "=" + value);
							}
						} else {
							// All other collection query parameters should be treated as ordinary query parameters.
							queryParams[key] = this.buildCollectionParam(param.value, param.collectionFormat);
						}
					}
				}

				// set query parameters
				if (httpMethod.toUpperCase() === "GET" && this.cache === false) {
					queryParams["_"] = new Date().getTime();
				}
				request.query(this.normalizeParams(queryParams));

				// set header parameters
				request.set(this.defaultHeaders).set(this.normalizeParams(headerParams));


				// set requestAgent if it is set by user
				if (this.requestAgent) {
					request.agent(this.requestAgent);
				}

				// set request timeout
				request.timeout(this.timeout);

				var contentType = this.jsonPreferredMime(contentTypes);
				if (contentType) {
					// Issue with superagent and multipart/form-data (https://github.com/visionmedia/superagent/issues/746)
					if(contentType != "multipart/form-data") {
						request.type(contentType);
					}
				} else if (!request.header["Content-Type"]) {
					request.type("application/json");
				}

				if (contentType === "application/x-www-form-urlencoded") {
					request.send(querystring.stringify(this.normalizeParams(formParams)));
				} else if (contentType == "multipart/form-data") {
					var _formParams = this.normalizeParams(formParams);
					for (var key in _formParams) {
						if (_formParams.hasOwnProperty(key)) {
							if (this.isFileParam(_formParams[key])) {
								// file field
								request.attach(key, _formParams[key]);
							} else {
								request.field(key, _formParams[key]);
							}
						}
					}
				} else if (bodyParam) {
					request.send(bodyParam);
				}

				var accept = this.jsonPreferredMime(accepts);
				if (accept) {
					request.accept(accept);
				}

				if (returnType === "Blob") {
					request.responseType("blob");
				} else if (returnType === "String") {
					request.responseType("string");
				}

				// Attach previously saved cookies, if enabled
				if (this.enableCookies){
					if (typeof window === "undefined") {
						this.agent.attachCookies(request);
					}
					else {
						request.withCredentials();
					}
				}


				request.end(function(error, response) {
					if (callback) {
						var data = null;
						if (!error) {
							try {
								data = _this.deserialize(response, returnType);
								if (_this.enableCookies && typeof window === "undefined"){
									_this.agent.saveCookies(response);
								}
							} catch (err) {
								error = err;
							}
						}
						callback(error, data, response);
					}
				});

				return request;
			};

			/**
   * Parses an ISO-8601 string representation of a date value.
   * @param {String} str The date value as a string.
   * @returns {Date} The parsed date object.
   */
			exports.parseDate = function(str) {
				return new Date(str.replace(/T/i, " "));
			};

			/**
   * Converts a value to the specified type.
   * @param {(String|Object)} data The data to convert, as a string or object.
   * @param {(String|Array.<String>|Object.<String, Object>|Function)} type The type to return. Pass a string for simple types
   * or the constructor function for a complex type. Pass an array containing the type name to return an array of that type. To
   * return an object, pass an object with one property whose name is the key type and whose value is the corresponding value type:
   * all properties on <code>data<code> will be converted to this type.
   * @returns An instance of the specified type or null or undefined if data is null or undefined.
   */
			exports.convertToType = function(data, type) {
				if (data === null || data === undefined)
					return data;

				switch (type) {
				case "Boolean":
					return Boolean(data);
				case "Integer":
					return parseInt(data, 10);
				case "Number":
					return parseFloat(data);
				case "String":
					return String(data);
				case "Date":
					return this.parseDate(String(data));
				case "Blob":
      	return data;
				default:
					if (type === Object) {
						// generic object, return directly
						return data;
					} else if (typeof type === "function") {
						// for model type like: User
						return type.constructFromObject(data);
					} else if (Array.isArray(type)) {
						// for array type like: ['String']
						var itemType = type[0];
						return data.map(function(item) {
							return exports.convertToType(item, itemType);
						});
					} else if (typeof type === "object") {
						// for plain object type like: {'String': 'Integer'}
						var keyType, valueType;
						for (var k in type) {
							if (type.hasOwnProperty(k)) {
								keyType = k;
								valueType = type[k];
								break;
							}
						}
						var result = {};
						for (var k in data) {
							if (data.hasOwnProperty(k)) {
								var key = exports.convertToType(k, keyType);
								var value = exports.convertToType(data[k], valueType);
								result[key] = value;
							}
						}
						return result;
					} else {
						// for unknown type, return the data directly
						return data;
					}
				}
			};

			/**
   * Constructs a new map or array model from REST data.
   * @param data {Object|Array} The REST data.
   * @param obj {Object|Array} The target object or array.
   */
			exports.constructFromObject = function(data, obj, itemType) {
				if (Array.isArray(data)) {
					for (var i = 0; i < data.length; i++) {
						if (data.hasOwnProperty(i))
							obj[i] = exports.convertToType(data[i], itemType);
					}
				} else {
					for (var k in data) {
						if (data.hasOwnProperty(k))
							obj[k] = exports.convertToType(data[k], itemType);
					}
				}
			};

			/**
   * The default API client implementation.
   * @type {module:ApiClient}
   */
			exports.instance = new exports();

			return exports;
		}));

	}).call(this,require("buffer").Buffer);
},{"buffer":3,"fs":2,"querystring":7,"superagent":9}],17:[function(require,module,exports){
/**
 * Camunda REST API
 * Swagger OpenApi Spec for Camunda REST API.
 *
 * OpenAPI spec version: v7.8.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.3.1
 *
 * Do not edit the class manually.
 *
 */

	(function(root, factory) {
		if (typeof define === "function" && define.amd) {
			// AMD. Register as an anonymous module.
			define(["ApiClient", "model/AuthorizationCheckResultDto", "model/AuthorizationCreateDto", "model/AuthorizationDto", "model/CountResultDto", "model/ResourceOptionsDto"], factory);
		} else if (typeof module === "object" && module.exports) {
			// CommonJS-like environments that support module.exports, like Node.
			module.exports = factory(require("../ApiClient"), require("../model/AuthorizationCheckResultDto"), require("../model/AuthorizationCreateDto"), require("../model/AuthorizationDto"), require("../model/CountResultDto"), require("../model/ResourceOptionsDto"));
		} else {
			// Browser globals (root is window)
			if (!root.CamundaRestApi) {
				root.CamundaRestApi = {};
			}
			root.CamundaRestApi.AuthorizationApi = factory(root.CamundaRestApi.ApiClient, root.CamundaRestApi.AuthorizationCheckResultDto, root.CamundaRestApi.AuthorizationCreateDto, root.CamundaRestApi.AuthorizationDto, root.CamundaRestApi.CountResultDto, root.CamundaRestApi.ResourceOptionsDto);
		}
	}(this, function(ApiClient, AuthorizationCheckResultDto, AuthorizationCreateDto, AuthorizationDto, CountResultDto, ResourceOptionsDto) {
		"use strict";

		/**
   * Authorization service.
   * @module api/AuthorizationApi
   * @version v7.8.0
   */

		/**
   * Constructs a new AuthorizationApi.
   * @alias module:api/AuthorizationApi
   * @class
   * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
		var exports = function(apiClient) {
			this.apiClient = apiClient || ApiClient.instance;


			/**
     * Callback function to receive the result of the availableOperations operation.
     * @callback module:api/AuthorizationApi~availableOperationsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ResourceOptionsDto} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

			/**
     * The &#x60;/authorization&#x60; resource supports two custom OPTIONS requests, one for the resource as such and one for individual authorization instances.
     * The &#x60;/authorization&#x60; resource supports two custom OPTIONS requests, one for the resource as such and one for individual authorization instances. The OPTIONS request allows you to check for the set of available operations that the currently authenticated user can perform on the &#x60;/authorization&#x60; resource. Whether the user can perform an operation or not may depend on various factors, including the users authorizations to interact with this resource and the internal context of the process engine.
     * @param {module:api/AuthorizationApi~availableOperationsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ResourceOptionsDto}
     */
			this.availableOperations = function(callback) {
				var postBody = null;


				var pathParams = {
				};
				var queryParams = {
				};
				var collectionQueryParams = {
				};
				var headerParams = {
				};
				var formParams = {
				};

				var authNames = [];
				var contentTypes = [];
				var accepts = ["application/json"];
				var returnType = ResourceOptionsDto;

				return this.apiClient.callApi(
					"/authorization", "OPTIONS",
					pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
					authNames, contentTypes, accepts, returnType, callback
				);
			};

			/**
     * Callback function to receive the result of the availableOperations_0 operation.
     * @callback module:api/AuthorizationApi~availableOperations_0Callback
     * @param {String} error Error message, if any.
     * @param {module:model/ResourceOptionsDto} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

			/**
     * The &#x60;/authorization&#x60; resource supports two custom OPTIONS requests, one for the resource as such and one for individual authorization instances.
     * The &#x60;/authorization&#x60; resource supports two custom OPTIONS requests, one for the resource as such and one for individual authorization instances. The OPTIONS request allows you to check for the set of available operations that the currently authenticated user can perform on the &#x60;/authorization&#x60; resource. Whether the user can perform an operation or not may depend on various factors, including the users authorizations to interact with this resource and the internal context of the process engine.
     * @param {String} id Parameter id
     * @param {module:api/AuthorizationApi~availableOperations_0Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ResourceOptionsDto}
     */
			this.availableOperations_0 = function(id, callback) {
				var postBody = null;

				// verify the required parameter 'id' is set
				if (id === undefined || id === null) {
					throw new Error("Missing the required parameter 'id' when calling availableOperations_0");
				}


				var pathParams = {
					"id": id
				};
				var queryParams = {
				};
				var collectionQueryParams = {
				};
				var headerParams = {
				};
				var formParams = {
				};

				var authNames = [];
				var contentTypes = [];
				var accepts = ["application/json"];
				var returnType = ResourceOptionsDto;

				return this.apiClient.callApi(
					"/authorization/{id}", "OPTIONS",
					pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
					authNames, contentTypes, accepts, returnType, callback
				);
			};

			/**
     * Callback function to receive the result of the createAuthorization operation.
     * @callback module:api/AuthorizationApi~createAuthorizationCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AuthorizationDto} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

			/**
     * Creates a new authorization.
     * Creates a new authorization.
     * @param {Object} opts Optional parameters
     * @param {module:model/AuthorizationCreateDto} opts.body Parameter dto
     * @param {module:api/AuthorizationApi~createAuthorizationCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AuthorizationDto}
     */
			this.createAuthorization = function(opts, callback) {
				opts = opts || {};
				var postBody = opts["body"];


				var pathParams = {
				};
				var queryParams = {
				};
				var collectionQueryParams = {
				};
				var headerParams = {
				};
				var formParams = {
				};

				var authNames = [];
				var contentTypes = ["application/json"];
				var accepts = ["application/json"];
				var returnType = AuthorizationDto;

				return this.apiClient.callApi(
					"/authorization/create", "POST",
					pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
					authNames, contentTypes, accepts, returnType, callback
				);
			};

			/**
     * Callback function to receive the result of the deleteAuthorization operation.
     * @callback module:api/AuthorizationApi~deleteAuthorizationCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

			/**
     * Deletes an authorization by id.
     * Deletes an authorization by id.
     * @param {String} id Parameter id
     * @param {module:api/AuthorizationApi~deleteAuthorizationCallback} callback The callback function, accepting three arguments: error, data, response
     */
			this.deleteAuthorization = function(id, callback) {
				var postBody = null;

				// verify the required parameter 'id' is set
				if (id === undefined || id === null) {
					throw new Error("Missing the required parameter 'id' when calling deleteAuthorization");
				}


				var pathParams = {
					"id": id
				};
				var queryParams = {
				};
				var collectionQueryParams = {
				};
				var headerParams = {
				};
				var formParams = {
				};

				var authNames = [];
				var contentTypes = [];
				var accepts = ["application/json"];
				var returnType = null;

				return this.apiClient.callApi(
					"/authorization/{id}", "DELETE",
					pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
					authNames, contentTypes, accepts, returnType, callback
				);
			};

			/**
     * Callback function to receive the result of the getAuthorization operation.
     * @callback module:api/AuthorizationApi~getAuthorizationCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

			/**
     * Retrieves an authorization by id.
     * Retrieves an authorization by id.
     * @param {String} id Parameter id
     * @param {module:api/AuthorizationApi~getAuthorizationCallback} callback The callback function, accepting three arguments: error, data, response
     */
			this.getAuthorization = function(id, callback) {
				var postBody = null;

				// verify the required parameter 'id' is set
				if (id === undefined || id === null) {
					throw new Error("Missing the required parameter 'id' when calling getAuthorization");
				}


				var pathParams = {
					"id": id
				};
				var queryParams = {
				};
				var collectionQueryParams = {
				};
				var headerParams = {
				};
				var formParams = {
				};

				var authNames = [];
				var contentTypes = [];
				var accepts = ["application/json"];
				var returnType = null;

				return this.apiClient.callApi(
					"/authorization/{id}", "GET",
					pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
					authNames, contentTypes, accepts, returnType, callback
				);
			};

			/**
     * Callback function to receive the result of the getAuthorizationCount operation.
     * @callback module:api/AuthorizationApi~getAuthorizationCountCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CountResultDto} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

			/**
     * Queries for authorizations using a list of parameters and retrieves the count.
     * Queries for authorizations using a list of parameters and retrieves the count.
     * @param {Object} opts Optional parameters
     * @param {String} opts.resourceId Filter by resource Id.
     * @param {String} opts.userIdIn Filter by a comma-seperated list of userIds.
     * @param {String} opts.groupIdIn Filter by a comma-seperated list of groupIds.
     * @param {String} opts.id Filter by the id of the authorization.
     * @param {String} opts.type Filter by authorization type. (0&#x3D;global, 1&#x3D;grant, 2&#x3D;revoke). See the User Guide for more information about authorization types.
     * @param {String} opts.resourceType Filter by an integer representation of the resource type. See the User Guide for a list of integer representations of resource types.
     * @param {module:api/AuthorizationApi~getAuthorizationCountCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CountResultDto}
     */
			this.getAuthorizationCount = function(opts, callback) {
				opts = opts || {};
				var postBody = null;


				var pathParams = {
				};
				var queryParams = {
					"resourceId": opts["resourceId"],
					"userIdIn": opts["userIdIn"],
					"groupIdIn": opts["groupIdIn"],
					"id": opts["id"],
					"type": opts["type"],
					"resourceType": opts["resourceType"],
				};
				var collectionQueryParams = {
				};
				var headerParams = {
				};
				var formParams = {
				};

				var authNames = [];
				var contentTypes = [];
				var accepts = ["application/json"];
				var returnType = CountResultDto;

				return this.apiClient.callApi(
					"/authorization/count", "GET",
					pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
					authNames, contentTypes, accepts, returnType, callback
				);
			};

			/**
     * Callback function to receive the result of the isUserAuthorized operation.
     * @callback module:api/AuthorizationApi~isUserAuthorizedCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AuthorizationCheckResultDto} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

			/**
     * Performs an authorization check for the currently authenticated user.
     * Performs an authorization check for the currently authenticated user.
     * @param {Object} opts Optional parameters
     * @param {String} opts.permissionName Parameter permissionName
     * @param {String} opts.resourceName Parameter resourceName
     * @param {Number} opts.resourceType Parameter resourceType
     * @param {String} opts.resourceId Parameter resourceId
     * @param {module:api/AuthorizationApi~isUserAuthorizedCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AuthorizationCheckResultDto}
     */
			this.isUserAuthorized = function(opts, callback) {
				opts = opts || {};
				var postBody = null;


				var pathParams = {
				};
				var queryParams = {
					"permissionName": opts["permissionName"],
					"resourceName": opts["resourceName"],
					"resourceType": opts["resourceType"],
					"resourceId": opts["resourceId"],
				};
				var collectionQueryParams = {
				};
				var headerParams = {
				};
				var formParams = {
				};

				var authNames = [];
				var contentTypes = [];
				var accepts = ["application/json"];
				var returnType = AuthorizationCheckResultDto;

				return this.apiClient.callApi(
					"/authorization/check", "GET",
					pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
					authNames, contentTypes, accepts, returnType, callback
				);
			};

			/**
     * Callback function to receive the result of the queryAuthorizations operation.
     * @callback module:api/AuthorizationApi~queryAuthorizationsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<Object>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

			/**
     * Queries for a list of authorizations using a list of parameters.
     * Queries for a list of authorizations using a list of parameters. The size of the result set can be retrieved by using the Get Authorization Count method.
     * @param {Object} opts Optional parameters
     * @param {Number} opts.firstResult Parameter firstResult
     * @param {Number} opts.maxResults Parameter maxResults
     * @param {String} opts.resourceId Filter by resource id.
     * @param {String} opts.userIdIn Filter by a comma-separated list of userIds.
     * @param {String} opts.maxResults2 Pagination of results. Specifies the maximum number of results to return. Will return less results if there are no more results left.
     * @param {String} opts.sortOrder Sort the results in a given order. Values may be asc for ascending order or desc for descending order. Must be used in conjunction with the sortBy parameter.
     * @param {String} opts.groupIdIn Filter by a comma-separated list of groupIds.
     * @param {String} opts.firstResult2 Pagination of results. Specifies the index of the first result to return.
     * @param {String} opts.sortBy Sort the results lexicographically by a given criterion. Valid values are resourceType and resourceId. Must be used in conjunction with the sortOrder parameter.
     * @param {String} opts.id Filter by the id of the authorization.
     * @param {String} opts.type Filter by authorization type. (0&#x3D;global, 1&#x3D;grant, 2&#x3D;revoke). See the User Guide for more information about authorization types.
     * @param {String} opts.resourceType Filter by an integer representation of the resource type. See the User Guide for a list of integer representations of resource types.
     * @param {module:api/AuthorizationApi~queryAuthorizationsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<Object>}
     */
			this.queryAuthorizations = function(opts, callback) {
				opts = opts || {};
				var postBody = null;


				var pathParams = {
				};
				var queryParams = {
					"firstResult": opts["firstResult"],
					"maxResults": opts["maxResults"],
					"resourceId": opts["resourceId"],
					"userIdIn": opts["userIdIn"],
					"maxResults2": opts["maxResults2"],
					"sortOrder": opts["sortOrder"],
					"groupIdIn": opts["groupIdIn"],
					"firstResult2": opts["firstResult2"],
					"sortBy": opts["sortBy"],
					"id": opts["id"],
					"type": opts["type"],
					"resourceType": opts["resourceType"],
				};
				var collectionQueryParams = {
				};
				var headerParams = {
				};
				var formParams = {
				};

				var authNames = [];
				var contentTypes = [];
				var accepts = ["application/json"];
				var returnType = [Object];

				return this.apiClient.callApi(
					"/authorization", "GET",
					pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
					authNames, contentTypes, accepts, returnType, callback
				);
			};

			/**
     * Callback function to receive the result of the updateAuthorization operation.
     * @callback module:api/AuthorizationApi~updateAuthorizationCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

			/**
     * Updates an authorization by id.
     * Updates an authorization by id.
     * @param {String} id Parameter id
     * @param {Object} opts Optional parameters
     * @param {module:model/AuthorizationDto} opts.body Parameter Authorization
     * @param {module:api/AuthorizationApi~updateAuthorizationCallback} callback The callback function, accepting three arguments: error, data, response
     */
			this.updateAuthorization = function(id, opts, callback) {
				opts = opts || {};
				var postBody = opts["body"];

				// verify the required parameter 'id' is set
				if (id === undefined || id === null) {
					throw new Error("Missing the required parameter 'id' when calling updateAuthorization");
				}


				var pathParams = {
					"id": id
				};
				var queryParams = {
				};
				var collectionQueryParams = {
				};
				var headerParams = {
				};
				var formParams = {
				};

				var authNames = [];
				var contentTypes = ["application/json"];
				var accepts = ["application/json"];
				var returnType = null;

				return this.apiClient.callApi(
					"/authorization/{id}", "PUT",
					pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
					authNames, contentTypes, accepts, returnType, callback
				);
			};
		};

		return exports;
	}));

},{"../ApiClient":16,"../model/AuthorizationCheckResultDto":46,"../model/AuthorizationCreateDto":47,"../model/AuthorizationDto":48,"../model/CountResultDto":62,"../model/ResourceOptionsDto":116}],18:[function(require,module,exports){
/**
 * Camunda REST API
 * Swagger OpenApi Spec for Camunda REST API.
 *
 * OpenAPI spec version: v7.8.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.3.1
 *
 * Do not edit the class manually.
 *
 */

	(function(root, factory) {
		if (typeof define === "function" && define.amd) {
			// AMD. Register as an anonymous module.
			define(["ApiClient", "model/CountResultDto", "model/SuspensionStateDto"], factory);
		} else if (typeof module === "object" && module.exports) {
			// CommonJS-like environments that support module.exports, like Node.
			module.exports = factory(require("../ApiClient"), require("../model/CountResultDto"), require("../model/SuspensionStateDto"));
		} else {
			// Browser globals (root is window)
			if (!root.CamundaRestApi) {
				root.CamundaRestApi = {};
			}
			root.CamundaRestApi.BatchApi = factory(root.CamundaRestApi.ApiClient, root.CamundaRestApi.CountResultDto, root.CamundaRestApi.SuspensionStateDto);
		}
	}(this, function(ApiClient, CountResultDto, SuspensionStateDto) {
		"use strict";

		/**
   * Batch service.
   * @module api/BatchApi
   * @version v7.8.0
   */

		/**
   * Constructs a new BatchApi.
   * @alias module:api/BatchApi
   * @class
   * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
		var exports = function(apiClient) {
			this.apiClient = apiClient || ApiClient.instance;


			/**
     * Callback function to receive the result of the deleteBatch operation.
     * @callback module:api/BatchApi~deleteBatchCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

			/**
     * Deletes a batch by id, including all related jobs and job definitions.
     * Deletes a batch by id, including all related jobs and job definitions. Optionally also deletes the batch history.
     * @param {String} id Parameter batchId
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.cascade Parameter cascade
     * @param {module:api/BatchApi~deleteBatchCallback} callback The callback function, accepting three arguments: error, data, response
     */
			this.deleteBatch = function(id, opts, callback) {
				opts = opts || {};
				var postBody = null;

				// verify the required parameter 'id' is set
				if (id === undefined || id === null) {
					throw new Error("Missing the required parameter 'id' when calling deleteBatch");
				}


				var pathParams = {
					"id": id
				};
				var queryParams = {
					"cascade": opts["cascade"],
				};
				var collectionQueryParams = {
				};
				var headerParams = {
				};
				var formParams = {
				};

				var authNames = [];
				var contentTypes = [];
				var accepts = [];
				var returnType = null;

				return this.apiClient.callApi(
					"/batch/{id}", "DELETE",
					pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
					authNames, contentTypes, accepts, returnType, callback
				);
			};

			/**
     * Callback function to receive the result of the getBatch operation.
     * @callback module:api/BatchApi~getBatchCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

			/**
     * Retrieves a batch by id, according to the &#x60;Batch&#x60; interface in the engine.
     * Retrieves a batch by id, according to the &#x60;Batch&#x60; interface in the engine.
     * @param {String} id Parameter batchId
     * @param {module:api/BatchApi~getBatchCallback} callback The callback function, accepting three arguments: error, data, response
     */
			this.getBatch = function(id, callback) {
				var postBody = null;

				// verify the required parameter 'id' is set
				if (id === undefined || id === null) {
					throw new Error("Missing the required parameter 'id' when calling getBatch");
				}


				var pathParams = {
					"id": id
				};
				var queryParams = {
				};
				var collectionQueryParams = {
				};
				var headerParams = {
				};
				var formParams = {
				};

				var authNames = [];
				var contentTypes = [];
				var accepts = [];
				var returnType = null;

				return this.apiClient.callApi(
					"/batch/{id}", "GET",
					pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
					authNames, contentTypes, accepts, returnType, callback
				);
			};

			/**
     * Callback function to receive the result of the getBatches operation.
     * @callback module:api/BatchApi~getBatchesCallback
     * @param {String} error Error message, if any.
     * @param {Array.<Object>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

			/**
     * Queries for batches that fulfill given parameters.
     * Queries for batches that fulfill given parameters. Parameters may be the properties of batches, such as the id or type. The size of the result set can be retrieved by using the Get Batch Count method.
     * @param {Object} opts Optional parameters
     * @param {Number} opts.firstResult Parameter firstResult
     * @param {Number} opts.maxResults Parameter maxResults
     * @param {String} opts.tenantIdIn Filter by a comma-separated list of tenant ids. A batch matches if it has one of the given tenant ids.
     * @param {String} opts.maxResults2 Pagination of results. Specifies the maximum number of results to return. Will return less results if there are no more results left.
     * @param {String} opts.sortOrder Sort the results in a given order. Values may be asc for ascending order or desc for descending order. Must be used in conjunction with the sortBy parameter.
     * @param {String} opts.withoutTenantId Only include batches which belong to no tenant. Value can effectively only be true, as false is the default behavior.
     * @param {String} opts.firstResult2 Pagination of results. Specifies the index of the first result to return.
     * @param {String} opts.sortBy Sort the results lexicographically by a given criterion. Valid values are batchId and tenantId. Must be used in conjunction with the sortOrder parameter.
     * @param {String} opts.batchId Filter by batch id.
     * @param {String} opts.type Filter by batch type. See the User Guide for more information about batch types.
     * @param {String} opts.suspended A Boolean value which indicates whether only active or suspended batches should be included. When the value is set to true, only suspended batches will be returned and when the value is set to false, only active batches will be returned.
     * @param {module:api/BatchApi~getBatchesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<Object>}
     */
			this.getBatches = function(opts, callback) {
				opts = opts || {};
				var postBody = null;


				var pathParams = {
				};
				var queryParams = {
					"firstResult": opts["firstResult"],
					"maxResults": opts["maxResults"],
					"tenantIdIn": opts["tenantIdIn"],
					"maxResults2": opts["maxResults2"],
					"sortOrder": opts["sortOrder"],
					"withoutTenantId": opts["withoutTenantId"],
					"firstResult2": opts["firstResult2"],
					"sortBy": opts["sortBy"],
					"batchId": opts["batchId"],
					"type": opts["type"],
					"suspended": opts["suspended"],
				};
				var collectionQueryParams = {
				};
				var headerParams = {
				};
				var formParams = {
				};

				var authNames = [];
				var contentTypes = [];
				var accepts = ["application/json"];
				var returnType = [Object];

				return this.apiClient.callApi(
					"/batch", "GET",
					pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
					authNames, contentTypes, accepts, returnType, callback
				);
			};

			/**
     * Callback function to receive the result of the getBatchesCount operation.
     * @callback module:api/BatchApi~getBatchesCountCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CountResultDto} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

			/**
     * Requests the number of batches that fulfill the query criteria.
     * Requests the number of batches that fulfill the query criteria. Takes the same filtering parameters as the Get Batches method.
     * @param {Object} opts Optional parameters
     * @param {String} opts.tenantIdIn Filter by a comma-separated list of tenant ids. A batch matches if it has one of the given tenant ids.
     * @param {String} opts.withoutTenantId Only include batches which belong to no tenant. Value can effectively only be true, as false is the default behavior.
     * @param {String} opts.batchId Filter by batch id.
     * @param {String} opts.type Filter by batch type. See the User Guide for more information about batch types.
     * @param {String} opts.suspended A Boolean value which indicates whether only active or suspended batches should be included. When the value is set to true, only suspended batches will be returned and when the value is set to false, only active batches will be returned.
     * @param {module:api/BatchApi~getBatchesCountCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CountResultDto}
     */
			this.getBatchesCount = function(opts, callback) {
				opts = opts || {};
				var postBody = null;


				var pathParams = {
				};
				var queryParams = {
					"tenantIdIn": opts["tenantIdIn"],
					"withoutTenantId": opts["withoutTenantId"],
					"batchId": opts["batchId"],
					"type": opts["type"],
					"suspended": opts["suspended"],
				};
				var collectionQueryParams = {
				};
				var headerParams = {
				};
				var formParams = {
				};

				var authNames = [];
				var contentTypes = [];
				var accepts = ["application/json"];
				var returnType = CountResultDto;

				return this.apiClient.callApi(
					"/batch/count", "GET",
					pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
					authNames, contentTypes, accepts, returnType, callback
				);
			};

			/**
     * Callback function to receive the result of the getStatistics operation.
     * @callback module:api/BatchApi~getStatisticsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<Object>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

			/**
     * Queries for batch statistics that fulfill given parameters.
     * Queries for batch statistics that fulfill given parameters. Parameters may be the properties of batches, such as the id or type. The size of the result set can be retrieved by using the Get Batch Statistics Count method.
     * @param {Object} opts Optional parameters
     * @param {Number} opts.firstResult Parameter firstResult
     * @param {Number} opts.maxResults Parameter maxResults
     * @param {String} opts.tenantIdIn Filter by a comma-separated list of tenant ids. A batch matches if it has one of the given tenant ids.
     * @param {String} opts.maxResults2 Pagination of results. Specifies the maximum number of results to return. Will return less results if there are no more results left.
     * @param {String} opts.sortOrder Sort the results in a given order. Values may be asc for ascending order or desc for descending order. Must be used in conjunction with the sortBy parameter.
     * @param {String} opts.withoutTenantId Only include batches which belong to no tenant. Value can effectively only be true, as false is the default behavior.
     * @param {String} opts.firstResult2 Pagination of results. Specifies the index of the first result to return.
     * @param {String} opts.sortBy Sort the results lexicographically by a given criterion. Valid values are batchId and tenantId. Must be used in conjunction with the sortOrder parameter.
     * @param {String} opts.batchId Filter by batch id.
     * @param {String} opts.type Filter by batch type. See the User Guide for more information about batch types.
     * @param {String} opts.suspended A Boolean value which indicates whether only active or suspended batches should be included. When the value is set to true, only suspended batches will be returned and when the value is set to false, only active batches will be returned.
     * @param {module:api/BatchApi~getStatisticsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<Object>}
     */
			this.getStatistics = function(opts, callback) {
				opts = opts || {};
				var postBody = null;


				var pathParams = {
				};
				var queryParams = {
					"firstResult": opts["firstResult"],
					"maxResults": opts["maxResults"],
					"tenantIdIn": opts["tenantIdIn"],
					"maxResults2": opts["maxResults2"],
					"sortOrder": opts["sortOrder"],
					"withoutTenantId": opts["withoutTenantId"],
					"firstResult2": opts["firstResult2"],
					"sortBy": opts["sortBy"],
					"batchId": opts["batchId"],
					"type": opts["type"],
					"suspended": opts["suspended"],
				};
				var collectionQueryParams = {
				};
				var headerParams = {
				};
				var formParams = {
				};

				var authNames = [];
				var contentTypes = [];
				var accepts = ["application/json"];
				var returnType = [Object];

				return this.apiClient.callApi(
					"/batch/statistics", "GET",
					pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
					authNames, contentTypes, accepts, returnType, callback
				);
			};

			/**
     * Callback function to receive the result of the getStatisticsCount operation.
     * @callback module:api/BatchApi~getStatisticsCountCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CountResultDto} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

			/**
     * Requests the number of batch statistics that fulfill the query criteria.
     * Requests the number of batch statistics that fulfill the query criteria. Takes the same filtering parameters as the Get Batch Statistics method.
     * @param {Object} opts Optional parameters
     * @param {String} opts.tenantIdIn Filter by a comma-separated list of tenant ids. A batch matches if it has one of the given tenant ids.
     * @param {String} opts.withoutTenantId Only include batches which belong to no tenant. Value can effectively only be true, as false is the default behavior.
     * @param {String} opts.batchId Filter by batch id.
     * @param {String} opts.type Filter by batch type. See the User Guide for more information about batch types.
     * @param {String} opts.suspended A Boolean value which indicates whether only active or suspended batches should be included. When the value is set to true, only suspended batches will be returned and when the value is set to false, only active batches will be returned.
     * @param {module:api/BatchApi~getStatisticsCountCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CountResultDto}
     */
			this.getStatisticsCount = function(opts, callback) {
				opts = opts || {};
				var postBody = null;


				var pathParams = {
				};
				var queryParams = {
					"tenantIdIn": opts["tenantIdIn"],
					"withoutTenantId": opts["withoutTenantId"],
					"batchId": opts["batchId"],
					"type": opts["type"],
					"suspended": opts["suspended"],
				};
				var collectionQueryParams = {
				};
				var headerParams = {
				};
				var formParams = {
				};

				var authNames = [];
				var contentTypes = [];
				var accepts = ["application/json"];
				var returnType = CountResultDto;

				return this.apiClient.callApi(
					"/batch/statistics/count", "GET",
					pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
					authNames, contentTypes, accepts, returnType, callback
				);
			};

			/**
     * Callback function to receive the result of the updateSuspensionState operation.
     * @callback module:api/BatchApi~updateSuspensionStateCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

			/**
     * Activates or suspends a batch by id.
     * Activates or suspends a batch by id.
     * @param {String} id Parameter batchId
     * @param {Object} opts Optional parameters
     * @param {module:model/SuspensionStateDto} opts.body Parameter suspensionState
     * @param {module:api/BatchApi~updateSuspensionStateCallback} callback The callback function, accepting three arguments: error, data, response
     */
			this.updateSuspensionState = function(id, opts, callback) {
				opts = opts || {};
				var postBody = opts["body"];

				// verify the required parameter 'id' is set
				if (id === undefined || id === null) {
					throw new Error("Missing the required parameter 'id' when calling updateSuspensionState");
				}


				var pathParams = {
					"id": id
				};
				var queryParams = {
				};
				var collectionQueryParams = {
				};
				var headerParams = {
				};
				var formParams = {
				};

				var authNames = [];
				var contentTypes = ["application/json"];
				var accepts = [];
				var returnType = null;

				return this.apiClient.callApi(
					"/batch/{id}/suspended", "PUT",
					pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
					authNames, contentTypes, accepts, returnType, callback
				);
			};
		};

		return exports;
	}));

},{"../ApiClient":16,"../model/CountResultDto":62,"../model/SuspensionStateDto":126}],19:[function(require,module,exports){
/**
 * Camunda REST API
 * Swagger OpenApi Spec for Camunda REST API.
 *
 * OpenAPI spec version: v7.8.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.3.1
 *
 * Do not edit the class manually.
 *
 */

	(function(root, factory) {
		if (typeof define === "function" && define.amd) {
			// AMD. Register as an anonymous module.
			define(["ApiClient", "model/CaseDefinitionDiagramDto", "model/CaseInstanceDto", "model/CountResultDto", "model/CreateCaseInstanceDto", "model/HistoryTimeToLiveDto"], factory);
		} else if (typeof module === "object" && module.exports) {
			// CommonJS-like environments that support module.exports, like Node.
			module.exports = factory(require("../ApiClient"), require("../model/CaseDefinitionDiagramDto"), require("../model/CaseInstanceDto"), require("../model/CountResultDto"), require("../model/CreateCaseInstanceDto"), require("../model/HistoryTimeToLiveDto"));
		} else {
			// Browser globals (root is window)
			if (!root.CamundaRestApi) {
				root.CamundaRestApi = {};
			}
			root.CamundaRestApi.CaseDefinitionApi = factory(root.CamundaRestApi.ApiClient, root.CamundaRestApi.CaseDefinitionDiagramDto, root.CamundaRestApi.CaseInstanceDto, root.CamundaRestApi.CountResultDto, root.CamundaRestApi.CreateCaseInstanceDto, root.CamundaRestApi.HistoryTimeToLiveDto);
		}
	}(this, function(ApiClient, CaseDefinitionDiagramDto, CaseInstanceDto, CountResultDto, CreateCaseInstanceDto, HistoryTimeToLiveDto) {
		"use strict";

		/**
   * CaseDefinition service.
   * @module api/CaseDefinitionApi
   * @version v7.8.0
   */

		/**
   * Constructs a new CaseDefinitionApi.
   * @alias module:api/CaseDefinitionApi
   * @class
   * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
		var exports = function(apiClient) {
			this.apiClient = apiClient || ApiClient.instance;


			/**
     * Callback function to receive the result of the createCaseInstance operation.
     * @callback module:api/CaseDefinitionApi~createCaseInstanceCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CaseInstanceDto} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

			/**
     * Instantiates a given case definition.
     * Instantiates a given case definition. Case variables and business key may be supplied in the request body.
     * @param {String} key Parameter caseDefinitionKey
     * @param {Object} opts Optional parameters
     * @param {module:model/CreateCaseInstanceDto} opts.body Parameter parameters
     * @param {module:api/CaseDefinitionApi~createCaseInstanceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CaseInstanceDto}
     */
			this.createCaseInstance = function(key, opts, callback) {
				opts = opts || {};
				var postBody = opts["body"];

				// verify the required parameter 'key' is set
				if (key === undefined || key === null) {
					throw new Error("Missing the required parameter 'key' when calling createCaseInstance");
				}


				var pathParams = {
					"key": key
				};
				var queryParams = {
				};
				var collectionQueryParams = {
				};
				var headerParams = {
				};
				var formParams = {
				};

				var authNames = [];
				var contentTypes = ["application/json"];
				var accepts = ["application/json"];
				var returnType = CaseInstanceDto;

				return this.apiClient.callApi(
					"/case-definition/key/{key}/create", "POST",
					pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
					authNames, contentTypes, accepts, returnType, callback
				);
			};

			/**
     * Callback function to receive the result of the createCaseInstance_0 operation.
     * @callback module:api/CaseDefinitionApi~createCaseInstance_0Callback
     * @param {String} error Error message, if any.
     * @param {module:model/CaseInstanceDto} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

			/**
     * Instantiates a given case definition.
     * Instantiates a given case definition. Case variables and business key may be supplied in the request body.
     * @param {String} key Parameter caseDefinitionKey
     * @param {String} tenantId Parameter tenantId
     * @param {Object} opts Optional parameters
     * @param {module:model/CreateCaseInstanceDto} opts.body Parameter parameters
     * @param {module:api/CaseDefinitionApi~createCaseInstance_0Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CaseInstanceDto}
     */
			this.createCaseInstance_0 = function(key, tenantId, opts, callback) {
				opts = opts || {};
				var postBody = opts["body"];

				// verify the required parameter 'key' is set
				if (key === undefined || key === null) {
					throw new Error("Missing the required parameter 'key' when calling createCaseInstance_0");
				}

				// verify the required parameter 'tenantId' is set
				if (tenantId === undefined || tenantId === null) {
					throw new Error("Missing the required parameter 'tenantId' when calling createCaseInstance_0");
				}


				var pathParams = {
					"key": key,
					"tenantId": tenantId
				};
				var queryParams = {
				};
				var collectionQueryParams = {
				};
				var headerParams = {
				};
				var formParams = {
				};

				var authNames = [];
				var contentTypes = ["application/json"];
				var accepts = ["application/json"];
				var returnType = CaseInstanceDto;

				return this.apiClient.callApi(
					"/case-definition/key/{key}/tenant-id/{tenantId}/create", "POST",
					pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
					authNames, contentTypes, accepts, returnType, callback
				);
			};

			/**
     * Callback function to receive the result of the createCaseInstance_1 operation.
     * @callback module:api/CaseDefinitionApi~createCaseInstance_1Callback
     * @param {String} error Error message, if any.
     * @param {module:model/CaseInstanceDto} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

			/**
     * Instantiates a given case definition.
     * Instantiates a given case definition. Case variables and business key may be supplied in the request body.
     * @param {String} id Parameter caseDefinitionId
     * @param {Object} opts Optional parameters
     * @param {module:model/CreateCaseInstanceDto} opts.body Parameter parameters
     * @param {module:api/CaseDefinitionApi~createCaseInstance_1Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CaseInstanceDto}
     */
			this.createCaseInstance_1 = function(id, opts, callback) {
				opts = opts || {};
				var postBody = opts["body"];

				// verify the required parameter 'id' is set
				if (id === undefined || id === null) {
					throw new Error("Missing the required parameter 'id' when calling createCaseInstance_1");
				}


				var pathParams = {
					"id": id
				};
				var queryParams = {
				};
				var collectionQueryParams = {
				};
				var headerParams = {
				};
				var formParams = {
				};

				var authNames = [];
				var contentTypes = ["application/json"];
				var accepts = ["application/json"];
				var returnType = CaseInstanceDto;

				return this.apiClient.callApi(
					"/case-definition/{id}/create", "POST",
					pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
					authNames, contentTypes, accepts, returnType, callback
				);
			};

			/**
     * Callback function to receive the result of the getCaseDefinitionById operation.
     * @callback module:api/CaseDefinitionApi~getCaseDefinitionByIdCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

			/**
     * Retrieves a case definition according to the &#x60;CaseDefinition&#x60; interface in the engine.
     * Retrieves a case definition according to the &#x60;CaseDefinition&#x60; interface in the engine.
     * @param {String} id Parameter caseDefinitionId
     * @param {module:api/CaseDefinitionApi~getCaseDefinitionByIdCallback} callback The callback function, accepting three arguments: error, data, response
     */
			this.getCaseDefinitionById = function(id, callback) {
				var postBody = null;

				// verify the required parameter 'id' is set
				if (id === undefined || id === null) {
					throw new Error("Missing the required parameter 'id' when calling getCaseDefinitionById");
				}


				var pathParams = {
					"id": id
				};
				var queryParams = {
				};
				var collectionQueryParams = {
				};
				var headerParams = {
				};
				var formParams = {
				};

				var authNames = [];
				var contentTypes = [];
				var accepts = ["application/json"];
				var returnType = null;

				return this.apiClient.callApi(
					"/case-definition/{id}", "GET",
					pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
					authNames, contentTypes, accepts, returnType, callback
				);
			};

			/**
     * Callback function to receive the result of the getCaseDefinitionByKey operation.
     * @callback module:api/CaseDefinitionApi~getCaseDefinitionByKeyCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

			/**
     * Retrieves a case definition according to the &#x60;CaseDefinition&#x60; interface in the engine.
     * Retrieves a case definition according to the &#x60;CaseDefinition&#x60; interface in the engine.
     * @param {String} key Parameter caseDefinitionKey
     * @param {module:api/CaseDefinitionApi~getCaseDefinitionByKeyCallback} callback The callback function, accepting three arguments: error, data, response
     */
			this.getCaseDefinitionByKey = function(key, callback) {
				var postBody = null;

				// verify the required parameter 'key' is set
				if (key === undefined || key === null) {
					throw new Error("Missing the required parameter 'key' when calling getCaseDefinitionByKey");
				}


				var pathParams = {
					"key": key
				};
				var queryParams = {
				};
				var collectionQueryParams = {
				};
				var headerParams = {
				};
				var formParams = {
				};

				var authNames = [];
				var contentTypes = [];
				var accepts = ["application/json"];
				var returnType = null;

				return this.apiClient.callApi(
					"/case-definition/key/{key}", "GET",
					pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
					authNames, contentTypes, accepts, returnType, callback
				);
			};

			/**
     * Callback function to receive the result of the getCaseDefinitionByKeyAndTenantId operation.
     * @callback module:api/CaseDefinitionApi~getCaseDefinitionByKeyAndTenantIdCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

			/**
     * Retrieves a case definition according to the &#x60;CaseDefinition&#x60; interface in the engine.
     * Retrieves a case definition according to the &#x60;CaseDefinition&#x60; interface in the engine.
     * @param {String} key Parameter caseDefinitionKey
     * @param {String} tenantId Parameter tenantId
     * @param {module:api/CaseDefinitionApi~getCaseDefinitionByKeyAndTenantIdCallback} callback The callback function, accepting three arguments: error, data, response
     */
			this.getCaseDefinitionByKeyAndTenantId = function(key, tenantId, callback) {
				var postBody = null;

				// verify the required parameter 'key' is set
				if (key === undefined || key === null) {
					throw new Error("Missing the required parameter 'key' when calling getCaseDefinitionByKeyAndTenantId");
				}

				// verify the required parameter 'tenantId' is set
				if (tenantId === undefined || tenantId === null) {
					throw new Error("Missing the required parameter 'tenantId' when calling getCaseDefinitionByKeyAndTenantId");
				}


				var pathParams = {
					"key": key,
					"tenantId": tenantId
				};
				var queryParams = {
				};
				var collectionQueryParams = {
				};
				var headerParams = {
				};
				var formParams = {
				};

				var authNames = [];
				var contentTypes = [];
				var accepts = ["application/json"];
				var returnType = null;

				return this.apiClient.callApi(
					"/case-definition/key/{key}/tenant-id/{tenantId}", "GET",
					pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
					authNames, contentTypes, accepts, returnType, callback
				);
			};

			/**
     * Callback function to receive the result of the getCaseDefinitionCmmnXml operation.
     * @callback module:api/CaseDefinitionApi~getCaseDefinitionCmmnXmlCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CaseDefinitionDiagramDto} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

			/**
     * Retrieves the CMMN XML of a case definition.
     * Retrieves the CMMN XML of a case definition.
     * @param {String} key Parameter caseDefinitionKey
     * @param {String} tenantId Parameter tenantId
     * @param {module:api/CaseDefinitionApi~getCaseDefinitionCmmnXmlCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CaseDefinitionDiagramDto}
     */
			this.getCaseDefinitionCmmnXml = function(key, tenantId, callback) {
				var postBody = null;

				// verify the required parameter 'key' is set
				if (key === undefined || key === null) {
					throw new Error("Missing the required parameter 'key' when calling getCaseDefinitionCmmnXml");
				}

				// verify the required parameter 'tenantId' is set
				if (tenantId === undefined || tenantId === null) {
					throw new Error("Missing the required parameter 'tenantId' when calling getCaseDefinitionCmmnXml");
				}


				var pathParams = {
					"key": key,
					"tenantId": tenantId
				};
				var queryParams = {
				};
				var collectionQueryParams = {
				};
				var headerParams = {
				};
				var formParams = {
				};

				var authNames = [];
				var contentTypes = [];
				var accepts = ["application/json"];
				var returnType = CaseDefinitionDiagramDto;

				return this.apiClient.callApi(
					"/case-definition/key/{key}/tenant-id/{tenantId}/xml", "GET",
					pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
					authNames, contentTypes, accepts, returnType, callback
				);
			};

			/**
     * Callback function to receive the result of the getCaseDefinitionCmmnXml_0 operation.
     * @callback module:api/CaseDefinitionApi~getCaseDefinitionCmmnXml_0Callback
     * @param {String} error Error message, if any.
     * @param {module:model/CaseDefinitionDiagramDto} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

			/**
     * Retrieves the CMMN XML of a case definition.
     * Retrieves the CMMN XML of a case definition.
     * @param {String} key Parameter caseDefinitionKey
     * @param {module:api/CaseDefinitionApi~getCaseDefinitionCmmnXml_0Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CaseDefinitionDiagramDto}
     */
			this.getCaseDefinitionCmmnXml_0 = function(key, callback) {
				var postBody = null;

				// verify the required parameter 'key' is set
				if (key === undefined || key === null) {
					throw new Error("Missing the required parameter 'key' when calling getCaseDefinitionCmmnXml_0");
				}


				var pathParams = {
					"key": key
				};
				var queryParams = {
				};
				var collectionQueryParams = {
				};
				var headerParams = {
				};
				var formParams = {
				};

				var authNames = [];
				var contentTypes = [];
				var accepts = ["application/json"];
				var returnType = CaseDefinitionDiagramDto;

				return this.apiClient.callApi(
					"/case-definition/key/{key}/xml", "GET",
					pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
					authNames, contentTypes, accepts, returnType, callback
				);
			};

			/**
     * Callback function to receive the result of the getCaseDefinitionCmmnXml_1 operation.
     * @callback module:api/CaseDefinitionApi~getCaseDefinitionCmmnXml_1Callback
     * @param {String} error Error message, if any.
     * @param {module:model/CaseDefinitionDiagramDto} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

			/**
     * Retrieves the CMMN XML of a case definition.
     * Retrieves the CMMN XML of a case definition.
     * @param {String} id Parameter caseDefinitionId
     * @param {module:api/CaseDefinitionApi~getCaseDefinitionCmmnXml_1Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CaseDefinitionDiagramDto}
     */
			this.getCaseDefinitionCmmnXml_1 = function(id, callback) {
				var postBody = null;

				// verify the required parameter 'id' is set
				if (id === undefined || id === null) {
					throw new Error("Missing the required parameter 'id' when calling getCaseDefinitionCmmnXml_1");
				}


				var pathParams = {
					"id": id
				};
				var queryParams = {
				};
				var collectionQueryParams = {
				};
				var headerParams = {
				};
				var formParams = {
				};

				var authNames = [];
				var contentTypes = [];
				var accepts = ["application/json"];
				var returnType = CaseDefinitionDiagramDto;

				return this.apiClient.callApi(
					"/case-definition/{id}/xml", "GET",
					pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
					authNames, contentTypes, accepts, returnType, callback
				);
			};

			/**
     * Callback function to receive the result of the getCaseDefinitionDiagram operation.
     * @callback module:api/CaseDefinitionApi~getCaseDefinitionDiagramCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

			/**
     * Retrieves the diagram of a case definition.
     * Retrieves the diagram of a case definition.
     * @param {String} key Parameter caseDefinitionKey
     * @param {module:api/CaseDefinitionApi~getCaseDefinitionDiagramCallback} callback The callback function, accepting three arguments: error, data, response
     */
			this.getCaseDefinitionDiagram = function(key, callback) {
				var postBody = null;

				// verify the required parameter 'key' is set
				if (key === undefined || key === null) {
					throw new Error("Missing the required parameter 'key' when calling getCaseDefinitionDiagram");
				}


				var pathParams = {
					"key": key
				};
				var queryParams = {
				};
				var collectionQueryParams = {
				};
				var headerParams = {
				};
				var formParams = {
				};

				var authNames = [];
				var contentTypes = [];
				var accepts = ["application/json"];
				var returnType = null;

				return this.apiClient.callApi(
					"/case-definition/key/{key}/diagram", "GET",
					pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
					authNames, contentTypes, accepts, returnType, callback
				);
			};

			/**
     * Callback function to receive the result of the getCaseDefinitionDiagram_0 operation.
     * @callback module:api/CaseDefinitionApi~getCaseDefinitionDiagram_0Callback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

			/**
     * Retrieves the diagram of a case definition.
     * Retrieves the diagram of a case definition.
     * @param {String} key Parameter caseDefinitionKey
     * @param {String} tenantId Parameter tenantId
     * @param {module:api/CaseDefinitionApi~getCaseDefinitionDiagram_0Callback} callback The callback function, accepting three arguments: error, data, response
     */
			this.getCaseDefinitionDiagram_0 = function(key, tenantId, callback) {
				var postBody = null;

				// verify the required parameter 'key' is set
				if (key === undefined || key === null) {
					throw new Error("Missing the required parameter 'key' when calling getCaseDefinitionDiagram_0");
				}

				// verify the required parameter 'tenantId' is set
				if (tenantId === undefined || tenantId === null) {
					throw new Error("Missing the required parameter 'tenantId' when calling getCaseDefinitionDiagram_0");
				}


				var pathParams = {
					"key": key,
					"tenantId": tenantId
				};
				var queryParams = {
				};
				var collectionQueryParams = {
				};
				var headerParams = {
				};
				var formParams = {
				};

				var authNames = [];
				var contentTypes = [];
				var accepts = ["application/json"];
				var returnType = null;

				return this.apiClient.callApi(
					"/case-definition/key/{key}/tenant-id/{tenantId}/diagram", "GET",
					pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
					authNames, contentTypes, accepts, returnType, callback
				);
			};

			/**
     * Callback function to receive the result of the getCaseDefinitionDiagram_1 operation.
     * @callback module:api/CaseDefinitionApi~getCaseDefinitionDiagram_1Callback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

			/**
     * Retrieves the diagram of a case definition.
     * Retrieves the diagram of a case definition.
     * @param {String} id Parameter caseDefinitionId
     * @param {module:api/CaseDefinitionApi~getCaseDefinitionDiagram_1Callback} callback The callback function, accepting three arguments: error, data, response
     */
			this.getCaseDefinitionDiagram_1 = function(id, callback) {
				var postBody = null;

				// verify the required parameter 'id' is set
				if (id === undefined || id === null) {
					throw new Error("Missing the required parameter 'id' when calling getCaseDefinitionDiagram_1");
				}


				var pathParams = {
					"id": id
				};
				var queryParams = {
				};
				var collectionQueryParams = {
				};
				var headerParams = {
				};
				var formParams = {
				};

				var authNames = [];
				var contentTypes = [];
				var accepts = ["application/json"];
				var returnType = null;

				return this.apiClient.callApi(
					"/case-definition/{id}/diagram", "GET",
					pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
					authNames, contentTypes, accepts, returnType, callback
				);
			};

			/**
     * Callback function to receive the result of the getCaseDefinitions operation.
     * @callback module:api/CaseDefinitionApi~getCaseDefinitionsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<Object>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

			/**
     * Queries for case definitions that fulfill given parameters.
     * Queries for case definitions that fulfill given parameters. Parameters may be the properties of case definitions, such as the name, key or version. The size of the result set can be retrieved by using the Get Case Definition Count method.
     * @param {Object} opts Optional parameters
     * @param {Number} opts.firstResult Parameter firstResult
     * @param {Number} opts.maxResults Parameter maxResults
     * @param {String} opts.resourceNameLike Filter by names of those case definition resources that the parameter is a substring of.
     * @param {String} opts.caseDefinitionIdIn Filter by case definition ids.
     * @param {String} opts.caseDefinitionId Filter by case definition id.
     * @param {String} opts.firstResult2 Pagination of results. Specifies the index of the first result to return.
     * @param {String} opts.resourceName Filter by the name of the case definition resource. Exact match.
     * @param {String} opts.includeCaseDefinitionsWithoutTenantId Include case definitions which belong to no tenant. Can be used in combination with tenantIdIn. Value may only be true, as false is the default behavior.
     * @param {String} opts.version Filter by case definition version.
     * @param {String} opts.categoryLike Filter by case definition categories that the parameter is a substring of.
     * @param {String} opts.nameLike Filter by case definition names that the parameter is a substring of.
     * @param {String} opts.latestVersion Only include those case definitions that are latest versions. Value may only be true, as false is the default behavior.
     * @param {String} opts.tenantIdIn Filter by a comma-separated list of tenant ids. A case definition must have one of the given tenant ids.
     * @param {String} opts.maxResults2 Pagination of results. Specifies the maximum number of results to return. Will return less results if there are no more results left.
     * @param {String} opts.deploymentId Filter by the deployment the id belongs to.
     * @param {String} opts.keyLike Filter by case definition keys that the parameter is a substring of.
     * @param {String} opts.sortOrder Sort the results in a given order. Values may be asc for ascending order or desc for descending order. Must be used in conjunction with the sortBy parameter.
     * @param {String} opts.name Filter by case definition name.
     * @param {String} opts.withoutTenantId Only include case definitions which belong to no tenant. Value may only be true, as false is the default behavior.
     * @param {String} opts.sortBy Sort the results lexicographically by a given criterion. Valid values are category, key, id, name, version, deploymentId and tenantId. Must be used in conjunction with the sortOrder parameter.
     * @param {String} opts.category Filter by case definition category. Exact match.
     * @param {String} opts.key Filter by case definition key, i.e., the id in the CMMN XML. Exact match.
     * @param {module:api/CaseDefinitionApi~getCaseDefinitionsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<Object>}
     */
			this.getCaseDefinitions = function(opts, callback) {
				opts = opts || {};
				var postBody = null;


				var pathParams = {
				};
				var queryParams = {
					"firstResult": opts["firstResult"],
					"maxResults": opts["maxResults"],
					"resourceNameLike": opts["resourceNameLike"],
					"caseDefinitionIdIn": opts["caseDefinitionIdIn"],
					"caseDefinitionId": opts["caseDefinitionId"],
					"firstResult2": opts["firstResult2"],
					"resourceName": opts["resourceName"],
					"includeCaseDefinitionsWithoutTenantId": opts["includeCaseDefinitionsWithoutTenantId"],
					"version": opts["version"],
					"categoryLike": opts["categoryLike"],
					"nameLike": opts["nameLike"],
					"latestVersion": opts["latestVersion"],
					"tenantIdIn": opts["tenantIdIn"],
					"maxResults2": opts["maxResults2"],
					"deploymentId": opts["deploymentId"],
					"keyLike": opts["keyLike"],
					"sortOrder": opts["sortOrder"],
					"name": opts["name"],
					"withoutTenantId": opts["withoutTenantId"],
					"sortBy": opts["sortBy"],
					"category": opts["category"],
					"key": opts["key"],
				};
				var collectionQueryParams = {
				};
				var headerParams = {
				};
				var formParams = {
				};

				var authNames = [];
				var contentTypes = [];
				var accepts = ["application/json"];
				var returnType = [Object];

				return this.apiClient.callApi(
					"/case-definition", "GET",
					pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
					authNames, contentTypes, accepts, returnType, callback
				);
			};

			/**
     * Callback function to receive the result of the getCaseDefinitionsCount operation.
     * @callback module:api/CaseDefinitionApi~getCaseDefinitionsCountCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CountResultDto} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

			/**
     * Requests the number of case definitions that fulfill the query criteria.
     * Requests the number of case definitions that fulfill the query criteria. Takes the same filtering parameters as the Get Case Definitions method.
     * @param {Object} opts Optional parameters
     * @param {String} opts.resourceNameLike Filter by names of those case definition resources that the parameter is a substring of.
     * @param {String} opts.caseDefinitionIdIn Filter by case definition ids.
     * @param {String} opts.caseDefinitionId Filter by case definition id.
     * @param {String} opts.resourceName Filter by the name of the case definition resource. Exact match.
     * @param {String} opts.includeCaseDefinitionsWithoutTenantId Include case definitions which belong to no tenant. Can be used in combination with tenantIdIn. Value may only be true, as false is the default behavior.
     * @param {String} opts.version Filter by case definition version.
     * @param {String} opts.categoryLike Filter by case definition categories that the parameter is a substring of.
     * @param {String} opts.nameLike Filter by case definition names that the parameter is a substring of.
     * @param {String} opts.latestVersion Only include those case definitions that are latest versions. Value may only be true, as false is the default behavior.
     * @param {String} opts.tenantIdIn Filter by a comma-separated list of tenant ids. A case definition must have one of the given tenant ids.
     * @param {String} opts.deploymentId Filter by the deployment the id belongs to.
     * @param {String} opts.keyLike Filter by case definition keys that the parameter is a substring of.
     * @param {String} opts.name Filter by case definition name.
     * @param {String} opts.withoutTenantId Only include case definitions which belong to no tenant. Value may only be true, as false is the default behavior.
     * @param {String} opts.category Filter by case definition category. Exact match.
     * @param {String} opts.key Filter by case definition key, i.e., the id in the CMMN XML. Exact match.
     * @param {module:api/CaseDefinitionApi~getCaseDefinitionsCountCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CountResultDto}
     */
			this.getCaseDefinitionsCount = function(opts, callback) {
				opts = opts || {};
				var postBody = null;


				var pathParams = {
				};
				var queryParams = {
					"resourceNameLike": opts["resourceNameLike"],
					"caseDefinitionIdIn": opts["caseDefinitionIdIn"],
					"caseDefinitionId": opts["caseDefinitionId"],
					"resourceName": opts["resourceName"],
					"includeCaseDefinitionsWithoutTenantId": opts["includeCaseDefinitionsWithoutTenantId"],
					"version": opts["version"],
					"categoryLike": opts["categoryLike"],
					"nameLike": opts["nameLike"],
					"latestVersion": opts["latestVersion"],
					"tenantIdIn": opts["tenantIdIn"],
					"deploymentId": opts["deploymentId"],
					"keyLike": opts["keyLike"],
					"name": opts["name"],
					"withoutTenantId": opts["withoutTenantId"],
					"category": opts["category"],
					"key": opts["key"],
				};
				var collectionQueryParams = {
				};
				var headerParams = {
				};
				var formParams = {
				};

				var authNames = [];
				var contentTypes = [];
				var accepts = ["application/json"];
				var returnType = CountResultDto;

				return this.apiClient.callApi(
					"/case-definition/count", "GET",
					pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
					authNames, contentTypes, accepts, returnType, callback
				);
			};

			/**
     * Callback function to receive the result of the updateHistoryTimeToLive operation.
     * @callback module:api/CaseDefinitionApi~updateHistoryTimeToLiveCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

			/**
     * Updates history time to live for case definition with given id.
     * Updates history time to live for case definition with given id. The field is used within History cleanup.
     * @param {String} key Parameter caseDefinitionKey
     * @param {Object} opts Optional parameters
     * @param {module:model/HistoryTimeToLiveDto} opts.body Parameter historyTimeToLiveDto
     * @param {module:api/CaseDefinitionApi~updateHistoryTimeToLiveCallback} callback The callback function, accepting three arguments: error, data, response
     */
			this.updateHistoryTimeToLive = function(key, opts, callback) {
				opts = opts || {};
				var postBody = opts["body"];

				// verify the required parameter 'key' is set
				if (key === undefined || key === null) {
					throw new Error("Missing the required parameter 'key' when calling updateHistoryTimeToLive");
				}


				var pathParams = {
					"key": key
				};
				var queryParams = {
				};
				var collectionQueryParams = {
				};
				var headerParams = {
				};
				var formParams = {
				};

				var authNames = [];
				var contentTypes = ["application/json"];
				var accepts = ["application/json"];
				var returnType = null;

				return this.apiClient.callApi(
					"/case-definition/key/{key}/history-time-to-live", "PUT",
					pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
					authNames, contentTypes, accepts, returnType, callback
				);
			};

			/**
     * Callback function to receive the result of the updateHistoryTimeToLive_0 operation.
     * @callback module:api/CaseDefinitionApi~updateHistoryTimeToLive_0Callback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

			/**
     * Updates history time to live for case definition with given id.
     * Updates history time to live for case definition with given id. The field is used within History cleanup.
     * @param {String} key Parameter caseDefinitionKey
     * @param {String} tenantId Parameter tenantId
     * @param {Object} opts Optional parameters
     * @param {module:model/HistoryTimeToLiveDto} opts.body Parameter historyTimeToLiveDto
     * @param {module:api/CaseDefinitionApi~updateHistoryTimeToLive_0Callback} callback The callback function, accepting three arguments: error, data, response
     */
			this.updateHistoryTimeToLive_0 = function(key, tenantId, opts, callback) {
				opts = opts || {};
				var postBody = opts["body"];

				// verify the required parameter 'key' is set
				if (key === undefined || key === null) {
					throw new Error("Missing the required parameter 'key' when calling updateHistoryTimeToLive_0");
				}

				// verify the required parameter 'tenantId' is set
				if (tenantId === undefined || tenantId === null) {
					throw new Error("Missing the required parameter 'tenantId' when calling updateHistoryTimeToLive_0");
				}


				var pathParams = {
					"key": key,
					"tenantId": tenantId
				};
				var queryParams = {
				};
				var collectionQueryParams = {
				};
				var headerParams = {
				};
				var formParams = {
				};

				var authNames = [];
				var contentTypes = ["application/json"];
				var accepts = ["application/json"];
				var returnType = null;

				return this.apiClient.callApi(
					"/case-definition/key/{key}/tenant-id/{tenantId}/history-time-to-live", "PUT",
					pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
					authNames, contentTypes, accepts, returnType, callback
				);
			};

			/**
     * Callback function to receive the result of the updateHistoryTimeToLive_1 operation.
     * @callback module:api/CaseDefinitionApi~updateHistoryTimeToLive_1Callback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

			/**
     * Updates history time to live for case definition with given id.
     * Updates history time to live for case definition with given id. The field is used within History cleanup.
     * @param {String} id Parameter caseDefinitionId
     * @param {Object} opts Optional parameters
     * @param {module:model/HistoryTimeToLiveDto} opts.body Parameter historyTimeToLiveDto
     * @param {module:api/CaseDefinitionApi~updateHistoryTimeToLive_1Callback} callback The callback function, accepting three arguments: error, data, response
     */
			this.updateHistoryTimeToLive_1 = function(id, opts, callback) {
				opts = opts || {};
				var postBody = opts["body"];

				// verify the required parameter 'id' is set
				if (id === undefined || id === null) {
					throw new Error("Missing the required parameter 'id' when calling updateHistoryTimeToLive_1");
				}


				var pathParams = {
					"id": id
				};
				var queryParams = {
				};
				var collectionQueryParams = {
				};
				var headerParams = {
				};
				var formParams = {
				};

				var authNames = [];
				var contentTypes = ["application/json"];
				var accepts = ["application/json"];
				var returnType = null;

				return this.apiClient.callApi(
					"/case-definition/{id}/history-time-to-live", "PUT",
					pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
					authNames, contentTypes, accepts, returnType, callback
				);
			};
		};

		return exports;
	}));

},{"../ApiClient":16,"../model/CaseDefinitionDiagramDto":52,"../model/CaseInstanceDto":57,"../model/CountResultDto":62,"../model/CreateCaseInstanceDto":63,"../model/HistoryTimeToLiveDto":85}],20:[function(require,module,exports){
/**
 * Camunda REST API
 * Swagger OpenApi Spec for Camunda REST API.
 *
 * OpenAPI spec version: v7.8.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.3.1
 *
 * Do not edit the class manually.
 *
 */

	(function(root, factory) {
		if (typeof define === "function" && define.amd) {
			// AMD. Register as an anonymous module.
			define(["ApiClient", "model/CaseExecutionQueryDto", "model/CaseExecutionTriggerDto", "model/CountResultDto", "model/MultipartFormData", "model/PatchVariablesDto", "model/VariableValueDto"], factory);
		} else if (typeof module === "object" && module.exports) {
			// CommonJS-like environments that support module.exports, like Node.
			module.exports = factory(require("../ApiClient"), require("../model/CaseExecutionQueryDto"), require("../model/CaseExecutionTriggerDto"), require("../model/CountResultDto"), require("../model/MultipartFormData"), require("../model/PatchVariablesDto"), require("../model/VariableValueDto"));
		} else {
			// Browser globals (root is window)
			if (!root.CamundaRestApi) {
				root.CamundaRestApi = {};
			}
			root.CamundaRestApi.CaseExecutionApi = factory(root.CamundaRestApi.ApiClient, root.CamundaRestApi.CaseExecutionQueryDto, root.CamundaRestApi.CaseExecutionTriggerDto, root.CamundaRestApi.CountResultDto, root.CamundaRestApi.MultipartFormData, root.CamundaRestApi.PatchVariablesDto, root.CamundaRestApi.VariableValueDto);
		}
	}(this, function(ApiClient, CaseExecutionQueryDto, CaseExecutionTriggerDto, CountResultDto, MultipartFormData, PatchVariablesDto, VariableValueDto) {
		"use strict";

		/**
   * CaseExecution service.
   * @module api/CaseExecutionApi
   * @version v7.8.0
   */

		/**
   * Constructs a new CaseExecutionApi.
   * @alias module:api/CaseExecutionApi
   * @class
   * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
		var exports = function(apiClient) {
			this.apiClient = apiClient || ApiClient.instance;


			/**
     * Callback function to receive the result of the complete operation.
     * @callback module:api/CaseExecutionApi~completeCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

			/**
     * title: \&quot;Complete Case Execution\&quot; weight: 70.
     * title: \&quot;Complete Case Execution\&quot; weight: 70
     * @param {String} id Parameter caseExecutionId
     * @param {Object} opts Optional parameters
     * @param {module:model/CaseExecutionTriggerDto} opts.body Parameter triggerDto
     * @param {module:api/CaseExecutionApi~completeCallback} callback The callback function, accepting three arguments: error, data, response
     */
			this.complete = function(id, opts, callback) {
				opts = opts || {};
				var postBody = opts["body"];

				// verify the required parameter 'id' is set
				if (id === undefined || id === null) {
					throw new Error("Missing the required parameter 'id' when calling complete");
				}


				var pathParams = {
					"id": id
				};
				var queryParams = {
				};
				var collectionQueryParams = {
				};
				var headerParams = {
				};
				var formParams = {
				};

				var authNames = [];
				var contentTypes = ["application/json"];
				var accepts = ["application/json"];
				var returnType = null;

				return this.apiClient.callApi(
					"/case-execution/{id}/complete", "POST",
					pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
					authNames, contentTypes, accepts, returnType, callback
				);
			};

			/**
     * Callback function to receive the result of the deleteVariable operation.
     * @callback module:api/CaseExecutionApi~deleteVariableCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

			/**
     * Deletes a variable of a given case instance by id.
     * Deletes a variable of a given case instance by id.
     * @param {String} varId Parameter variableName
     * @param {String} id Parameter caseExecutionId
     * @param {module:api/CaseExecutionApi~deleteVariableCallback} callback The callback function, accepting three arguments: error, data, response
     */
			this.deleteVariable = function(varId, id, callback) {
				var postBody = null;

				// verify the required parameter 'varId' is set
				if (varId === undefined || varId === null) {
					throw new Error("Missing the required parameter 'varId' when calling deleteVariable");
				}

				// verify the required parameter 'id' is set
				if (id === undefined || id === null) {
					throw new Error("Missing the required parameter 'id' when calling deleteVariable");
				}


				var pathParams = {
					"varId": varId,
					"id": id
				};
				var queryParams = {
				};
				var collectionQueryParams = {
				};
				var headerParams = {
				};
				var formParams = {
				};

				var authNames = [];
				var contentTypes = [];
				var accepts = ["application/json"];
				var returnType = null;

				return this.apiClient.callApi(
					"/case-execution/{id}/localVariables/{varId}", "DELETE",
					pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
					authNames, contentTypes, accepts, returnType, callback
				);
			};

			/**
     * Callback function to receive the result of the deleteVariable_0 operation.
     * @callback module:api/CaseExecutionApi~deleteVariable_0Callback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

			/**
     * Deletes a variable of a given case instance by id.
     * Deletes a variable of a given case instance by id.
     * @param {String} varId Parameter variableName
     * @param {String} id Parameter caseExecutionId
     * @param {module:api/CaseExecutionApi~deleteVariable_0Callback} callback The callback function, accepting three arguments: error, data, response
     */
			this.deleteVariable_0 = function(varId, id, callback) {
				var postBody = null;

				// verify the required parameter 'varId' is set
				if (varId === undefined || varId === null) {
					throw new Error("Missing the required parameter 'varId' when calling deleteVariable_0");
				}

				// verify the required parameter 'id' is set
				if (id === undefined || id === null) {
					throw new Error("Missing the required parameter 'id' when calling deleteVariable_0");
				}


				var pathParams = {
					"varId": varId,
					"id": id
				};
				var queryParams = {
				};
				var collectionQueryParams = {
				};
				var headerParams = {
				};
				var formParams = {
				};

				var authNames = [];
				var contentTypes = [];
				var accepts = ["application/json"];
				var returnType = null;

				return this.apiClient.callApi(
					"/case-execution/{id}/variables/{varId}", "DELETE",
					pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
					authNames, contentTypes, accepts, returnType, callback
				);
			};

			/**
     * Callback function to receive the result of the disable operation.
     * @callback module:api/CaseExecutionApi~disableCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

			/**
     * Performs a transition from ENABLED state to DISABLED state.
     * Performs a transition from ENABLED state to DISABLED state. In relation to the state transition, it is possible to update or delete case instance variables (please note: deletion precedes update).
     * @param {String} id Parameter caseExecutionId
     * @param {Object} opts Optional parameters
     * @param {module:model/CaseExecutionTriggerDto} opts.body Parameter triggerDto
     * @param {module:api/CaseExecutionApi~disableCallback} callback The callback function, accepting three arguments: error, data, response
     */
			this.disable = function(id, opts, callback) {
				opts = opts || {};
				var postBody = opts["body"];

				// verify the required parameter 'id' is set
				if (id === undefined || id === null) {
					throw new Error("Missing the required parameter 'id' when calling disable");
				}


				var pathParams = {
					"id": id
				};
				var queryParams = {
				};
				var collectionQueryParams = {
				};
				var headerParams = {
				};
				var formParams = {
				};

				var authNames = [];
				var contentTypes = ["application/json"];
				var accepts = ["application/json"];
				var returnType = null;

				return this.apiClient.callApi(
					"/case-execution/{id}/disable", "POST",
					pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
					authNames, contentTypes, accepts, returnType, callback
				);
			};

			/**
     * Callback function to receive the result of the getCaseExecution operation.
     * @callback module:api/CaseExecutionApi~getCaseExecutionCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

			/**
     * Retrieves a case execution by id, according to the &#x60;CaseExecution&#x60; interface in the engine.
     * Retrieves a case execution by id, according to the &#x60;CaseExecution&#x60; interface in the engine.
     * @param {String} id Parameter caseExecutionId
     * @param {module:api/CaseExecutionApi~getCaseExecutionCallback} callback The callback function, accepting three arguments: error, data, response
     */
			this.getCaseExecution = function(id, callback) {
				var postBody = null;

				// verify the required parameter 'id' is set
				if (id === undefined || id === null) {
					throw new Error("Missing the required parameter 'id' when calling getCaseExecution");
				}


				var pathParams = {
					"id": id
				};
				var queryParams = {
				};
				var collectionQueryParams = {
				};
				var headerParams = {
				};
				var formParams = {
				};

				var authNames = [];
				var contentTypes = [];
				var accepts = ["application/json"];
				var returnType = null;

				return this.apiClient.callApi(
					"/case-execution/{id}", "GET",
					pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
					authNames, contentTypes, accepts, returnType, callback
				);
			};

			/**
     * Callback function to receive the result of the getCaseExecutions operation.
     * @callback module:api/CaseExecutionApi~getCaseExecutionsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<Object>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

			/**
     * Queries for case executions that fulfill given parameters.
     * Queries for case executions that fulfill given parameters. Parameters may be static as well as dynamic runtime properties of case executions. The size of the result set can be retrieved by using the Get Case Execution Count method.
     * @param {Object} opts Optional parameters
     * @param {Number} opts.firstResult Parameter firstResult
     * @param {Number} opts.maxResults Parameter maxResults
     * @param {String} opts.caseExecutionId Filter by a case execution id.
     * @param {String} opts.variables Only include case executions that have variables with certain values. Variable filtering expressions are comma-separated and are structured as follows: A valid parameter value has the form key_operator_value. key is the variable name, operator is the comparison operator to be used and value the variable value. Note: Values are always treated as String objects on server side. Valid operator values are: eq - equal to; neq - not equal to; gt - greater than; gteq - greater than or equal to; lt - lower than; lteq - lower than or equal to; like. key and value may not contain underscore or comma characters.
     * @param {String} opts.caseDefinitionId Filter by the case definition the case executions run on.
     * @param {String} opts.caseInstanceId Filter by a case instance id.
     * @param {String} opts.caseDefinitionKey Filter by the key of the case definition the case executions run on.
     * @param {String} opts.active Only include active case executions. Value may only be true, as false is the default behavior.
     * @param {String} opts.firstResult2 Pagination of results. Specifies the index of the first result to return.
     * @param {String} opts.repetition Only include case executions which are repetitions. Value may only be true, as false is the default behavior.
     * @param {String} opts.required Only include required case executions. Value may only be true, as false is the default behavior.
     * @param {String} opts.enabled Only include enabled case executions. Value may only be true, as false is the default behavior.
     * @param {String} opts.activityId Filter by the id of the activity the case execution currently executes.
     * @param {String} opts.tenantIdIn Filter by a comma-separated list of tenant ids. A case execution must have one of the given tenant ids.
     * @param {String} opts.repeatable Only include repeatable case executions. Value may only be true, as false is the default behavior.
     * @param {String} opts.maxResults2 Pagination of results. Specifies the maximum number of results to return. Will return less results if there are no more results left.
     * @param {String} opts.sortOrder Sort the results in a given order. Values may be asc for ascending order or desc for descending order. Must be used in conjunction with the sortBy parameter.
     * @param {String} opts.businessKey Filter by the business key of the case instances the case executions belong to.
     * @param {String} opts.caseInstanceVariables Only include case executions that belong to a case instance with variables with certain values. Variable filtering expressions are comma-separated and are structured as follows: A valid parameter value has the form key_operator_value. key is the variable name, operator is the comparison operator to be used and value the variable value. Note: Values are always treated as String objects on server side. Valid operator values are: eq - equal to; neq - not equal to; gt - greater than; gteq - greater than or equal to; lt - lower than; lteq - lower than or equal to; like. key and value may not contain underscore or comma characters.
     * @param {String} opts.disabled Only include disabled case executions. Value may only be true, as false is the default behavior.
     * @param {String} opts.sortBy Sort the results lexicographically by a given criterion. Valid values are caseExecutionId, caseDefinitionKey, caseDefinitionId and tenantId. Must be used in conjunction with the sortOrder parameter.
     * @param {module:api/CaseExecutionApi~getCaseExecutionsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<Object>}
     */
			this.getCaseExecutions = function(opts, callback) {
				opts = opts || {};
				var postBody = null;


				var pathParams = {
				};
				var queryParams = {
					"firstResult": opts["firstResult"],
					"maxResults": opts["maxResults"],
					"caseExecutionId": opts["caseExecutionId"],
					"variables": opts["variables"],
					"caseDefinitionId": opts["caseDefinitionId"],
					"caseInstanceId": opts["caseInstanceId"],
					"caseDefinitionKey": opts["caseDefinitionKey"],
					"active": opts["active"],
					"firstResult2": opts["firstResult2"],
					"repetition": opts["repetition"],
					"required": opts["required"],
					"enabled": opts["enabled"],
					"activityId": opts["activityId"],
					"tenantIdIn": opts["tenantIdIn"],
					"repeatable": opts["repeatable"],
					"maxResults2": opts["maxResults2"],
					"sortOrder": opts["sortOrder"],
					"businessKey": opts["businessKey"],
					"caseInstanceVariables": opts["caseInstanceVariables"],
					"disabled": opts["disabled"],
					"sortBy": opts["sortBy"],
				};
				var collectionQueryParams = {
				};
				var headerParams = {
				};
				var formParams = {
				};

				var authNames = [];
				var contentTypes = [];
				var accepts = ["application/json"];
				var returnType = [Object];

				return this.apiClient.callApi(
					"/case-execution", "GET",
					pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
					authNames, contentTypes, accepts, returnType, callback
				);
			};

			/**
     * Callback function to receive the result of the getCaseExecutionsCount operation.
     * @callback module:api/CaseExecutionApi~getCaseExecutionsCountCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CountResultDto} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

			/**
     * Queries for the number of case executions that fulfill given parameters.
     * Queries for the number of case executions that fulfill given parameters. Takes the same parameters as the Get Case Executions method.
     * @param {Object} opts Optional parameters
     * @param {String} opts.caseExecutionId Filter by a case execution id.
     * @param {String} opts.variables Only include case executions that have variables with certain values. Variable filtering expressions are comma-separated and are structured as follows: A valid parameter value has the form key_operator_value. key is the variable name, operator is the comparison operator to be used and value the variable value. Note: Values are always treated as String objects on server side. Valid operator values are: eq - equal to; neq - not equal to; gt - greater than; gteq - greater than or equal to; lt - lower than; lteq - lower than or equal to; like. key and value may not contain underscore or comma characters.
     * @param {String} opts.caseDefinitionId Filter by the case definition the case executions run on.
     * @param {String} opts.caseInstanceId Filter by a case instance id.
     * @param {String} opts.caseDefinitionKey Filter by the key of the case definition the case executions run on.
     * @param {String} opts.active Only include active case executions. Value may only be true, as false is the default behavior.
     * @param {String} opts.repetition Only include case executions which are repetitions. Value may only be true, as false is the default behavior.
     * @param {String} opts.required Only include required case executions. Value may only be true, as false is the default behavior.
     * @param {String} opts.enabled Only include enabled case executions. Value may only be true, as false is the default behavior.
     * @param {String} opts.activityId Filter by the id of the activity the case execution currently executes.
     * @param {String} opts.tenantIdIn Filter by a comma-separated list of tenant ids. A case execution must have one of the given tenant ids.
     * @param {String} opts.repeatable Only include repeatable case executions. Value may only be true, as false is the default behavior.
     * @param {String} opts.businessKey Filter by the business key of the case instances the case executions belong to.
     * @param {String} opts.caseInstanceVariables Only include case executions that belong to a case instance with variables with certain values. Variable filtering expressions are comma-separated and are structured as follows: A valid parameter value has the form key_operator_value. key is the variable name, operator is the comparison operator to be used and value the variable value. Note: Values are always treated as String objects on server side. Valid operator values are: eq - equal to; neq - not equal to; gt - greater than; gteq - greater than or equal to; lt - lower than; lteq - lower than or equal to; like. key and value may not contain underscore or comma characters.
     * @param {String} opts.disabled Only include disabled case executions. Value may only be true, as false is the default behavior.
     * @param {module:api/CaseExecutionApi~getCaseExecutionsCountCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CountResultDto}
     */
			this.getCaseExecutionsCount = function(opts, callback) {
				opts = opts || {};
				var postBody = null;


				var pathParams = {
				};
				var queryParams = {
					"caseExecutionId": opts["caseExecutionId"],
					"variables": opts["variables"],
					"caseDefinitionId": opts["caseDefinitionId"],
					"caseInstanceId": opts["caseInstanceId"],
					"caseDefinitionKey": opts["caseDefinitionKey"],
					"active": opts["active"],
					"repetition": opts["repetition"],
					"required": opts["required"],
					"enabled": opts["enabled"],
					"activityId": opts["activityId"],
					"tenantIdIn": opts["tenantIdIn"],
					"repeatable": opts["repeatable"],
					"businessKey": opts["businessKey"],
					"caseInstanceVariables": opts["caseInstanceVariables"],
					"disabled": opts["disabled"],
				};
				var collectionQueryParams = {
				};
				var headerParams = {
				};
				var formParams = {
				};

				var authNames = [];
				var contentTypes = [];
				var accepts = ["application/json"];
				var returnType = CountResultDto;

				return this.apiClient.callApi(
					"/case-execution/count", "GET",
					pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
					authNames, contentTypes, accepts, returnType, callback
				);
			};

			/**
     * Callback function to receive the result of the getVariable operation.
     * @callback module:api/CaseExecutionApi~getVariableCallback
     * @param {String} error Error message, if any.
     * @param {module:model/VariableValueDto} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

			/**
     * Retrieves a variable of a given case instance by id.
     * Retrieves a variable of a given case instance by id.
     * @param {String} varId Parameter variableName
     * @param {String} id Parameter caseExecutionId
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.deserializeValue Parameter deserializeValue (default to true)
     * @param {module:api/CaseExecutionApi~getVariableCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/VariableValueDto}
     */
			this.getVariable = function(varId, id, opts, callback) {
				opts = opts || {};
				var postBody = null;

				// verify the required parameter 'varId' is set
				if (varId === undefined || varId === null) {
					throw new Error("Missing the required parameter 'varId' when calling getVariable");
				}

				// verify the required parameter 'id' is set
				if (id === undefined || id === null) {
					throw new Error("Missing the required parameter 'id' when calling getVariable");
				}


				var pathParams = {
					"varId": varId,
					"id": id
				};
				var queryParams = {
					"deserializeValue": opts["deserializeValue"],
				};
				var collectionQueryParams = {
				};
				var headerParams = {
				};
				var formParams = {
				};

				var authNames = [];
				var contentTypes = [];
				var accepts = ["application/json"];
				var returnType = VariableValueDto;

				return this.apiClient.callApi(
					"/case-execution/{id}/localVariables/{varId}", "GET",
					pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
					authNames, contentTypes, accepts, returnType, callback
				);
			};

			/**
     * Callback function to receive the result of the getVariableBinary operation.
     * @callback module:api/CaseExecutionApi~getVariableBinaryCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

			/**
     * Retrieves a binary variable of a given case instance by id.
     * Retrieves a binary variable of a given case instance by id. Applicable for byte array and file variables.
     * @param {String} varId Parameter variableName
     * @param {String} id Parameter caseExecutionId
     * @param {module:api/CaseExecutionApi~getVariableBinaryCallback} callback The callback function, accepting three arguments: error, data, response
     */
			this.getVariableBinary = function(varId, id, callback) {
				var postBody = null;

				// verify the required parameter 'varId' is set
				if (varId === undefined || varId === null) {
					throw new Error("Missing the required parameter 'varId' when calling getVariableBinary");
				}

				// verify the required parameter 'id' is set
				if (id === undefined || id === null) {
					throw new Error("Missing the required parameter 'id' when calling getVariableBinary");
				}


				var pathParams = {
					"varId": varId,
					"id": id
				};
				var queryParams = {
				};
				var collectionQueryParams = {
				};
				var headerParams = {
				};
				var formParams = {
				};

				var authNames = [];
				var contentTypes = [];
				var accepts = ["application/json"];
				var returnType = null;

				return this.apiClient.callApi(
					"/case-execution/{id}/localVariables/{varId}/data", "GET",
					pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
					authNames, contentTypes, accepts, returnType, callback
				);
			};

			/**
     * Callback function to receive the result of the getVariableBinary_0 operation.
     * @callback module:api/CaseExecutionApi~getVariableBinary_0Callback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

			/**
     * Retrieves a binary variable of a given case instance by id.
     * Retrieves a binary variable of a given case instance by id. Applicable for byte array and file variables.
     * @param {String} varId Parameter variableName
     * @param {String} id Parameter caseExecutionId
     * @param {module:api/CaseExecutionApi~getVariableBinary_0Callback} callback The callback function, accepting three arguments: error, data, response
     */
			this.getVariableBinary_0 = function(varId, id, callback) {
				var postBody = null;

				// verify the required parameter 'varId' is set
				if (varId === undefined || varId === null) {
					throw new Error("Missing the required parameter 'varId' when calling getVariableBinary_0");
				}

				// verify the required parameter 'id' is set
				if (id === undefined || id === null) {
					throw new Error("Missing the required parameter 'id' when calling getVariableBinary_0");
				}


				var pathParams = {
					"varId": varId,
					"id": id
				};
				var queryParams = {
				};
				var collectionQueryParams = {
				};
				var headerParams = {
				};
				var formParams = {
				};

				var authNames = [];
				var contentTypes = [];
				var accepts = ["application/json"];
				var returnType = null;

				return this.apiClient.callApi(
					"/case-execution/{id}/variables/{varId}/data", "GET",
					pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
					authNames, contentTypes, accepts, returnType, callback
				);
			};

			/**
     * Callback function to receive the result of the getVariable_0 operation.
     * @callback module:api/CaseExecutionApi~getVariable_0Callback
     * @param {String} error Error message, if any.
     * @param {module:model/VariableValueDto} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

			/**
     * Retrieves a variable of a given case instance by id.
     * Retrieves a variable of a given case instance by id.
     * @param {String} varId Parameter variableName
     * @param {String} id Parameter caseExecutionId
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.deserializeValue Parameter deserializeValue (default to true)
     * @param {module:api/CaseExecutionApi~getVariable_0Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/VariableValueDto}
     */
			this.getVariable_0 = function(varId, id, opts, callback) {
				opts = opts || {};
				var postBody = null;

				// verify the required parameter 'varId' is set
				if (varId === undefined || varId === null) {
					throw new Error("Missing the required parameter 'varId' when calling getVariable_0");
				}

				// verify the required parameter 'id' is set
				if (id === undefined || id === null) {
					throw new Error("Missing the required parameter 'id' when calling getVariable_0");
				}


				var pathParams = {
					"varId": varId,
					"id": id
				};
				var queryParams = {
					"deserializeValue": opts["deserializeValue"],
				};
				var collectionQueryParams = {
				};
				var headerParams = {
				};
				var formParams = {
				};

				var authNames = [];
				var contentTypes = [];
				var accepts = ["application/json"];
				var returnType = VariableValueDto;

				return this.apiClient.callApi(
					"/case-execution/{id}/variables/{varId}", "GET",
					pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
					authNames, contentTypes, accepts, returnType, callback
				);
			};

			/**
     * Callback function to receive the result of the getVariables operation.
     * @callback module:api/CaseExecutionApi~getVariablesCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

			/**
     * Retrieves all variables of a given case execution by id.
     * Retrieves all variables of a given case execution by id.
     * @param {String} id Parameter caseExecutionId
     * @param {module:api/CaseExecutionApi~getVariablesCallback} callback The callback function, accepting three arguments: error, data, response
     */
			this.getVariables = function(id, callback) {
				var postBody = null;

				// verify the required parameter 'id' is set
				if (id === undefined || id === null) {
					throw new Error("Missing the required parameter 'id' when calling getVariables");
				}


				var pathParams = {
					"id": id
				};
				var queryParams = {
				};
				var collectionQueryParams = {
				};
				var headerParams = {
				};
				var formParams = {
				};

				var authNames = [];
				var contentTypes = [];
				var accepts = ["application/json"];
				var returnType = null;

				return this.apiClient.callApi(
					"/case-execution/{id}/variables", "GET",
					pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
					authNames, contentTypes, accepts, returnType, callback
				);
			};

			/**
     * Callback function to receive the result of the getVariablesLocal operation.
     * @callback module:api/CaseExecutionApi~getVariablesLocalCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

			/**
     * Retrieves all variables of a given case execution.
     * Retrieves all variables of a given case execution.
     * @param {String} id Parameter caseExecutionId
     * @param {module:api/CaseExecutionApi~getVariablesLocalCallback} callback The callback function, accepting three arguments: error, data, response
     */
			this.getVariablesLocal = function(id, callback) {
				var postBody = null;

				// verify the required parameter 'id' is set
				if (id === undefined || id === null) {
					throw new Error("Missing the required parameter 'id' when calling getVariablesLocal");
				}


				var pathParams = {
					"id": id
				};
				var queryParams = {
				};
				var collectionQueryParams = {
				};
				var headerParams = {
				};
				var formParams = {
				};

				var authNames = [];
				var contentTypes = [];
				var accepts = ["application/json"];
				var returnType = null;

				return this.apiClient.callApi(
					"/case-execution/{id}/localVariables", "GET",
					pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
					authNames, contentTypes, accepts, returnType, callback
				);
			};

			/**
     * Callback function to receive the result of the manualStart operation.
     * @callback module:api/CaseExecutionApi~manualStartCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

			/**
     * Performs a transition from ENABLED state to ACTIVE state.
     * Performs a transition from ENABLED state to ACTIVE state. In relation to the state transition, it is possible to update or delete case instance variables (please note: deletion precedes update).
     * @param {String} id Parameter caseExecutionId
     * @param {Object} opts Optional parameters
     * @param {module:model/CaseExecutionTriggerDto} opts.body Parameter triggerDto
     * @param {module:api/CaseExecutionApi~manualStartCallback} callback The callback function, accepting three arguments: error, data, response
     */
			this.manualStart = function(id, opts, callback) {
				opts = opts || {};
				var postBody = opts["body"];

				// verify the required parameter 'id' is set
				if (id === undefined || id === null) {
					throw new Error("Missing the required parameter 'id' when calling manualStart");
				}


				var pathParams = {
					"id": id
				};
				var queryParams = {
				};
				var collectionQueryParams = {
				};
				var headerParams = {
				};
				var formParams = {
				};

				var authNames = [];
				var contentTypes = ["application/json"];
				var accepts = ["application/json"];
				var returnType = null;

				return this.apiClient.callApi(
					"/case-execution/{id}/manual-start", "POST",
					pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
					authNames, contentTypes, accepts, returnType, callback
				);
			};

			/**
     * Callback function to receive the result of the modifyVariables operation.
     * @callback module:api/CaseExecutionApi~modifyVariablesCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

			/**
     * Updates or deletes the variables of a case instance.
     * Updates or deletes the variables of a case instance. Please note: deletion precedes update.
     * @param {String} id Parameter caseExecutionId
     * @param {Object} opts Optional parameters
     * @param {module:model/PatchVariablesDto} opts.body Parameter patch
     * @param {module:api/CaseExecutionApi~modifyVariablesCallback} callback The callback function, accepting three arguments: error, data, response
     */
			this.modifyVariables = function(id, opts, callback) {
				opts = opts || {};
				var postBody = opts["body"];

				// verify the required parameter 'id' is set
				if (id === undefined || id === null) {
					throw new Error("Missing the required parameter 'id' when calling modifyVariables");
				}


				var pathParams = {
					"id": id
				};
				var queryParams = {
				};
				var collectionQueryParams = {
				};
				var headerParams = {
				};
				var formParams = {
				};

				var authNames = [];
				var contentTypes = ["application/json"];
				var accepts = ["application/json"];
				var returnType = null;

				return this.apiClient.callApi(
					"/case-execution/{id}/localVariables", "POST",
					pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
					authNames, contentTypes, accepts, returnType, callback
				);
			};

			/**
     * Callback function to receive the result of the modifyVariables_0 operation.
     * @callback module:api/CaseExecutionApi~modifyVariables_0Callback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

			/**
     * Updates or deletes the variables of a case instance.
     * Updates or deletes the variables of a case instance. Please note: deletion precedes update.
     * @param {String} id Parameter caseExecutionId
     * @param {Object} opts Optional parameters
     * @param {module:model/PatchVariablesDto} opts.body Parameter patch
     * @param {module:api/CaseExecutionApi~modifyVariables_0Callback} callback The callback function, accepting three arguments: error, data, response
     */
			this.modifyVariables_0 = function(id, opts, callback) {
				opts = opts || {};
				var postBody = opts["body"];

				// verify the required parameter 'id' is set
				if (id === undefined || id === null) {
					throw new Error("Missing the required parameter 'id' when calling modifyVariables_0");
				}


				var pathParams = {
					"id": id
				};
				var queryParams = {
				};
				var collectionQueryParams = {
				};
				var headerParams = {
				};
				var formParams = {
				};

				var authNames = [];
				var contentTypes = ["application/json"];
				var accepts = ["application/json"];
				var returnType = null;

				return this.apiClient.callApi(
					"/case-execution/{id}/variables", "POST",
					pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
					authNames, contentTypes, accepts, returnType, callback
				);
			};

			/**
     * Callback function to receive the result of the putVariable operation.
     * @callback module:api/CaseExecutionApi~putVariableCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

			/**
     * Sets a variable of a given case instance by id.
     * Sets a variable of a given case instance by id.
     * @param {String} varId Parameter variableName
     * @param {String} id Parameter caseExecutionId
     * @param {Object} opts Optional parameters
     * @param {module:model/VariableValueDto} opts.body Parameter variable
     * @param {module:api/CaseExecutionApi~putVariableCallback} callback The callback function, accepting three arguments: error, data, response
     */
			this.putVariable = function(varId, id, opts, callback) {
				opts = opts || {};
				var postBody = opts["body"];

				// verify the required parameter 'varId' is set
				if (varId === undefined || varId === null) {
					throw new Error("Missing the required parameter 'varId' when calling putVariable");
				}

				// verify the required parameter 'id' is set
				if (id === undefined || id === null) {
					throw new Error("Missing the required parameter 'id' when calling putVariable");
				}


				var pathParams = {
					"varId": varId,
					"id": id
				};
				var queryParams = {
				};
				var collectionQueryParams = {
				};
				var headerParams = {
				};
				var formParams = {
				};

				var authNames = [];
				var contentTypes = ["application/json"];
				var accepts = ["application/json"];
				var returnType = null;

				return this.apiClient.callApi(
					"/case-execution/{id}/localVariables/{varId}", "PUT",
					pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
					authNames, contentTypes, accepts, returnType, callback
				);
			};

			/**
     * Callback function to receive the result of the putVariable_0 operation.
     * @callback module:api/CaseExecutionApi~putVariable_0Callback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

			/**
     * Sets a variable of a given case instance by id.
     * Sets a variable of a given case instance by id.
     * @param {String} varId Parameter variableName
     * @param {String} id Parameter caseExecutionId
     * @param {Object} opts Optional parameters
     * @param {module:model/VariableValueDto} opts.body Parameter variable
     * @param {module:api/CaseExecutionApi~putVariable_0Callback} callback The callback function, accepting three arguments: error, data, response
     */
			this.putVariable_0 = function(varId, id, opts, callback) {
				opts = opts || {};
				var postBody = opts["body"];

				// verify the required parameter 'varId' is set
				if (varId === undefined || varId === null) {
					throw new Error("Missing the required parameter 'varId' when calling putVariable_0");
				}

				// verify the required parameter 'id' is set
				if (id === undefined || id === null) {
					throw new Error("Missing the required parameter 'id' when calling putVariable_0");
				}


				var pathParams = {
					"varId": varId,
					"id": id
				};
				var queryParams = {
				};
				var collectionQueryParams = {
				};
				var headerParams = {
				};
				var formParams = {
				};

				var authNames = [];
				var contentTypes = ["application/json"];
				var accepts = ["application/json"];
				var returnType = null;

				return this.apiClient.callApi(
					"/case-execution/{id}/variables/{varId}", "PUT",
					pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
					authNames, contentTypes, accepts, returnType, callback
				);
			};

			/**
     * Callback function to receive the result of the queryCaseExecutions operation.
     * @callback module:api/CaseExecutionApi~queryCaseExecutionsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<Object>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

			/**
     * Queries for case executions that fulfill given parameters through a JSON object.
     * Queries for case executions that fulfill given parameters through a JSON object. This method is slightly more powerful than the Get Case Executions method because it allows filtering by multiple case variables of types &#x60;String&#x60;, &#x60;Number&#x60; or &#x60;Boolean&#x60;.
     * @param {Object} opts Optional parameters
     * @param {module:model/CaseExecutionQueryDto} opts.body Parameter query
     * @param {Number} opts.firstResult Parameter firstResult
     * @param {Number} opts.maxResults Parameter maxResults
     * @param {module:api/CaseExecutionApi~queryCaseExecutionsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<Object>}
     */
			this.queryCaseExecutions = function(opts, callback) {
				opts = opts || {};
				var postBody = opts["body"];


				var pathParams = {
				};
				var queryParams = {
					"firstResult": opts["firstResult"],
					"maxResults": opts["maxResults"],
				};
				var collectionQueryParams = {
				};
				var headerParams = {
				};
				var formParams = {
				};

				var authNames = [];
				var contentTypes = ["application/json"];
				var accepts = ["application/json"];
				var returnType = [Object];

				return this.apiClient.callApi(
					"/case-execution", "POST",
					pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
					authNames, contentTypes, accepts, returnType, callback
				);
			};

			/**
     * Callback function to receive the result of the queryCaseExecutionsCount operation.
     * @callback module:api/CaseExecutionApi~queryCaseExecutionsCountCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CountResultDto} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

			/**
     * Query Case Executions Count.
     * Query Case Executions Count
     * @param {module:api/CaseExecutionApi~queryCaseExecutionsCountCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CountResultDto}
     */
			this.queryCaseExecutionsCount = function(callback) {
				var postBody = null;


				var pathParams = {
				};
				var queryParams = {
				};
				var collectionQueryParams = {
				};
				var headerParams = {
				};
				var formParams = {
				};

				var authNames = [];
				var contentTypes = ["application/json"];
				var accepts = ["application/json"];
				var returnType = CountResultDto;

				return this.apiClient.callApi(
					"/case-execution/count", "POST",
					pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
					authNames, contentTypes, accepts, returnType, callback
				);
			};

			/**
     * Callback function to receive the result of the reenable operation.
     * @callback module:api/CaseExecutionApi~reenableCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

			/**
     * Performs a transition from DISABLED state to ENABLED state.
     * Performs a transition from DISABLED state to ENABLED state. In relation to the state transition, it is possible to update or delete case instance variables (please note: deletion precedes update).
     * @param {String} id Parameter caseExecutionId
     * @param {Object} opts Optional parameters
     * @param {module:model/CaseExecutionTriggerDto} opts.body Parameter triggerDto
     * @param {module:api/CaseExecutionApi~reenableCallback} callback The callback function, accepting three arguments: error, data, response
     */
			this.reenable = function(id, opts, callback) {
				opts = opts || {};
				var postBody = opts["body"];

				// verify the required parameter 'id' is set
				if (id === undefined || id === null) {
					throw new Error("Missing the required parameter 'id' when calling reenable");
				}


				var pathParams = {
					"id": id
				};
				var queryParams = {
				};
				var collectionQueryParams = {
				};
				var headerParams = {
				};
				var formParams = {
				};

				var authNames = [];
				var contentTypes = ["application/json"];
				var accepts = ["application/json"];
				var returnType = null;

				return this.apiClient.callApi(
					"/case-execution/{id}/reenable", "POST",
					pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
					authNames, contentTypes, accepts, returnType, callback
				);
			};

			/**
     * Callback function to receive the result of the setBinaryVariable operation.
     * @callback module:api/CaseExecutionApi~setBinaryVariableCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

			/**
     * Sets the serialized value for a binary variable or the binary value for a file variable.
     * Sets the serialized value for a binary variable or the binary value for a file variable.
     * @param {String} varId Parameter variableName
     * @param {String} id Parameter caseExecutionId
     * @param {Object} opts Optional parameters
     * @param {module:model/MultipartFormData} opts.body Parameter multipartFormData
     * @param {module:api/CaseExecutionApi~setBinaryVariableCallback} callback The callback function, accepting three arguments: error, data, response
     */
			this.setBinaryVariable = function(varId, id, opts, callback) {
				opts = opts || {};
				var postBody = opts["body"];

				// verify the required parameter 'varId' is set
				if (varId === undefined || varId === null) {
					throw new Error("Missing the required parameter 'varId' when calling setBinaryVariable");
				}

				// verify the required parameter 'id' is set
				if (id === undefined || id === null) {
					throw new Error("Missing the required parameter 'id' when calling setBinaryVariable");
				}


				var pathParams = {
					"varId": varId,
					"id": id
				};
				var queryParams = {
				};
				var collectionQueryParams = {
				};
				var headerParams = {
				};
				var formParams = {
				};

				var authNames = [];
				var contentTypes = ["multipart/form-data"];
				var accepts = ["application/json"];
				var returnType = null;

				return this.apiClient.callApi(
					"/case-execution/{id}/localVariables/{varId}/data", "POST",
					pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
					authNames, contentTypes, accepts, returnType, callback
				);
			};

			/**
     * Callback function to receive the result of the setBinaryVariable_0 operation.
     * @callback module:api/CaseExecutionApi~setBinaryVariable_0Callback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

			/**
     * Sets the serialized value for a binary variable or the binary value for a file variable.
     * Sets the serialized value for a binary variable or the binary value for a file variable.
     * @param {String} varId Parameter variableName
     * @param {String} id Parameter caseExecutionId
     * @param {Object} opts Optional parameters
     * @param {module:model/MultipartFormData} opts.body Parameter multipartFormData
     * @param {module:api/CaseExecutionApi~setBinaryVariable_0Callback} callback The callback function, accepting three arguments: error, data, response
     */
			this.setBinaryVariable_0 = function(varId, id, opts, callback) {
				opts = opts || {};
				var postBody = opts["body"];

				// verify the required parameter 'varId' is set
				if (varId === undefined || varId === null) {
					throw new Error("Missing the required parameter 'varId' when calling setBinaryVariable_0");
				}

				// verify the required parameter 'id' is set
				if (id === undefined || id === null) {
					throw new Error("Missing the required parameter 'id' when calling setBinaryVariable_0");
				}


				var pathParams = {
					"varId": varId,
					"id": id
				};
				var queryParams = {
				};
				var collectionQueryParams = {
				};
				var headerParams = {
				};
				var formParams = {
				};

				var authNames = [];
				var contentTypes = ["multipart/form-data"];
				var accepts = ["application/json"];
				var returnType = null;

				return this.apiClient.callApi(
					"/case-execution/{id}/variables/{varId}/data", "POST",
					pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
					authNames, contentTypes, accepts, returnType, callback
				);
			};

			/**
     * Callback function to receive the result of the terminate operation.
     * @callback module:api/CaseExecutionApi~terminateCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

			/**
     * title: \&quot;Terminate Case Execution\&quot; weight: 90.
     * title: \&quot;Terminate Case Execution\&quot; weight: 90
     * @param {String} id Parameter caseExecutionId
     * @param {Object} opts Optional parameters
     * @param {module:model/CaseExecutionTriggerDto} opts.body Parameter triggerDto
     * @param {module:api/CaseExecutionApi~terminateCallback} callback The callback function, accepting three arguments: error, data, response
     */
			this.terminate = function(id, opts, callback) {
				opts = opts || {};
				var postBody = opts["body"];

				// verify the required parameter 'id' is set
				if (id === undefined || id === null) {
					throw new Error("Missing the required parameter 'id' when calling terminate");
				}


				var pathParams = {
					"id": id
				};
				var queryParams = {
				};
				var collectionQueryParams = {
				};
				var headerParams = {
				};
				var formParams = {
				};

				var authNames = [];
				var contentTypes = ["application/json"];
				var accepts = ["application/json"];
				var returnType = null;

				return this.apiClient.callApi(
					"/case-execution/{id}/terminate", "POST",
					pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
					authNames, contentTypes, accepts, returnType, callback
				);
			};
		};

		return exports;
	}));

},{"../ApiClient":16,"../model/CaseExecutionQueryDto":55,"../model/CaseExecutionTriggerDto":56,"../model/CountResultDto":62,"../model/MultipartFormData":104,"../model/PatchVariablesDto":105,"../model/VariableValueDto":140}],21:[function(require,module,exports){
/**
 * Camunda REST API
 * Swagger OpenApi Spec for Camunda REST API.
 *
 * OpenAPI spec version: v7.8.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.3.1
 *
 * Do not edit the class manually.
 *
 */

	(function(root, factory) {
		if (typeof define === "function" && define.amd) {
			// AMD. Register as an anonymous module.
			define(["ApiClient", "model/CountResultDto", "model/DecisionDefinitionDiagramDto", "model/EvaluateDecisionDto", "model/HistoryTimeToLiveDto"], factory);
		} else if (typeof module === "object" && module.exports) {
			// CommonJS-like environments that support module.exports, like Node.
			module.exports = factory(require("../ApiClient"), require("../model/CountResultDto"), require("../model/DecisionDefinitionDiagramDto"), require("../model/EvaluateDecisionDto"), require("../model/HistoryTimeToLiveDto"));
		} else {
			// Browser globals (root is window)
			if (!root.CamundaRestApi) {
				root.CamundaRestApi = {};
			}
			root.CamundaRestApi.DecisionDefinitionApi = factory(root.CamundaRestApi.ApiClient, root.CamundaRestApi.CountResultDto, root.CamundaRestApi.DecisionDefinitionDiagramDto, root.CamundaRestApi.EvaluateDecisionDto, root.CamundaRestApi.HistoryTimeToLiveDto);
		}
	}(this, function(ApiClient, CountResultDto, DecisionDefinitionDiagramDto, EvaluateDecisionDto, HistoryTimeToLiveDto) {
		"use strict";

		/**
   * DecisionDefinition service.
   * @module api/DecisionDefinitionApi
   * @version v7.8.0
   */

		/**
   * Constructs a new DecisionDefinitionApi.
   * @alias module:api/DecisionDefinitionApi
   * @class
   * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
		var exports = function(apiClient) {
			this.apiClient = apiClient || ApiClient.instance;


			/**
     * Callback function to receive the result of the evaluateDecision operation.
     * @callback module:api/DecisionDefinitionApi~evaluateDecisionCallback
     * @param {String} error Error message, if any.
     * @param {Array.<Object>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

			/**
     * Evaluates a given decision and returns the result.
     * Evaluates a given decision and returns the result. The input values of the decision have to be supplied in the request body.
     * @param {String} key Parameter decisionDefinitionKey
     * @param {Object} opts Optional parameters
     * @param {module:model/EvaluateDecisionDto} opts.body Parameter parameters
     * @param {module:api/DecisionDefinitionApi~evaluateDecisionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<Object>}
     */
			this.evaluateDecision = function(key, opts, callback) {
				opts = opts || {};
				var postBody = opts["body"];

				// verify the required parameter 'key' is set
				if (key === undefined || key === null) {
					throw new Error("Missing the required parameter 'key' when calling evaluateDecision");
				}


				var pathParams = {
					"key": key
				};
				var queryParams = {
				};
				var collectionQueryParams = {
				};
				var headerParams = {
				};
				var formParams = {
				};

				var authNames = [];
				var contentTypes = ["application/json"];
				var accepts = ["application/json"];
				var returnType = [Object];

				return this.apiClient.callApi(
					"/decision-definition/key/{key}/evaluate", "POST",
					pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
					authNames, contentTypes, accepts, returnType, callback
				);
			};

			/**
     * Callback function to receive the result of the evaluateDecision_0 operation.
     * @callback module:api/DecisionDefinitionApi~evaluateDecision_0Callback
     * @param {String} error Error message, if any.
     * @param {Array.<Object>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

			/**
     * Evaluates a given decision and returns the result.
     * Evaluates a given decision and returns the result. The input values of the decision have to be supplied in the request body.
     * @param {String} key Parameter decisionDefinitionKey
     * @param {String} tenantId Parameter tenantId
     * @param {Object} opts Optional parameters
     * @param {module:model/EvaluateDecisionDto} opts.body Parameter parameters
     * @param {module:api/DecisionDefinitionApi~evaluateDecision_0Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<Object>}
     */
			this.evaluateDecision_0 = function(key, tenantId, opts, callback) {
				opts = opts || {};
				var postBody = opts["body"];

				// verify the required parameter 'key' is set
				if (key === undefined || key === null) {
					throw new Error("Missing the required parameter 'key' when calling evaluateDecision_0");
				}

				// verify the required parameter 'tenantId' is set
				if (tenantId === undefined || tenantId === null) {
					throw new Error("Missing the required parameter 'tenantId' when calling evaluateDecision_0");
				}


				var pathParams = {
					"key": key,
					"tenantId": tenantId
				};
				var queryParams = {
				};
				var collectionQueryParams = {
				};
				var headerParams = {
				};
				var formParams = {
				};

				var authNames = [];
				var contentTypes = ["application/json"];
				var accepts = ["application/json"];
				var returnType = [Object];

				return this.apiClient.callApi(
					"/decision-definition/key/{key}/tenant-id/{tenantId}/evaluate", "POST",
					pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
					authNames, contentTypes, accepts, returnType, callback
				);
			};

			/**
     * Callback function to receive the result of the evaluateDecision_1 operation.
     * @callback module:api/DecisionDefinitionApi~evaluateDecision_1Callback
     * @param {String} error Error message, if any.
     * @param {Array.<Object>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

			/**
     * Evaluates a given decision and returns the result.
     * Evaluates a given decision and returns the result. The input values of the decision have to be supplied in the request body.
     * @param {String} id Parameter decisionDefinitionId
     * @param {Object} opts Optional parameters
     * @param {module:model/EvaluateDecisionDto} opts.body Parameter parameters
     * @param {module:api/DecisionDefinitionApi~evaluateDecision_1Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<Object>}
     */
			this.evaluateDecision_1 = function(id, opts, callback) {
				opts = opts || {};
				var postBody = opts["body"];

				// verify the required parameter 'id' is set
				if (id === undefined || id === null) {
					throw new Error("Missing the required parameter 'id' when calling evaluateDecision_1");
				}


				var pathParams = {
					"id": id
				};
				var queryParams = {
				};
				var collectionQueryParams = {
				};
				var headerParams = {
				};
				var formParams = {
				};

				var authNames = [];
				var contentTypes = ["application/json"];
				var accepts = ["application/json"];
				var returnType = [Object];

				return this.apiClient.callApi(
					"/decision-definition/{id}/evaluate", "POST",
					pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
					authNames, contentTypes, accepts, returnType, callback
				);
			};

			/**
     * Callback function to receive the result of the getDecisionDefinitionById operation.
     * @callback module:api/DecisionDefinitionApi~getDecisionDefinitionByIdCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

			/**
     * Retrieves a decision definition by id, according to the &#x60;DecisionDefinition&#x60; interface in the engine.
     * Retrieves a decision definition by id, according to the &#x60;DecisionDefinition&#x60; interface in the engine.
     * @param {String} id Parameter decisionDefinitionId
     * @param {module:api/DecisionDefinitionApi~getDecisionDefinitionByIdCallback} callback The callback function, accepting three arguments: error, data, response
     */
			this.getDecisionDefinitionById = function(id, callback) {
				var postBody = null;

				// verify the required parameter 'id' is set
				if (id === undefined || id === null) {
					throw new Error("Missing the required parameter 'id' when calling getDecisionDefinitionById");
				}


				var pathParams = {
					"id": id
				};
				var queryParams = {
				};
				var collectionQueryParams = {
				};
				var headerParams = {
				};
				var formParams = {
				};

				var authNames = [];
				var contentTypes = [];
				var accepts = ["application/json"];
				var returnType = null;

				return this.apiClient.callApi(
					"/decision-definition/{id}", "GET",
					pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
					authNames, contentTypes, accepts, returnType, callback
				);
			};

			/**
     * Callback function to receive the result of the getDecisionDefinitionByKey operation.
     * @callback module:api/DecisionDefinitionApi~getDecisionDefinitionByKeyCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

			/**
     * Retrieves a decision definition by id, according to the &#x60;DecisionDefinition&#x60; interface in the engine.
     * Retrieves a decision definition by id, according to the &#x60;DecisionDefinition&#x60; interface in the engine.
     * @param {String} key Parameter decisionDefinitionKey
     * @param {module:api/DecisionDefinitionApi~getDecisionDefinitionByKeyCallback} callback The callback function, accepting three arguments: error, data, response
     */
			this.getDecisionDefinitionByKey = function(key, callback) {
				var postBody = null;

				// verify the required parameter 'key' is set
				if (key === undefined || key === null) {
					throw new Error("Missing the required parameter 'key' when calling getDecisionDefinitionByKey");
				}


				var pathParams = {
					"key": key
				};
				var queryParams = {
				};
				var collectionQueryParams = {
				};
				var headerParams = {
				};
				var formParams = {
				};

				var authNames = [];
				var contentTypes = [];
				var accepts = ["application/json"];
				var returnType = null;

				return this.apiClient.callApi(
					"/decision-definition/key/{key}", "GET",
					pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
					authNames, contentTypes, accepts, returnType, callback
				);
			};

			/**
     * Callback function to receive the result of the getDecisionDefinitionByKeyAndTenantId operation.
     * @callback module:api/DecisionDefinitionApi~getDecisionDefinitionByKeyAndTenantIdCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

			/**
     * Retrieves a decision definition by id, according to the &#x60;DecisionDefinition&#x60; interface in the engine.
     * Retrieves a decision definition by id, according to the &#x60;DecisionDefinition&#x60; interface in the engine.
     * @param {String} key Parameter decisionDefinitionKey
     * @param {String} tenantId Parameter tenantId
     * @param {module:api/DecisionDefinitionApi~getDecisionDefinitionByKeyAndTenantIdCallback} callback The callback function, accepting three arguments: error, data, response
     */
			this.getDecisionDefinitionByKeyAndTenantId = function(key, tenantId, callback) {
				var postBody = null;

				// verify the required parameter 'key' is set
				if (key === undefined || key === null) {
					throw new Error("Missing the required parameter 'key' when calling getDecisionDefinitionByKeyAndTenantId");
				}

				// verify the required parameter 'tenantId' is set
				if (tenantId === undefined || tenantId === null) {
					throw new Error("Missing the required parameter 'tenantId' when calling getDecisionDefinitionByKeyAndTenantId");
				}


				var pathParams = {
					"key": key,
					"tenantId": tenantId
				};
				var queryParams = {
				};
				var collectionQueryParams = {
				};
				var headerParams = {
				};
				var formParams = {
				};

				var authNames = [];
				var contentTypes = [];
				var accepts = ["application/json"];
				var returnType = null;

				return this.apiClient.callApi(
					"/decision-definition/key/{key}/tenant-id/{tenantId}", "GET",
					pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
					authNames, contentTypes, accepts, returnType, callback
				);
			};

			/**
     * Callback function to receive the result of the getDecisionDefinitionDiagram operation.
     * @callback module:api/DecisionDefinitionApi~getDecisionDefinitionDiagramCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

			/**
     * Retrieves the diagram of a decision definition.
     * Retrieves the diagram of a decision definition.
     * @param {String} key Parameter decisionDefinitionKey
     * @param {module:api/DecisionDefinitionApi~getDecisionDefinitionDiagramCallback} callback The callback function, accepting three arguments: error, data, response
     */
			this.getDecisionDefinitionDiagram = function(key, callback) {
				var postBody = null;

				// verify the required parameter 'key' is set
				if (key === undefined || key === null) {
					throw new Error("Missing the required parameter 'key' when calling getDecisionDefinitionDiagram");
				}


				var pathParams = {
					"key": key
				};
				var queryParams = {
				};
				var collectionQueryParams = {
				};
				var headerParams = {
				};
				var formParams = {
				};

				var authNames = [];
				var contentTypes = [];
				var accepts = ["application/json"];
				var returnType = null;

				return this.apiClient.callApi(
					"/decision-definition/key/{key}/diagram", "GET",
					pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
					authNames, contentTypes, accepts, returnType, callback
				);
			};

			/**
     * Callback function to receive the result of the getDecisionDefinitionDiagram_0 operation.
     * @callback module:api/DecisionDefinitionApi~getDecisionDefinitionDiagram_0Callback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

			/**
     * Retrieves the diagram of a decision definition.
     * Retrieves the diagram of a decision definition.
     * @param {String} key Parameter decisionDefinitionKey
     * @param {String} tenantId Parameter tenantId
     * @param {module:api/DecisionDefinitionApi~getDecisionDefinitionDiagram_0Callback} callback The callback function, accepting three arguments: error, data, response
     */
			this.getDecisionDefinitionDiagram_0 = function(key, tenantId, callback) {
				var postBody = null;

				// verify the required parameter 'key' is set
				if (key === undefined || key === null) {
					throw new Error("Missing the required parameter 'key' when calling getDecisionDefinitionDiagram_0");
				}

				// verify the required parameter 'tenantId' is set
				if (tenantId === undefined || tenantId === null) {
					throw new Error("Missing the required parameter 'tenantId' when calling getDecisionDefinitionDiagram_0");
				}


				var pathParams = {
					"key": key,
					"tenantId": tenantId
				};
				var queryParams = {
				};
				var collectionQueryParams = {
				};
				var headerParams = {
				};
				var formParams = {
				};

				var authNames = [];
				var contentTypes = [];
				var accepts = ["application/json"];
				var returnType = null;

				return this.apiClient.callApi(
					"/decision-definition/key/{key}/tenant-id/{tenantId}/diagram", "GET",
					pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
					authNames, contentTypes, accepts, returnType, callback
				);
			};

			/**
     * Callback function to receive the result of the getDecisionDefinitionDiagram_1 operation.
     * @callback module:api/DecisionDefinitionApi~getDecisionDefinitionDiagram_1Callback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

			/**
     * Retrieves the diagram of a decision definition.
     * Retrieves the diagram of a decision definition.
     * @param {String} id Parameter decisionDefinitionId
     * @param {module:api/DecisionDefinitionApi~getDecisionDefinitionDiagram_1Callback} callback The callback function, accepting three arguments: error, data, response
     */
			this.getDecisionDefinitionDiagram_1 = function(id, callback) {
				var postBody = null;

				// verify the required parameter 'id' is set
				if (id === undefined || id === null) {
					throw new Error("Missing the required parameter 'id' when calling getDecisionDefinitionDiagram_1");
				}


				var pathParams = {
					"id": id
				};
				var queryParams = {
				};
				var collectionQueryParams = {
				};
				var headerParams = {
				};
				var formParams = {
				};

				var authNames = [];
				var contentTypes = [];
				var accepts = ["application/json"];
				var returnType = null;

				return this.apiClient.callApi(
					"/decision-definition/{id}/diagram", "GET",
					pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
					authNames, contentTypes, accepts, returnType, callback
				);
			};

			/**
     * Callback function to receive the result of the getDecisionDefinitionDmnXml operation.
     * @callback module:api/DecisionDefinitionApi~getDecisionDefinitionDmnXmlCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DecisionDefinitionDiagramDto} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

			/**
     * Retrieves the DMN XML of a decision definition.
     * Retrieves the DMN XML of a decision definition.
     * @param {String} key Parameter decisionDefinitionKey
     * @param {String} tenantId Parameter tenantId
     * @param {module:api/DecisionDefinitionApi~getDecisionDefinitionDmnXmlCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DecisionDefinitionDiagramDto}
     */
			this.getDecisionDefinitionDmnXml = function(key, tenantId, callback) {
				var postBody = null;

				// verify the required parameter 'key' is set
				if (key === undefined || key === null) {
					throw new Error("Missing the required parameter 'key' when calling getDecisionDefinitionDmnXml");
				}

				// verify the required parameter 'tenantId' is set
				if (tenantId === undefined || tenantId === null) {
					throw new Error("Missing the required parameter 'tenantId' when calling getDecisionDefinitionDmnXml");
				}


				var pathParams = {
					"key": key,
					"tenantId": tenantId
				};
				var queryParams = {
				};
				var collectionQueryParams = {
				};
				var headerParams = {
				};
				var formParams = {
				};

				var authNames = [];
				var contentTypes = [];
				var accepts = ["application/json"];
				var returnType = DecisionDefinitionDiagramDto;

				return this.apiClient.callApi(
					"/decision-definition/key/{key}/tenant-id/{tenantId}/xml", "GET",
					pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
					authNames, contentTypes, accepts, returnType, callback
				);
			};

			/**
     * Callback function to receive the result of the getDecisionDefinitionDmnXml_0 operation.
     * @callback module:api/DecisionDefinitionApi~getDecisionDefinitionDmnXml_0Callback
     * @param {String} error Error message, if any.
     * @param {module:model/DecisionDefinitionDiagramDto} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

			/**
     * Retrieves the DMN XML of a decision definition.
     * Retrieves the DMN XML of a decision definition.
     * @param {String} key Parameter decisionDefinitionKey
     * @param {module:api/DecisionDefinitionApi~getDecisionDefinitionDmnXml_0Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DecisionDefinitionDiagramDto}
     */
			this.getDecisionDefinitionDmnXml_0 = function(key, callback) {
				var postBody = null;

				// verify the required parameter 'key' is set
				if (key === undefined || key === null) {
					throw new Error("Missing the required parameter 'key' when calling getDecisionDefinitionDmnXml_0");
				}


				var pathParams = {
					"key": key
				};
				var queryParams = {
				};
				var collectionQueryParams = {
				};
				var headerParams = {
				};
				var formParams = {
				};

				var authNames = [];
				var contentTypes = [];
				var accepts = ["application/json"];
				var returnType = DecisionDefinitionDiagramDto;

				return this.apiClient.callApi(
					"/decision-definition/key/{key}/xml", "GET",
					pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
					authNames, contentTypes, accepts, returnType, callback
				);
			};

			/**
     * Callback function to receive the result of the getDecisionDefinitionDmnXml_1 operation.
     * @callback module:api/DecisionDefinitionApi~getDecisionDefinitionDmnXml_1Callback
     * @param {String} error Error message, if any.
     * @param {module:model/DecisionDefinitionDiagramDto} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

			/**
     * Retrieves the DMN XML of a decision definition.
     * Retrieves the DMN XML of a decision definition.
     * @param {String} id Parameter decisionDefinitionId
     * @param {module:api/DecisionDefinitionApi~getDecisionDefinitionDmnXml_1Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DecisionDefinitionDiagramDto}
     */
			this.getDecisionDefinitionDmnXml_1 = function(id, callback) {
				var postBody = null;

				// verify the required parameter 'id' is set
				if (id === undefined || id === null) {
					throw new Error("Missing the required parameter 'id' when calling getDecisionDefinitionDmnXml_1");
				}


				var pathParams = {
					"id": id
				};
				var queryParams = {
				};
				var collectionQueryParams = {
				};
				var headerParams = {
				};
				var formParams = {
				};

				var authNames = [];
				var contentTypes = [];
				var accepts = ["application/json"];
				var returnType = DecisionDefinitionDiagramDto;

				return this.apiClient.callApi(
					"/decision-definition/{id}/xml", "GET",
					pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
					authNames, contentTypes, accepts, returnType, callback
				);
			};

			/**
     * Callback function to receive the result of the getDecisionDefinitions operation.
     * @callback module:api/DecisionDefinitionApi~getDecisionDefinitionsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<Object>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

			/**
     * Queries for decision definitions that fulfill given parameters.
     * Queries for decision definitions that fulfill given parameters. Parameters may be the properties of decision definitions, such as the name, key or version. The size of the result set can be retrieved by using the Get Decision Definition Count method.
     * @param {Object} opts Optional parameters
     * @param {Number} opts.firstResult Parameter firstResult
     * @param {Number} opts.maxResults Parameter maxResults
     * @param {String} opts.resourceNameLike Filter by names of those decision definition resources that the parameter is a substring of.
     * @param {String} opts.decisionDefinitionIdIn Filter by decision definition ids.
     * @param {String} opts.firstResult2 Pagination of results. Specifies the index of the first result to return.
     * @param {String} opts.resourceName Filter by the name of the decision definition resource. Exact match.
     * @param {String} opts.version Filter by decision definition version.
     * @param {String} opts.categoryLike Filter by decision definition categories that the parameter is a substring of.
     * @param {String} opts.nameLike Filter by decision definition names that the parameter is a substring of.
     * @param {String} opts.includeDecisionDefinitionsWithoutTenantId Include decision definitions which belong to no tenant. Can be used in combination with tenantIdIn. Value may only be true, as false is the default behavior.
     * @param {String} opts.decisionDefinitionId Filter by decision definition id.
     * @param {String} opts.latestVersion Only include those decision definitions that are latest versions. Value may only be true, as false is the default behavior.
     * @param {String} opts.tenantIdIn Filter by a comma-separated list of tenant ids. A decision definition must have one of the given tenant ids.
     * @param {String} opts.decisionRequirementsDefinitionId Filter by the id of the decision requirements definition this decision definition belongs to.
     * @param {String} opts.maxResults2 Pagination of results. Specifies the maximum number of results to return. Will return less results if there are no more results left.
     * @param {String} opts.deploymentId Filter by the deployment the id belongs to.
     * @param {String} opts.keyLike Filter by decision definition keys that the parameter is a substring of.
     * @param {String} opts.sortOrder Sort the results in a given order. Values may be asc for ascending order or desc for descending order. Must be used in conjunction with the sortBy parameter.
     * @param {String} opts.name Filter by decision definition name.
     * @param {String} opts.withoutTenantId Only include decision definitions which belong to no tenant. Value may only be true, as false is the default behavior.
     * @param {String} opts.sortBy Sort the results lexicographically by a given criterion. Valid values are category, key, id, name, version, deploymentId and tenantId. Must be used in conjunction with the sortOrder parameter.
     * @param {String} opts.category Filter by decision definition category. Exact match.
     * @param {String} opts.withoutDecisionRequirementsDefinition Only include decision definitions which does not belongs to any decision requirements definition. Value may only be true, as false is the default behavior.
     * @param {String} opts.key Filter by decision definition key, i.e., the id in the DMN 1.0 XML. Exact match.
     * @param {String} opts.decisionRequirementsDefinitionKey Filter by the key of the decision requirements definition this decision definition belongs to.
     * @param {module:api/DecisionDefinitionApi~getDecisionDefinitionsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<Object>}
     */
			this.getDecisionDefinitions = function(opts, callback) {
				opts = opts || {};
				var postBody = null;


				var pathParams = {
				};
				var queryParams = {
					"firstResult": opts["firstResult"],
					"maxResults": opts["maxResults"],
					"resourceNameLike": opts["resourceNameLike"],
					"decisionDefinitionIdIn": opts["decisionDefinitionIdIn"],
					"firstResult2": opts["firstResult2"],
					"resourceName": opts["resourceName"],
					"version": opts["version"],
					"categoryLike": opts["categoryLike"],
					"nameLike": opts["nameLike"],
					"includeDecisionDefinitionsWithoutTenantId": opts["includeDecisionDefinitionsWithoutTenantId"],
					"decisionDefinitionId": opts["decisionDefinitionId"],
					"latestVersion": opts["latestVersion"],
					"tenantIdIn": opts["tenantIdIn"],
					"decisionRequirementsDefinitionId": opts["decisionRequirementsDefinitionId"],
					"maxResults2": opts["maxResults2"],
					"deploymentId": opts["deploymentId"],
					"keyLike": opts["keyLike"],
					"sortOrder": opts["sortOrder"],
					"name": opts["name"],
					"withoutTenantId": opts["withoutTenantId"],
					"sortBy": opts["sortBy"],
					"category": opts["category"],
					"withoutDecisionRequirementsDefinition": opts["withoutDecisionRequirementsDefinition"],
					"key": opts["key"],
					"decisionRequirementsDefinitionKey": opts["decisionRequirementsDefinitionKey"],
				};
				var collectionQueryParams = {
				};
				var headerParams = {
				};
				var formParams = {
				};

				var authNames = [];
				var contentTypes = [];
				var accepts = ["application/json"];
				var returnType = [Object];

				return this.apiClient.callApi(
					"/decision-definition", "GET",
					pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
					authNames, contentTypes, accepts, returnType, callback
				);
			};

			/**
     * Callback function to receive the result of the getDecisionDefinitionsCount operation.
     * @callback module:api/DecisionDefinitionApi~getDecisionDefinitionsCountCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CountResultDto} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

			/**
     * Requests the number of decision definitions that fulfill the query criteria.
     * Requests the number of decision definitions that fulfill the query criteria. Takes the same filtering parameters as the Get Decision Definitions method.
     * @param {Object} opts Optional parameters
     * @param {String} opts.resourceNameLike Filter by names of those decision definition resources that the parameter is a substring of.
     * @param {String} opts.decisionDefinitionIdIn Filter by decision definition ids.
     * @param {String} opts.resourceName Filter by the name of the decision definition resource. Exact match.
     * @param {String} opts.version Filter by decision definition version.
     * @param {String} opts.categoryLike Filter by decision definition categories that the parameter is a substring of.
     * @param {String} opts.nameLike Filter by decision definition names that the parameter is a substring of.
     * @param {String} opts.includeDecisionDefinitionsWithoutTenantId Include decision definitions which belong to no tenant. Can be used in combination with tenantIdIn. Value may only be true, as false is the default behavior.
     * @param {String} opts.decisionDefinitionId Filter by decision definition id.
     * @param {String} opts.latestVersion Only include those decision definitions that are latest versions. Value may only be true, as false is the default behavior.
     * @param {String} opts.tenantIdIn Filter by a comma-separated list of tenant ids. A decision definition must have one of the given tenant ids.
     * @param {String} opts.decisionRequirementsDefinitionId Filter by the id of the decision requirements definition this decision definition belongs to.
     * @param {String} opts.deploymentId Filter by the deployment the id belongs to.
     * @param {String} opts.keyLike Filter by decision definition keys that the parameter is a substring of.
     * @param {String} opts.name Filter by decision definition name.
     * @param {String} opts.withoutTenantId Only include decision definitions which belong to no tenant. Value may only be true, as false is the default behavior.
     * @param {String} opts.category Filter by decision definition category. Exact match.
     * @param {String} opts.withoutDecisionRequirementsDefinition Only include decision definitions which does not belongs to any decision requirements definition. Value may only be true, as false is the default behavior.
     * @param {String} opts.key Filter by decision definition key, i.e., the id in the DMN 1.0 XML. Exact match.
     * @param {String} opts.decisionRequirementsDefinitionKey Filter by the key of the decision requirements definition this decision definition belongs to.
     * @param {module:api/DecisionDefinitionApi~getDecisionDefinitionsCountCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CountResultDto}
     */
			this.getDecisionDefinitionsCount = function(opts, callback) {
				opts = opts || {};
				var postBody = null;


				var pathParams = {
				};
				var queryParams = {
					"resourceNameLike": opts["resourceNameLike"],
					"decisionDefinitionIdIn": opts["decisionDefinitionIdIn"],
					"resourceName": opts["resourceName"],
					"version": opts["version"],
					"categoryLike": opts["categoryLike"],
					"nameLike": opts["nameLike"],
					"includeDecisionDefinitionsWithoutTenantId": opts["includeDecisionDefinitionsWithoutTenantId"],
					"decisionDefinitionId": opts["decisionDefinitionId"],
					"latestVersion": opts["latestVersion"],
					"tenantIdIn": opts["tenantIdIn"],
					"decisionRequirementsDefinitionId": opts["decisionRequirementsDefinitionId"],
					"deploymentId": opts["deploymentId"],
					"keyLike": opts["keyLike"],
					"name": opts["name"],
					"withoutTenantId": opts["withoutTenantId"],
					"category": opts["category"],
					"withoutDecisionRequirementsDefinition": opts["withoutDecisionRequirementsDefinition"],
					"key": opts["key"],
					"decisionRequirementsDefinitionKey": opts["decisionRequirementsDefinitionKey"],
				};
				var collectionQueryParams = {
				};
				var headerParams = {
				};
				var formParams = {
				};

				var authNames = [];
				var contentTypes = [];
				var accepts = ["application/json"];
				var returnType = CountResultDto;

				return this.apiClient.callApi(
					"/decision-definition/count", "GET",
					pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
					authNames, contentTypes, accepts, returnType, callback
				);
			};

			/**
     * Callback function to receive the result of the updateHistoryTimeToLive operation.
     * @callback module:api/DecisionDefinitionApi~updateHistoryTimeToLiveCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

			/**
     * Updates history time to live for decision definition.
     * Updates history time to live for decision definition. The field is used within History cleanup.
     * @param {String} key Parameter decisionDefinitionKey
     * @param {Object} opts Optional parameters
     * @param {module:model/HistoryTimeToLiveDto} opts.body Parameter historyTimeToLiveDto
     * @param {module:api/DecisionDefinitionApi~updateHistoryTimeToLiveCallback} callback The callback function, accepting three arguments: error, data, response
     */
			this.updateHistoryTimeToLive = function(key, opts, callback) {
				opts = opts || {};
				var postBody = opts["body"];

				// verify the required parameter 'key' is set
				if (key === undefined || key === null) {
					throw new Error("Missing the required parameter 'key' when calling updateHistoryTimeToLive");
				}


				var pathParams = {
					"key": key
				};
				var queryParams = {
				};
				var collectionQueryParams = {
				};
				var headerParams = {
				};
				var formParams = {
				};

				var authNames = [];
				var contentTypes = ["application/json"];
				var accepts = ["application/json"];
				var returnType = null;

				return this.apiClient.callApi(
					"/decision-definition/key/{key}/history-time-to-live", "PUT",
					pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
					authNames, contentTypes, accepts, returnType, callback
				);
			};

			/**
     * Callback function to receive the result of the updateHistoryTimeToLive_0 operation.
     * @callback module:api/DecisionDefinitionApi~updateHistoryTimeToLive_0Callback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

			/**
     * Updates history time to live for decision definition.
     * Updates history time to live for decision definition. The field is used within History cleanup.
     * @param {String} key Parameter decisionDefinitionKey
     * @param {String} tenantId Parameter tenantId
     * @param {Object} opts Optional parameters
     * @param {module:model/HistoryTimeToLiveDto} opts.body Parameter historyTimeToLiveDto
     * @param {module:api/DecisionDefinitionApi~updateHistoryTimeToLive_0Callback} callback The callback function, accepting three arguments: error, data, response
     */
			this.updateHistoryTimeToLive_0 = function(key, tenantId, opts, callback) {
				opts = opts || {};
				var postBody = opts["body"];

				// verify the required parameter 'key' is set
				if (key === undefined || key === null) {
					throw new Error("Missing the required parameter 'key' when calling updateHistoryTimeToLive_0");
				}

				// verify the required parameter 'tenantId' is set
				if (tenantId === undefined || tenantId === null) {
					throw new Error("Missing the required parameter 'tenantId' when calling updateHistoryTimeToLive_0");
				}


				var pathParams = {
					"key": key,
					"tenantId": tenantId
				};
				var queryParams = {
				};
				var collectionQueryParams = {
				};
				var headerParams = {
				};
				var formParams = {
				};

				var authNames = [];
				var contentTypes = ["application/json"];
				var accepts = ["application/json"];
				var returnType = null;

				return this.apiClient.callApi(
					"/decision-definition/key/{key}/tenant-id/{tenantId}/history-time-to-live", "PUT",
					pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
					authNames, contentTypes, accepts, returnType, callback
				);
			};

			/**
     * Callback function to receive the result of the updateHistoryTimeToLive_1 operation.
     * @callback module:api/DecisionDefinitionApi~updateHistoryTimeToLive_1Callback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

			/**
     * Updates history time to live for decision definition.
     * Updates history time to live for decision definition. The field is used within History cleanup.
     * @param {String} id Parameter decisionDefinitionId
     * @param {Object} opts Optional parameters
     * @param {module:model/HistoryTimeToLiveDto} opts.body Parameter historyTimeToLiveDto
     * @param {module:api/DecisionDefinitionApi~updateHistoryTimeToLive_1Callback} callback The callback function, accepting three arguments: error, data, response
     */
			this.updateHistoryTimeToLive_1 = function(id, opts, callback) {
				opts = opts || {};
				var postBody = opts["body"];

				// verify the required parameter 'id' is set
				if (id === undefined || id === null) {
					throw new Error("Missing the required parameter 'id' when calling updateHistoryTimeToLive_1");
				}


				var pathParams = {
					"id": id
				};
				var queryParams = {
				};
				var collectionQueryParams = {
				};
				var headerParams = {
				};
				var formParams = {
				};

				var authNames = [];
				var contentTypes = ["application/json"];
				var accepts = ["application/json"];
				var returnType = null;

				return this.apiClient.callApi(
					"/decision-definition/{id}/history-time-to-live", "PUT",
					pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
					authNames, contentTypes, accepts, returnType, callback
				);
			};
		};

		return exports;
	}));

},{"../ApiClient":16,"../model/CountResultDto":62,"../model/DecisionDefinitionDiagramDto":64,"../model/EvaluateDecisionDto":69,"../model/HistoryTimeToLiveDto":85}],22:[function(require,module,exports){
/**
 * Camunda REST API
 * Swagger OpenApi Spec for Camunda REST API.
 *
 * OpenAPI spec version: v7.8.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.3.1
 *
 * Do not edit the class manually.
 *
 */

	(function(root, factory) {
		if (typeof define === "function" && define.amd) {
			// AMD. Register as an anonymous module.
			define(["ApiClient", "model/CountResultDto", "model/DeploymentDto", "model/DeploymentResourceDto", "model/MultipartFormData", "model/RedeploymentDto"], factory);
		} else if (typeof module === "object" && module.exports) {
			// CommonJS-like environments that support module.exports, like Node.
			module.exports = factory(require("../ApiClient"), require("../model/CountResultDto"), require("../model/DeploymentDto"), require("../model/DeploymentResourceDto"), require("../model/MultipartFormData"), require("../model/RedeploymentDto"));
		} else {
			// Browser globals (root is window)
			if (!root.CamundaRestApi) {
				root.CamundaRestApi = {};
			}
			root.CamundaRestApi.DeploymentApi = factory(root.CamundaRestApi.ApiClient, root.CamundaRestApi.CountResultDto, root.CamundaRestApi.DeploymentDto, root.CamundaRestApi.DeploymentResourceDto, root.CamundaRestApi.MultipartFormData, root.CamundaRestApi.RedeploymentDto);
		}
	}(this, function(ApiClient, CountResultDto, DeploymentDto, DeploymentResourceDto, MultipartFormData, RedeploymentDto) {
		"use strict";

		/**
   * Deployment service.
   * @module api/DeploymentApi
   * @version v7.8.0
   */

		/**
   * Constructs a new DeploymentApi.
   * @alias module:api/DeploymentApi
   * @class
   * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
		var exports = function(apiClient) {
			this.apiClient = apiClient || ApiClient.instance;


			/**
     * Callback function to receive the result of the createDeployment operation.
     * @callback module:api/DeploymentApi~createDeploymentCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DeploymentDto} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

			/**
     * Creates a deployment.
     * Creates a deployment.Deployments can contain custom code in form of scripts or EL expressions to customize process behavior. This may be abused for remote execution of arbitrary code. See the section on security considerations for custom code in the user guide for details.
     * @param {Object} opts Optional parameters
     * @param {module:model/MultipartFormData} opts.body Parameter multipartFormData
     * @param {module:api/DeploymentApi~createDeploymentCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DeploymentDto}
     */
			this.createDeployment = function(opts, callback) {
				opts = opts || {};
				var postBody = opts["body"];


				var pathParams = {
				};
				var queryParams = {
				};
				var collectionQueryParams = {
				};
				var headerParams = {
				};
				var formParams = {
				};

				var authNames = [];
				var contentTypes = ["multipart/form-data"];
				var accepts = ["application/json"];
				var returnType = DeploymentDto;

				return this.apiClient.callApi(
					"/deployment/create", "POST",
					pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
					authNames, contentTypes, accepts, returnType, callback
				);
			};

			/**
     * Callback function to receive the result of the deleteDeployment operation.
     * @callback module:api/DeploymentApi~deleteDeploymentCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

			/**
     * Deletes a deployment by id.
     * Deletes a deployment by id.
     * @param {String} id Parameter deploymentId
     * @param {String} id2 Parameter deploymentId
     * @param {Object} opts Optional parameters
     * @param {String} opts.skipIoMappings true, if all input/output mappings should not be invoked.
     * @param {String} opts.cascade true, if all process instances, historic process instances and jobs for this deployment should be deleted.
     * @param {String} opts.skipCustomListeners true, if only the built-in ExecutionListeners should be notified with the end event.
     * @param {module:api/DeploymentApi~deleteDeploymentCallback} callback The callback function, accepting three arguments: error, data, response
     */
			this.deleteDeployment = function(id, id2, opts, callback) {
				opts = opts || {};
				var postBody = null;

				// verify the required parameter 'id' is set
				if (id === undefined || id === null) {
					throw new Error("Missing the required parameter 'id' when calling deleteDeployment");
				}

				// verify the required parameter 'id2' is set
				if (id2 === undefined || id2 === null) {
					throw new Error("Missing the required parameter 'id2' when calling deleteDeployment");
				}


				var pathParams = {
					"id": id,
					"id2": id2
				};
				var queryParams = {
					"skipIoMappings": opts["skipIoMappings"],
					"cascade": opts["cascade"],
					"skipCustomListeners": opts["skipCustomListeners"],
				};
				var collectionQueryParams = {
				};
				var headerParams = {
				};
				var formParams = {
				};

				var authNames = [];
				var contentTypes = [];
				var accepts = ["application/json"];
				var returnType = null;

				return this.apiClient.callApi(
					"/deployment/{id}", "DELETE",
					pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
					authNames, contentTypes, accepts, returnType, callback
				);
			};

			/**
     * Callback function to receive the result of the getDeployment operation.
     * @callback module:api/DeploymentApi~getDeploymentCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

			/**
     * Retrieves a deployment by id, according to the &#x60;Deployment&#x60; interface of the engine.
     * Retrieves a deployment by id, according to the &#x60;Deployment&#x60; interface of the engine.
     * @param {String} id Parameter deploymentId
     * @param {module:api/DeploymentApi~getDeploymentCallback} callback The callback function, accepting three arguments: error, data, response
     */
			this.getDeployment = function(id, callback) {
				var postBody = null;

				// verify the required parameter 'id' is set
				if (id === undefined || id === null) {
					throw new Error("Missing the required parameter 'id' when calling getDeployment");
				}


				var pathParams = {
					"id": id
				};
				var queryParams = {
				};
				var collectionQueryParams = {
				};
				var headerParams = {
				};
				var formParams = {
				};

				var authNames = [];
				var contentTypes = [];
				var accepts = ["application/json"];
				var returnType = null;

				return this.apiClient.callApi(
					"/deployment/{id}", "GET",
					pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
					authNames, contentTypes, accepts, returnType, callback
				);
			};

			/**
     * Callback function to receive the result of the getDeploymentResource operation.
     * @callback module:api/DeploymentApi~getDeploymentResourceCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DeploymentResourceDto} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

			/**
     * Retrieves a deployment resource by resource id for the given deployment.
     * Retrieves a deployment resource by resource id for the given deployment.
     * @param {String} resourceId Parameter resourceId
     * @param {String} id Parameter deploymentId
     * @param {module:api/DeploymentApi~getDeploymentResourceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DeploymentResourceDto}
     */
			this.getDeploymentResource = function(resourceId, id, callback) {
				var postBody = null;

				// verify the required parameter 'resourceId' is set
				if (resourceId === undefined || resourceId === null) {
					throw new Error("Missing the required parameter 'resourceId' when calling getDeploymentResource");
				}

				// verify the required parameter 'id' is set
				if (id === undefined || id === null) {
					throw new Error("Missing the required parameter 'id' when calling getDeploymentResource");
				}


				var pathParams = {
					"resourceId": resourceId,
					"id": id
				};
				var queryParams = {
				};
				var collectionQueryParams = {
				};
				var headerParams = {
				};
				var formParams = {
				};

				var authNames = [];
				var contentTypes = [];
				var accepts = ["application/json"];
				var returnType = DeploymentResourceDto;

				return this.apiClient.callApi(
					"/deployment/{id}/resources/{resourceId}", "GET",
					pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
					authNames, contentTypes, accepts, returnType, callback
				);
			};

			/**
     * Callback function to receive the result of the getDeploymentResourceData operation.
     * @callback module:api/DeploymentApi~getDeploymentResourceDataCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

			/**
     * Retrieves the binary content of a deployment resource for the given deployment by id.
     * Retrieves the binary content of a deployment resource for the given deployment by id.
     * @param {String} resourceId Parameter resourceId
     * @param {String} id Parameter deploymentId
     * @param {module:api/DeploymentApi~getDeploymentResourceDataCallback} callback The callback function, accepting three arguments: error, data, response
     */
			this.getDeploymentResourceData = function(resourceId, id, callback) {
				var postBody = null;

				// verify the required parameter 'resourceId' is set
				if (resourceId === undefined || resourceId === null) {
					throw new Error("Missing the required parameter 'resourceId' when calling getDeploymentResourceData");
				}

				// verify the required parameter 'id' is set
				if (id === undefined || id === null) {
					throw new Error("Missing the required parameter 'id' when calling getDeploymentResourceData");
				}


				var pathParams = {
					"resourceId": resourceId,
					"id": id
				};
				var queryParams = {
				};
				var collectionQueryParams = {
				};
				var headerParams = {
				};
				var formParams = {
				};

				var authNames = [];
				var contentTypes = [];
				var accepts = ["application/json"];
				var returnType = null;

				return this.apiClient.callApi(
					"/deployment/{id}/resources/{resourceId}/data", "GET",
					pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
					authNames, contentTypes, accepts, returnType, callback
				);
			};

			/**
     * Callback function to receive the result of the getDeploymentResources operation.
     * @callback module:api/DeploymentApi~getDeploymentResourcesCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

			/**
     * Retrieves all deployment resources of a given deployment.
     * Retrieves all deployment resources of a given deployment.
     * @param {String} id Parameter deploymentId
     * @param {module:api/DeploymentApi~getDeploymentResourcesCallback} callback The callback function, accepting three arguments: error, data, response
     */
			this.getDeploymentResources = function(id, callback) {
				var postBody = null;

				// verify the required parameter 'id' is set
				if (id === undefined || id === null) {
					throw new Error("Missing the required parameter 'id' when calling getDeploymentResources");
				}


				var pathParams = {
					"id": id
				};
				var queryParams = {
				};
				var collectionQueryParams = {
				};
				var headerParams = {
				};
				var formParams = {
				};

				var authNames = [];
				var contentTypes = [];
				var accepts = ["application/json"];
				var returnType = null;

				return this.apiClient.callApi(
					"/deployment/{id}/resources", "GET",
					pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
					authNames, contentTypes, accepts, returnType, callback
				);
			};

			/**
     * Callback function to receive the result of the getDeployments operation.
     * @callback module:api/DeploymentApi~getDeploymentsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<Object>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

			/**
     * Queries for deployments that fulfill given parameters.
     * Queries for deployments that fulfill given parameters. Parameters may be the properties of deployments, such as the id or name or a range of the deployment time. The size of the result set can be retrieved by using the Get Deployment count method.
     * @param {Object} opts Optional parameters
     * @param {Number} opts.firstResult Parameter firstResult
     * @param {Number} opts.maxResults Parameter maxResults
     * @param {String} opts.before Restricts to all deployments before the given date. The date must have the format yyyy-MM-dd&#39;T&#39;HH:mm:ss, e.g., 2013-01-23T14:42:45.
     * @param {String} opts.firstResult2 Pagination of results. Specifies the index of the first result to return.
     * @param {String} opts.source Filter by the deployment source.
     * @param {String} opts.nameLike Filter by the deployment name that the parameter is a substring of. The parameter can include the wildcard % to express like-strategy such as: starts with (%name), ends with (name%) or contains (%name%).
     * @param {String} opts.tenantIdIn Filter by a comma-separated list of tenant ids. A deployment must have one of the given tenant ids.
     * @param {String} opts.maxResults2 Pagination of results. Specifies the maximum number of results to return. Will return less results if there are no more results left.
     * @param {String} opts.sortOrder Sort the results in a given order. Values may be asc for ascending order or desc for descending order. Must be used in conjunction with the sortBy parameter.
     * @param {String} opts.name Filter by the deployment name. Exact match.
     * @param {String} opts.withoutTenantId Only include deployments which belong to no tenant. Value may only be true, as false is the default behavior.
     * @param {String} opts.withoutSource Filter by the deployment source whereby source is equal to null.
     * @param {String} opts.includeDeploymentsWithoutTenantId Include deployments which belong to no tenant. Can be used in combination with tenantIdIn. Value may only be true, as false is the default behavior.
     * @param {String} opts.sortBy Sort the results lexicographically by a given criterion. Valid values are id, name, deploymentTime and tenantId. Must be used in conjunction with the sortOrder parameter.
     * @param {String} opts.id Filter by deployment id.
     * @param {String} opts.after Restricts to all deployments after the given date. The date must have the format yyyy-MM-dd&#39;T&#39;HH:mm:ss, e.g., 2013-01-23T14:42:45.
     * @param {module:api/DeploymentApi~getDeploymentsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<Object>}
     */
			this.getDeployments = function(opts, callback) {
				opts = opts || {};
				var postBody = null;


				var pathParams = {
				};
				var queryParams = {
					"firstResult": opts["firstResult"],
					"maxResults": opts["maxResults"],
					"before": opts["before"],
					"firstResult2": opts["firstResult2"],
					"source": opts["source"],
					"nameLike": opts["nameLike"],
					"tenantIdIn": opts["tenantIdIn"],
					"maxResults2": opts["maxResults2"],
					"sortOrder": opts["sortOrder"],
					"name": opts["name"],
					"withoutTenantId": opts["withoutTenantId"],
					"withoutSource": opts["withoutSource"],
					"includeDeploymentsWithoutTenantId": opts["includeDeploymentsWithoutTenantId"],
					"sortBy": opts["sortBy"],
					"id": opts["id"],
					"after": opts["after"],
				};
				var collectionQueryParams = {
				};
				var headerParams = {
				};
				var formParams = {
				};

				var authNames = [];
				var contentTypes = [];
				var accepts = ["application/json"];
				var returnType = [Object];

				return this.apiClient.callApi(
					"/deployment", "GET",
					pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
					authNames, contentTypes, accepts, returnType, callback
				);
			};

			/**
     * Callback function to receive the result of the getDeploymentsCount operation.
     * @callback module:api/DeploymentApi~getDeploymentsCountCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CountResultDto} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

			/**
     * Queries for the number of deployments that fulfill given parameters.
     * Queries for the number of deployments that fulfill given parameters. Takes the same parameters as the Get Deployments method.
     * @param {Object} opts Optional parameters
     * @param {String} opts.before Restricts to all deployments before the given date. The date must have the format yyyy-MM-dd&#39;T&#39;HH:mm:ss, e.g., 2013-01-23T14:42:45.
     * @param {String} opts.firstResult Pagination of results. Specifies the index of the first result to return.
     * @param {String} opts.source Filter by the deployment source.
     * @param {String} opts.nameLike Filter by the deployment name that the parameter is a substring of. The parameter can include the wildcard % to express like-strategy such as: starts with (%name), ends with (name%) or contains (%name%).
     * @param {String} opts.tenantIdIn Filter by a comma-separated list of tenant ids. A deployment must have one of the given tenant ids.
     * @param {String} opts.maxResults Pagination of results. Specifies the maximum number of results to return. Will return less results if there are no more results left.
     * @param {String} opts.sortOrder Sort the results in a given order. Values may be asc for ascending order or desc for descending order. Must be used in conjunction with the sortBy parameter.
     * @param {String} opts.name Filter by the deployment name. Exact match.
     * @param {String} opts.withoutTenantId Only include deployments which belong to no tenant. Value may only be true, as false is the default behavior.
     * @param {String} opts.withoutSource Filter by the deployment source whereby source is equal to null.
     * @param {String} opts.includeDeploymentsWithoutTenantId Include deployments which belong to no tenant. Can be used in combination with tenantIdIn. Value may only be true, as false is the default behavior.
     * @param {String} opts.sortBy Sort the results lexicographically by a given criterion. Valid values are id, name and deploymentTime. Must be used in conjunction with the sortOrder parameter.
     * @param {String} opts.id Filter by deployment id.
     * @param {String} opts.after Restricts to all deployments after the given date. The date must have the format yyyy-MM-dd&#39;T&#39;HH:mm:ss, e.g., 2013-01-23T14:42:45.
     * @param {module:api/DeploymentApi~getDeploymentsCountCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CountResultDto}
     */
			this.getDeploymentsCount = function(opts, callback) {
				opts = opts || {};
				var postBody = null;


				var pathParams = {
				};
				var queryParams = {
					"before": opts["before"],
					"firstResult": opts["firstResult"],
					"source": opts["source"],
					"nameLike": opts["nameLike"],
					"tenantIdIn": opts["tenantIdIn"],
					"maxResults": opts["maxResults"],
					"sortOrder": opts["sortOrder"],
					"name": opts["name"],
					"withoutTenantId": opts["withoutTenantId"],
					"withoutSource": opts["withoutSource"],
					"includeDeploymentsWithoutTenantId": opts["includeDeploymentsWithoutTenantId"],
					"sortBy": opts["sortBy"],
					"id": opts["id"],
					"after": opts["after"],
				};
				var collectionQueryParams = {
				};
				var headerParams = {
				};
				var formParams = {
				};

				var authNames = [];
				var contentTypes = [];
				var accepts = ["application/json"];
				var returnType = CountResultDto;

				return this.apiClient.callApi(
					"/deployment/count", "GET",
					pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
					authNames, contentTypes, accepts, returnType, callback
				);
			};

			/**
     * Callback function to receive the result of the redeploy operation.
     * @callback module:api/DeploymentApi~redeployCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DeploymentDto} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

			/**
     * Re-deploys an existing deployment.
     * Re-deploys an existing deployment.The deployment resources to re-deploy can be restricted by using the properties &#x60;resourceIds&#x60; or &#x60;resourceNames&#x60;. If no deployment resources to re-deploy are passed then all existing resources of the given deployment are re-deployed.Deployments can contain custom code in form of scripts or EL expressions to customize process behavior. This may be abused for remote execution of arbitrary code. See the section on security considerations for custom code in the user guide for details.
     * @param {String} id Parameter deploymentId
     * @param {Object} opts Optional parameters
     * @param {module:model/RedeploymentDto} opts.body Parameter redeployment
     * @param {module:api/DeploymentApi~redeployCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DeploymentDto}
     */
			this.redeploy = function(id, opts, callback) {
				opts = opts || {};
				var postBody = opts["body"];

				// verify the required parameter 'id' is set
				if (id === undefined || id === null) {
					throw new Error("Missing the required parameter 'id' when calling redeploy");
				}


				var pathParams = {
					"id": id
				};
				var queryParams = {
				};
				var collectionQueryParams = {
				};
				var headerParams = {
				};
				var formParams = {
				};

				var authNames = [];
				var contentTypes = [];
				var accepts = ["application/json"];
				var returnType = DeploymentDto;

				return this.apiClient.callApi(
					"/deployment/{id}/redeploy", "POST",
					pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
					authNames, contentTypes, accepts, returnType, callback
				);
			};
		};

		return exports;
	}));

},{"../ApiClient":16,"../model/CountResultDto":62,"../model/DeploymentDto":67,"../model/DeploymentResourceDto":68,"../model/MultipartFormData":104,"../model/RedeploymentDto":115}],23:[function(require,module,exports){
/**
 * Camunda REST API
 * Swagger OpenApi Spec for Camunda REST API.
 *
 * OpenAPI spec version: v7.8.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.3.1
 *
 * Do not edit the class manually.
 *
 */

	(function(root, factory) {
		if (typeof define === "function" && define.amd) {
			// AMD. Register as an anonymous module.
			define(["ApiClient", "model/CountResultDto", "model/ExecutionQueryDto", "model/ExecutionTriggerDto", "model/IncidentDto", "model/MultipartFormData", "model/PatchVariablesDto", "model/VariableValueDto"], factory);
		} else if (typeof module === "object" && module.exports) {
			// CommonJS-like environments that support module.exports, like Node.
			module.exports = factory(require("../ApiClient"), require("../model/CountResultDto"), require("../model/ExecutionQueryDto"), require("../model/ExecutionTriggerDto"), require("../model/IncidentDto"), require("../model/MultipartFormData"), require("../model/PatchVariablesDto"), require("../model/VariableValueDto"));
		} else {
			// Browser globals (root is window)
			if (!root.CamundaRestApi) {
				root.CamundaRestApi = {};
			}
			root.CamundaRestApi.ExecutionApi = factory(root.CamundaRestApi.ApiClient, root.CamundaRestApi.CountResultDto, root.CamundaRestApi.ExecutionQueryDto, root.CamundaRestApi.ExecutionTriggerDto, root.CamundaRestApi.IncidentDto, root.CamundaRestApi.MultipartFormData, root.CamundaRestApi.PatchVariablesDto, root.CamundaRestApi.VariableValueDto);
		}
	}(this, function(ApiClient, CountResultDto, ExecutionQueryDto, ExecutionTriggerDto, IncidentDto, MultipartFormData, PatchVariablesDto, VariableValueDto) {
		"use strict";

		/**
   * Execution service.
   * @module api/ExecutionApi
   * @version v7.8.0
   */

		/**
   * Constructs a new ExecutionApi.
   * @alias module:api/ExecutionApi
   * @class
   * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
		var exports = function(apiClient) {
			this.apiClient = apiClient || ApiClient.instance;


			/**
     * Callback function to receive the result of the createIncident operation.
     * @callback module:api/ExecutionApi~createIncidentCallback
     * @param {String} error Error message, if any.
     * @param {module:model/IncidentDto} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

			/**
     * Create Incident.
     * Create Incident
     * @param {String} id Parameter executionId
     * @param {module:api/ExecutionApi~createIncidentCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/IncidentDto}
     */
			this.createIncident = function(id, callback) {
				var postBody = null;

				// verify the required parameter 'id' is set
				if (id === undefined || id === null) {
					throw new Error("Missing the required parameter 'id' when calling createIncident");
				}


				var pathParams = {
					"id": id
				};
				var queryParams = {
				};
				var collectionQueryParams = {
				};
				var headerParams = {
				};
				var formParams = {
				};

				var authNames = [];
				var contentTypes = ["application/json"];
				var accepts = ["application/json"];
				var returnType = IncidentDto;

				return this.apiClient.callApi(
					"/execution/{id}/create-incident", "POST",
					pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
					authNames, contentTypes, accepts, returnType, callback
				);
			};

			/**
     * Callback function to receive the result of the deleteVariable operation.
     * @callback module:api/ExecutionApi~deleteVariableCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

			/**
     * Deletes a variable of a given case instance by id.
     * Deletes a variable of a given case instance by id.
     * @param {String} varId Parameter variableName
     * @param {String} id Parameter executionId
     * @param {module:api/ExecutionApi~deleteVariableCallback} callback The callback function, accepting three arguments: error, data, response
     */
			this.deleteVariable = function(varId, id, callback) {
				var postBody = null;

				// verify the required parameter 'varId' is set
				if (varId === undefined || varId === null) {
					throw new Error("Missing the required parameter 'varId' when calling deleteVariable");
				}

				// verify the required parameter 'id' is set
				if (id === undefined || id === null) {
					throw new Error("Missing the required parameter 'id' when calling deleteVariable");
				}


				var pathParams = {
					"varId": varId,
					"id": id
				};
				var queryParams = {
				};
				var collectionQueryParams = {
				};
				var headerParams = {
				};
				var formParams = {
				};

				var authNames = [];
				var contentTypes = [];
				var accepts = ["application/json"];
				var returnType = null;

				return this.apiClient.callApi(
					"/execution/{id}/localVariables/{varId}", "DELETE",
					pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
					authNames, contentTypes, accepts, returnType, callback
				);
			};

			/**
     * Callback function to receive the result of the getExecution operation.
     * @callback module:api/ExecutionApi~getExecutionCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

			/**
     * Retrieves an execution by id, according to the &#x60;Execution&#x60; interface in the engine.
     * Retrieves an execution by id, according to the &#x60;Execution&#x60; interface in the engine.
     * @param {String} id Parameter executionId
     * @param {module:api/ExecutionApi~getExecutionCallback} callback The callback function, accepting three arguments: error, data, response
     */
			this.getExecution = function(id, callback) {
				var postBody = null;

				// verify the required parameter 'id' is set
				if (id === undefined || id === null) {
					throw new Error("Missing the required parameter 'id' when calling getExecution");
				}


				var pathParams = {
					"id": id
				};
				var queryParams = {
				};
				var collectionQueryParams = {
				};
				var headerParams = {
				};
				var formParams = {
				};

				var authNames = [];
				var contentTypes = [];
				var accepts = ["application/json"];
				var returnType = null;

				return this.apiClient.callApi(
					"/execution/{id}", "GET",
					pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
					authNames, contentTypes, accepts, returnType, callback
				);
			};

			/**
     * Callback function to receive the result of the getExecutions operation.
     * @callback module:api/ExecutionApi~getExecutionsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<Object>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

			/**
     * Queries for the executions that fulfill given parameters.
     * Queries for the executions that fulfill given parameters. Parameters may be static as well as dynamic runtime properties of executions. The size of the result set can be retrieved by using the Get Execution Count method.
     * @param {Object} opts Optional parameters
     * @param {Number} opts.firstResult Parameter firstResult
     * @param {Number} opts.maxResults Parameter maxResults
     * @param {String} opts.processDefinitionId Filter by the process definition the executions run on.
     * @param {String} opts.processInstanceId Filter by the id of the process instance the execution belongs to.
     * @param {String} opts.variables Only include executions that have variables with certain values. Variable filtering expressions are comma-separated and are structured as follows: A valid parameter value has the form key_operator_value. key is the variable name, operator is the comparison operator to be used and value the variable value. Note: Values are always treated as String objects on server side. Valid operator values are: eq - equal to; neq - not equal to; gt - greater than; gteq - greater than or equal to; lt - lower than; lteq - lower than or equal to; like. key and value may not contain underscore or comma characters.
     * @param {String} opts.incidentMessage Filter by the incident message. Exact match.
     * @param {String} opts.incidentType Filter by the incident type. See the User Guide for a list of incident types.
     * @param {String} opts.active Only include active executions. Value may only be true, as false is the default behavior.
     * @param {String} opts.firstResult2 Pagination of results. Specifies the index of the first result to return.
     * @param {String} opts.signalEventSubscriptionName Select only those executions that expect a signal of the given name.
     * @param {String} opts.suspended Only include suspended executions. Value may only be true, as false is the default behavior.
     * @param {String} opts.processDefinitionKey Filter by the key of the process definition the executions run on.
     * @param {String} opts.messageEventSubscriptionName Select only those executions that expect a message of the given name.
     * @param {String} opts.activityId Filter by the id of the activity the execution currently executes.
     * @param {String} opts.tenantIdIn Filter by a comma-separated list of tenant ids. An execution must have one of the given tenant ids.
     * @param {String} opts.maxResults2 Pagination of results. Specifies the maximum number of results to return. Will return less results if there are no more results left.
     * @param {String} opts.sortOrder Sort the results in a given order. Values may be asc for ascending order or desc for descending order. Must be used in conjunction with the sortBy parameter.
     * @param {String} opts.businessKey Filter by the business key of the process instances the executions belong to.
     * @param {String} opts.sortBy Sort the results lexicographically by a given criterion. Valid values are instanceId, definitionKey, definitionId and tenantId. Must be used in conjunction with the sortOrder parameter.
     * @param {String} opts.incidentId Filter by the incident id.
     * @param {String} opts.processVariables Only include executions that belong to a process instance with variables with certain values. Variable filtering expressions are comma-separated and are structured as follows: A valid parameter value has the form key_operator_value. key is the variable name, operator is the comparison operator to be used and value the variable value. Note: Values are always treated as String objects on server side. Valid operator values are: eq - equal to; neq - not equal to. key and value may not contain underscore or comma characters.
     * @param {String} opts.incidentMessageLike Filter by the incident message that the parameter is a substring of.
     * @param {module:api/ExecutionApi~getExecutionsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<Object>}
     */
			this.getExecutions = function(opts, callback) {
				opts = opts || {};
				var postBody = null;


				var pathParams = {
				};
				var queryParams = {
					"firstResult": opts["firstResult"],
					"maxResults": opts["maxResults"],
					"processDefinitionId": opts["processDefinitionId"],
					"processInstanceId": opts["processInstanceId"],
					"variables": opts["variables"],
					"incidentMessage": opts["incidentMessage"],
					"incidentType": opts["incidentType"],
					"active": opts["active"],
					"firstResult2": opts["firstResult2"],
					"signalEventSubscriptionName": opts["signalEventSubscriptionName"],
					"suspended": opts["suspended"],
					"processDefinitionKey": opts["processDefinitionKey"],
					"messageEventSubscriptionName": opts["messageEventSubscriptionName"],
					"activityId": opts["activityId"],
					"tenantIdIn": opts["tenantIdIn"],
					"maxResults2": opts["maxResults2"],
					"sortOrder": opts["sortOrder"],
					"businessKey": opts["businessKey"],
					"sortBy": opts["sortBy"],
					"incidentId": opts["incidentId"],
					"processVariables": opts["processVariables"],
					"incidentMessageLike": opts["incidentMessageLike"],
				};
				var collectionQueryParams = {
				};
				var headerParams = {
				};
				var formParams = {
				};

				var authNames = [];
				var contentTypes = [];
				var accepts = ["application/json"];
				var returnType = [Object];

				return this.apiClient.callApi(
					"/execution", "GET",
					pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
					authNames, contentTypes, accepts, returnType, callback
				);
			};

			/**
     * Callback function to receive the result of the getExecutionsCount operation.
     * @callback module:api/ExecutionApi~getExecutionsCountCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CountResultDto} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

			/**
     * Queries for the number of executions that fulfill given parameters.
     * Queries for the number of executions that fulfill given parameters. Takes the same parameters as the Get Executions method.
     * @param {Object} opts Optional parameters
     * @param {String} opts.processDefinitionId Filter by the process definition the executions run on.
     * @param {String} opts.processInstanceId Filter by the id of the process instance the execution belongs to.
     * @param {String} opts.variables Only include executions that have variables with certain values. Variable filtering expressions are comma-separated and are structured as follows: A valid parameter value has the form key_operator_value. key is the variable name, operator is the comparison operator to be used and value the variable value. Note: Values are always treated as String objects on server side. Valid operator values are: eq - equal to; neq - not equal to; gt - greater than; gteq - greater than or equal to; lt - lower than; lteq - lower than or equal to; like. key and value may not contain underscore or comma characters.
     * @param {String} opts.incidentMessage Filter by the incident message. Exact match.
     * @param {String} opts.incidentType Filter by the incident type. See the User Guide for a list of incident types.
     * @param {String} opts.active Only include active executions. Value may only be true, as false is the default behavior.
     * @param {String} opts.signalEventSubscriptionName Select only those executions that expect a signal of the given name.
     * @param {String} opts.suspended Only include suspended executions. Value may only be true, as false is the default behavior.
     * @param {String} opts.processDefinitionKey Filter by the key of the process definition the executions run on.
     * @param {String} opts.messageEventSubscriptionName Select only those executions that expect a message of the given name.
     * @param {String} opts.activityId Filter by the id of the activity the execution currently executes.
     * @param {String} opts.tenantIdIn Filter by a comma-separated list of tenant ids. An execution must have one of the given tenant ids.
     * @param {String} opts.businessKey Filter by the business key of the process instances the executions belong to.
     * @param {String} opts.incidentId Filter by the incident id.
     * @param {String} opts.processVariables Only include executions that belong to a process instance with variables with certain values. Variable filtering expressions are comma-separated and are structured as follows: A valid parameter value has the form key_operator_value. key is the variable name, operator is the comparison operator to be used and value the variable value. Note: Values are always treated as String objects on server side. Valid operator values are: eq - equal to; neq - not equal to. key and value may not contain underscore or comma characters.
     * @param {String} opts.incidentMessageLike Filter by the incident message that the parameter is a substring of.
     * @param {module:api/ExecutionApi~getExecutionsCountCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CountResultDto}
     */
			this.getExecutionsCount = function(opts, callback) {
				opts = opts || {};
				var postBody = null;


				var pathParams = {
				};
				var queryParams = {
					"processDefinitionId": opts["processDefinitionId"],
					"processInstanceId": opts["processInstanceId"],
					"variables": opts["variables"],
					"incidentMessage": opts["incidentMessage"],
					"incidentType": opts["incidentType"],
					"active": opts["active"],
					"signalEventSubscriptionName": opts["signalEventSubscriptionName"],
					"suspended": opts["suspended"],
					"processDefinitionKey": opts["processDefinitionKey"],
					"messageEventSubscriptionName": opts["messageEventSubscriptionName"],
					"activityId": opts["activityId"],
					"tenantIdIn": opts["tenantIdIn"],
					"businessKey": opts["businessKey"],
					"incidentId": opts["incidentId"],
					"processVariables": opts["processVariables"],
					"incidentMessageLike": opts["incidentMessageLike"],
				};
				var collectionQueryParams = {
				};
				var headerParams = {
				};
				var formParams = {
				};

				var authNames = [];
				var contentTypes = [];
				var accepts = ["application/json"];
				var returnType = CountResultDto;

				return this.apiClient.callApi(
					"/execution/count", "GET",
					pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
					authNames, contentTypes, accepts, returnType, callback
				);
			};

			/**
     * Callback function to receive the result of the getLocalVariables operation.
     * @callback module:api/ExecutionApi~getLocalVariablesCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

			/**
     * Retrieves all variables of a given execution by id.
     * Retrieves all variables of a given execution by id.
     * @param {String} id Parameter executionId
     * @param {module:api/ExecutionApi~getLocalVariablesCallback} callback The callback function, accepting three arguments: error, data, response
     */
			this.getLocalVariables = function(id, callback) {
				var postBody = null;

				// verify the required parameter 'id' is set
				if (id === undefined || id === null) {
					throw new Error("Missing the required parameter 'id' when calling getLocalVariables");
				}


				var pathParams = {
					"id": id
				};
				var queryParams = {
				};
				var collectionQueryParams = {
				};
				var headerParams = {
				};
				var formParams = {
				};

				var authNames = [];
				var contentTypes = [];
				var accepts = ["application/json"];
				var returnType = null;

				return this.apiClient.callApi(
					"/execution/{id}/localVariables", "GET",
					pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
					authNames, contentTypes, accepts, returnType, callback
				);
			};

			/**
     * Callback function to receive the result of the getMessageEventSubscription operation.
     * @callback module:api/ExecutionApi~getMessageEventSubscriptionCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

			/**
     * Retrieves a message event subscription for a given execution by id and a message name.
     * Retrieves a message event subscription for a given execution by id and a message name.
     * @param {String} messageName Parameter messageName
     * @param {String} id Parameter executionId
     * @param {module:api/ExecutionApi~getMessageEventSubscriptionCallback} callback The callback function, accepting three arguments: error, data, response
     */
			this.getMessageEventSubscription = function(messageName, id, callback) {
				var postBody = null;

				// verify the required parameter 'messageName' is set
				if (messageName === undefined || messageName === null) {
					throw new Error("Missing the required parameter 'messageName' when calling getMessageEventSubscription");
				}

				// verify the required parameter 'id' is set
				if (id === undefined || id === null) {
					throw new Error("Missing the required parameter 'id' when calling getMessageEventSubscription");
				}


				var pathParams = {
					"messageName": messageName,
					"id": id
				};
				var queryParams = {
				};
				var collectionQueryParams = {
				};
				var headerParams = {
				};
				var formParams = {
				};

				var authNames = [];
				var contentTypes = [];
				var accepts = ["application/json"];
				var returnType = null;

				return this.apiClient.callApi(
					"/execution/{id}/messageSubscriptions/{messageName}", "GET",
					pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
					authNames, contentTypes, accepts, returnType, callback
				);
			};

			/**
     * Callback function to receive the result of the getVariable operation.
     * @callback module:api/ExecutionApi~getVariableCallback
     * @param {String} error Error message, if any.
     * @param {module:model/VariableValueDto} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

			/**
     * Retrieves a variable of a given case instance by id.
     * Retrieves a variable of a given case instance by id.
     * @param {String} varId Parameter variableName
     * @param {String} id Parameter executionId
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.deserializeValue Parameter deserializeValue (default to true)
     * @param {module:api/ExecutionApi~getVariableCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/VariableValueDto}
     */
			this.getVariable = function(varId, id, opts, callback) {
				opts = opts || {};
				var postBody = null;

				// verify the required parameter 'varId' is set
				if (varId === undefined || varId === null) {
					throw new Error("Missing the required parameter 'varId' when calling getVariable");
				}

				// verify the required parameter 'id' is set
				if (id === undefined || id === null) {
					throw new Error("Missing the required parameter 'id' when calling getVariable");
				}


				var pathParams = {
					"varId": varId,
					"id": id
				};
				var queryParams = {
					"deserializeValue": opts["deserializeValue"],
				};
				var collectionQueryParams = {
				};
				var headerParams = {
				};
				var formParams = {
				};

				var authNames = [];
				var contentTypes = [];
				var accepts = ["application/json"];
				var returnType = VariableValueDto;

				return this.apiClient.callApi(
					"/execution/{id}/localVariables/{varId}", "GET",
					pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
					authNames, contentTypes, accepts, returnType, callback
				);
			};

			/**
     * Callback function to receive the result of the getVariableBinary operation.
     * @callback module:api/ExecutionApi~getVariableBinaryCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

			/**
     * Retrieves a binary variable of a given case instance by id.
     * Retrieves a binary variable of a given case instance by id. Applicable for byte array and file variables.
     * @param {String} varId Parameter variableName
     * @param {String} id Parameter executionId
     * @param {module:api/ExecutionApi~getVariableBinaryCallback} callback The callback function, accepting three arguments: error, data, response
     */
			this.getVariableBinary = function(varId, id, callback) {
				var postBody = null;

				// verify the required parameter 'varId' is set
				if (varId === undefined || varId === null) {
					throw new Error("Missing the required parameter 'varId' when calling getVariableBinary");
				}

				// verify the required parameter 'id' is set
				if (id === undefined || id === null) {
					throw new Error("Missing the required parameter 'id' when calling getVariableBinary");
				}


				var pathParams = {
					"varId": varId,
					"id": id
				};
				var queryParams = {
				};
				var collectionQueryParams = {
				};
				var headerParams = {
				};
				var formParams = {
				};

				var authNames = [];
				var contentTypes = [];
				var accepts = ["application/json"];
				var returnType = null;

				return this.apiClient.callApi(
					"/execution/{id}/localVariables/{varId}/data", "GET",
					pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
					authNames, contentTypes, accepts, returnType, callback
				);
			};

			/**
     * Callback function to receive the result of the modifyVariables operation.
     * @callback module:api/ExecutionApi~modifyVariablesCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

			/**
     * Updates or deletes the variables of a case instance.
     * Updates or deletes the variables of a case instance. Please note: deletion precedes update.
     * @param {String} id Parameter executionId
     * @param {Object} opts Optional parameters
     * @param {module:model/PatchVariablesDto} opts.body Parameter patch
     * @param {module:api/ExecutionApi~modifyVariablesCallback} callback The callback function, accepting three arguments: error, data, response
     */
			this.modifyVariables = function(id, opts, callback) {
				opts = opts || {};
				var postBody = opts["body"];

				// verify the required parameter 'id' is set
				if (id === undefined || id === null) {
					throw new Error("Missing the required parameter 'id' when calling modifyVariables");
				}


				var pathParams = {
					"id": id
				};
				var queryParams = {
				};
				var collectionQueryParams = {
				};
				var headerParams = {
				};
				var formParams = {
				};

				var authNames = [];
				var contentTypes = ["application/json"];
				var accepts = ["application/json"];
				var returnType = null;

				return this.apiClient.callApi(
					"/execution/{id}/localVariables", "POST",
					pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
					authNames, contentTypes, accepts, returnType, callback
				);
			};

			/**
     * Callback function to receive the result of the putVariable operation.
     * @callback module:api/ExecutionApi~putVariableCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

			/**
     * Sets a variable of a given case instance by id.
     * Sets a variable of a given case instance by id.
     * @param {String} varId Parameter variableName
     * @param {String} id Parameter executionId
     * @param {Object} opts Optional parameters
     * @param {module:model/VariableValueDto} opts.body Parameter variable
     * @param {module:api/ExecutionApi~putVariableCallback} callback The callback function, accepting three arguments: error, data, response
     */
			this.putVariable = function(varId, id, opts, callback) {
				opts = opts || {};
				var postBody = opts["body"];

				// verify the required parameter 'varId' is set
				if (varId === undefined || varId === null) {
					throw new Error("Missing the required parameter 'varId' when calling putVariable");
				}

				// verify the required parameter 'id' is set
				if (id === undefined || id === null) {
					throw new Error("Missing the required parameter 'id' when calling putVariable");
				}


				var pathParams = {
					"varId": varId,
					"id": id
				};
				var queryParams = {
				};
				var collectionQueryParams = {
				};
				var headerParams = {
				};
				var formParams = {
				};

				var authNames = [];
				var contentTypes = ["application/json"];
				var accepts = ["application/json"];
				var returnType = null;

				return this.apiClient.callApi(
					"/execution/{id}/localVariables/{varId}", "PUT",
					pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
					authNames, contentTypes, accepts, returnType, callback
				);
			};

			/**
     * Callback function to receive the result of the queryExecutions operation.
     * @callback module:api/ExecutionApi~queryExecutionsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<Object>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

			/**
     * Queries for executions that fulfill given parameters through a JSON object.
     * Queries for executions that fulfill given parameters through a JSON object. This method is slightly more powerful than the Get Executions method because it allows to filter by multiple instance and execution variables of types &#x60;String&#x60;, &#x60;Number&#x60; or &#x60;Boolean&#x60;.
     * @param {Object} opts Optional parameters
     * @param {module:model/ExecutionQueryDto} opts.body Parameter query
     * @param {Number} opts.firstResult Parameter firstResult
     * @param {Number} opts.maxResults Parameter maxResults
     * @param {module:api/ExecutionApi~queryExecutionsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<Object>}
     */
			this.queryExecutions = function(opts, callback) {
				opts = opts || {};
				var postBody = opts["body"];


				var pathParams = {
				};
				var queryParams = {
					"firstResult": opts["firstResult"],
					"maxResults": opts["maxResults"],
				};
				var collectionQueryParams = {
				};
				var headerParams = {
				};
				var formParams = {
				};

				var authNames = [];
				var contentTypes = ["application/json"];
				var accepts = ["application/json"];
				var returnType = [Object];

				return this.apiClient.callApi(
					"/execution", "POST",
					pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
					authNames, contentTypes, accepts, returnType, callback
				);
			};

			/**
     * Callback function to receive the result of the queryExecutionsCount operation.
     * @callback module:api/ExecutionApi~queryExecutionsCountCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CountResultDto} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

			/**
     * Queries for the number of executions that fulfill given parameters.
     * Queries for the number of executions that fulfill given parameters. This method takes the same message body as the Get Executions (POST) method and therefore it is slightly more powerful than the Get Execution Count method.
     * @param {Object} opts Optional parameters
     * @param {module:model/ExecutionQueryDto} opts.body Parameter query
     * @param {module:api/ExecutionApi~queryExecutionsCountCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CountResultDto}
     */
			this.queryExecutionsCount = function(opts, callback) {
				opts = opts || {};
				var postBody = opts["body"];


				var pathParams = {
				};
				var queryParams = {
				};
				var collectionQueryParams = {
				};
				var headerParams = {
				};
				var formParams = {
				};

				var authNames = [];
				var contentTypes = ["application/json"];
				var accepts = ["application/json"];
				var returnType = CountResultDto;

				return this.apiClient.callApi(
					"/execution/count", "POST",
					pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
					authNames, contentTypes, accepts, returnType, callback
				);
			};

			/**
     * Callback function to receive the result of the setBinaryVariable operation.
     * @callback module:api/ExecutionApi~setBinaryVariableCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

			/**
     * Sets the serialized value for a binary variable or the binary value for a file variable.
     * Sets the serialized value for a binary variable or the binary value for a file variable.
     * @param {String} varId Parameter variableName
     * @param {String} id Parameter executionId
     * @param {Object} opts Optional parameters
     * @param {module:model/MultipartFormData} opts.body Parameter multipartFormData
     * @param {module:api/ExecutionApi~setBinaryVariableCallback} callback The callback function, accepting three arguments: error, data, response
     */
			this.setBinaryVariable = function(varId, id, opts, callback) {
				opts = opts || {};
				var postBody = opts["body"];

				// verify the required parameter 'varId' is set
				if (varId === undefined || varId === null) {
					throw new Error("Missing the required parameter 'varId' when calling setBinaryVariable");
				}

				// verify the required parameter 'id' is set
				if (id === undefined || id === null) {
					throw new Error("Missing the required parameter 'id' when calling setBinaryVariable");
				}


				var pathParams = {
					"varId": varId,
					"id": id
				};
				var queryParams = {
				};
				var collectionQueryParams = {
				};
				var headerParams = {
				};
				var formParams = {
				};

				var authNames = [];
				var contentTypes = ["multipart/form-data"];
				var accepts = ["application/json"];
				var returnType = null;

				return this.apiClient.callApi(
					"/execution/{id}/localVariables/{varId}/data", "POST",
					pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
					authNames, contentTypes, accepts, returnType, callback
				);
			};

			/**
     * Callback function to receive the result of the signalExecution operation.
     * @callback module:api/ExecutionApi~signalExecutionCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

			/**
     * Signals an execution by id.
     * Signals an execution by id. Can for example be used to explicitly skip user tasks or signal asynchronous continuations.
     * @param {String} id Parameter executionId
     * @param {Object} opts Optional parameters
     * @param {module:model/ExecutionTriggerDto} opts.body Parameter triggerDto
     * @param {module:api/ExecutionApi~signalExecutionCallback} callback The callback function, accepting three arguments: error, data, response
     */
			this.signalExecution = function(id, opts, callback) {
				opts = opts || {};
				var postBody = opts["body"];

				// verify the required parameter 'id' is set
				if (id === undefined || id === null) {
					throw new Error("Missing the required parameter 'id' when calling signalExecution");
				}


				var pathParams = {
					"id": id
				};
				var queryParams = {
				};
				var collectionQueryParams = {
				};
				var headerParams = {
				};
				var formParams = {
				};

				var authNames = [];
				var contentTypes = ["application/json"];
				var accepts = ["application/json"];
				var returnType = null;

				return this.apiClient.callApi(
					"/execution/{id}/signal", "POST",
					pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
					authNames, contentTypes, accepts, returnType, callback
				);
			};

			/**
     * Callback function to receive the result of the triggerEvent operation.
     * @callback module:api/ExecutionApi~triggerEventCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

			/**
     * Delivers a message to a specific execution by id, to trigger an existing message event subscription.
     * Delivers a message to a specific execution by id, to trigger an existing message event subscription. Inject process variables as the message&#39;s payload.
     * @param {String} messageName Parameter messageName
     * @param {String} id Parameter executionId
     * @param {Object} opts Optional parameters
     * @param {module:model/ExecutionTriggerDto} opts.body Parameter triggerDto
     * @param {module:api/ExecutionApi~triggerEventCallback} callback The callback function, accepting three arguments: error, data, response
     */
			this.triggerEvent = function(messageName, id, opts, callback) {
				opts = opts || {};
				var postBody = opts["body"];

				// verify the required parameter 'messageName' is set
				if (messageName === undefined || messageName === null) {
					throw new Error("Missing the required parameter 'messageName' when calling triggerEvent");
				}

				// verify the required parameter 'id' is set
				if (id === undefined || id === null) {
					throw new Error("Missing the required parameter 'id' when calling triggerEvent");
				}


				var pathParams = {
					"messageName": messageName,
					"id": id
				};
				var queryParams = {
				};
				var collectionQueryParams = {
				};
				var headerParams = {
				};
				var formParams = {
				};

				var authNames = [];
				var contentTypes = ["application/json"];
				var accepts = ["application/json"];
				var returnType = null;

				return this.apiClient.callApi(
					"/execution/{id}/messageSubscriptions/{messageName}/trigger", "POST",
					pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
					authNames, contentTypes, accepts, returnType, callback
				);
			};
		};

		return exports;
	}));

},{"../ApiClient":16,"../model/CountResultDto":62,"../model/ExecutionQueryDto":72,"../model/ExecutionTriggerDto":73,"../model/IncidentDto":87,"../model/MultipartFormData":104,"../model/PatchVariablesDto":105,"../model/VariableValueDto":140}],24:[function(require,module,exports){
/**
 * Camunda REST API
 * Swagger OpenApi Spec for Camunda REST API.
 *
 * OpenAPI spec version: v7.8.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.3.1
 *
 * Do not edit the class manually.
 *
 */

	(function(root, factory) {
		if (typeof define === "function" && define.amd) {
			// AMD. Register as an anonymous module.
			define(["ApiClient", "model/BatchDto", "model/CompleteExternalTaskDto", "model/CountResultDto", "model/ExternalTaskBpmnError", "model/ExternalTaskFailureDto", "model/ExternalTaskQueryDto", "model/FetchExternalTasksDto", "model/PriorityDto", "model/RetriesDto", "model/SetRetriesForExternalTasksDto"], factory);
		} else if (typeof module === "object" && module.exports) {
			// CommonJS-like environments that support module.exports, like Node.
			module.exports = factory(require("../ApiClient"), require("../model/BatchDto"), require("../model/CompleteExternalTaskDto"), require("../model/CountResultDto"), require("../model/ExternalTaskBpmnError"), require("../model/ExternalTaskFailureDto"), require("../model/ExternalTaskQueryDto"), require("../model/FetchExternalTasksDto"), require("../model/PriorityDto"), require("../model/RetriesDto"), require("../model/SetRetriesForExternalTasksDto"));
		} else {
			// Browser globals (root is window)
			if (!root.CamundaRestApi) {
				root.CamundaRestApi = {};
			}
			root.CamundaRestApi.ExternalApi = factory(root.CamundaRestApi.ApiClient, root.CamundaRestApi.BatchDto, root.CamundaRestApi.CompleteExternalTaskDto, root.CamundaRestApi.CountResultDto, root.CamundaRestApi.ExternalTaskBpmnError, root.CamundaRestApi.ExternalTaskFailureDto, root.CamundaRestApi.ExternalTaskQueryDto, root.CamundaRestApi.FetchExternalTasksDto, root.CamundaRestApi.PriorityDto, root.CamundaRestApi.RetriesDto, root.CamundaRestApi.SetRetriesForExternalTasksDto);
		}
	}(this, function(ApiClient, BatchDto, CompleteExternalTaskDto, CountResultDto, ExternalTaskBpmnError, ExternalTaskFailureDto, ExternalTaskQueryDto, FetchExternalTasksDto, PriorityDto, RetriesDto, SetRetriesForExternalTasksDto) {
		"use strict";

		/**
   * External service.
   * @module api/ExternalApi
   * @version v7.8.0
   */

		/**
   * Constructs a new ExternalApi.
   * @alias module:api/ExternalApi
   * @class
   * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
		var exports = function(apiClient) {
			this.apiClient = apiClient || ApiClient.instance;


			/**
     * Callback function to receive the result of the complete operation.
     * @callback module:api/ExternalApi~completeCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

			/**
     * Completes an external task by id and updates process variables.
     * Completes an external task by id and updates process variables.
     * @param {String} id Parameter externalTaskId
     * @param {Object} opts Optional parameters
     * @param {module:model/CompleteExternalTaskDto} opts.body Parameter dto
     * @param {module:api/ExternalApi~completeCallback} callback The callback function, accepting three arguments: error, data, response
     */
			this.complete = function(id, opts, callback) {
				opts = opts || {};
				var postBody = opts["body"];

				// verify the required parameter 'id' is set
				if (id === undefined || id === null) {
					throw new Error("Missing the required parameter 'id' when calling complete");
				}


				var pathParams = {
					"id": id
				};
				var queryParams = {
				};
				var collectionQueryParams = {
				};
				var headerParams = {
				};
				var formParams = {
				};

				var authNames = [];
				var contentTypes = ["application/json"];
				var accepts = [];
				var returnType = null;

				return this.apiClient.callApi(
					"/external-task/{id}/complete", "POST",
					pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
					authNames, contentTypes, accepts, returnType, callback
				);
			};

			/**
     * Callback function to receive the result of the extendLock operation.
     * @callback module:api/ExternalApi~extendLockCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

			/**
     * Extend Lock.
     * Extend Lock
     * @param {String} id Parameter externalTaskId
     * @param {module:api/ExternalApi~extendLockCallback} callback The callback function, accepting three arguments: error, data, response
     */
			this.extendLock = function(id, callback) {
				var postBody = null;

				// verify the required parameter 'id' is set
				if (id === undefined || id === null) {
					throw new Error("Missing the required parameter 'id' when calling extendLock");
				}


				var pathParams = {
					"id": id
				};
				var queryParams = {
				};
				var collectionQueryParams = {
				};
				var headerParams = {
				};
				var formParams = {
				};

				var authNames = [];
				var contentTypes = ["application/json"];
				var accepts = [];
				var returnType = null;

				return this.apiClient.callApi(
					"/external-task/{id}/extendLock", "POST",
					pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
					authNames, contentTypes, accepts, returnType, callback
				);
			};

			/**
     * Callback function to receive the result of the fetchAndLock operation.
     * @callback module:api/ExternalApi~fetchAndLockCallback
     * @param {String} error Error message, if any.
     * @param {Array.<Object>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

			/**
     * Fetches and locks a specific number of external tasks for execution by a worker.
     * Fetches and locks a specific number of external tasks for execution by a worker. Query can be restricted to specific task topics and for each task topic an individual lock time can be provided.
     * @param {Object} opts Optional parameters
     * @param {module:model/FetchExternalTasksDto} opts.body Parameter fetchingDto
     * @param {module:api/ExternalApi~fetchAndLockCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<Object>}
     */
			this.fetchAndLock = function(opts, callback) {
				opts = opts || {};
				var postBody = opts["body"];


				var pathParams = {
				};
				var queryParams = {
				};
				var collectionQueryParams = {
				};
				var headerParams = {
				};
				var formParams = {
				};

				var authNames = [];
				var contentTypes = ["application/json"];
				var accepts = ["application/json"];
				var returnType = [Object];

				return this.apiClient.callApi(
					"/external-task/fetchAndLock", "POST",
					pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
					authNames, contentTypes, accepts, returnType, callback
				);
			};

			/**
     * Callback function to receive the result of the getErrorDetails operation.
     * @callback module:api/ExternalApi~getErrorDetailsCallback
     * @param {String} error Error message, if any.
     * @param {'String'} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

			/**
     * Get Error Details.
     * Get Error Details
     * @param {String} id Parameter externalTaskId
     * @param {module:api/ExternalApi~getErrorDetailsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link 'String'}
     */
			this.getErrorDetails = function(id, callback) {
				var postBody = null;

				// verify the required parameter 'id' is set
				if (id === undefined || id === null) {
					throw new Error("Missing the required parameter 'id' when calling getErrorDetails");
				}


				var pathParams = {
					"id": id
				};
				var queryParams = {
				};
				var collectionQueryParams = {
				};
				var headerParams = {
				};
				var formParams = {
				};

				var authNames = [];
				var contentTypes = [];
				var accepts = ["text/plain"];
				var returnType = "String";

				return this.apiClient.callApi(
					"/external-task/{id}/errorDetails", "GET",
					pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
					authNames, contentTypes, accepts, returnType, callback
				);
			};

			/**
     * Callback function to receive the result of the getExternalTask operation.
     * @callback module:api/ExternalApi~getExternalTaskCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

			/**
     * Retrieves an external task by id, corresponding to the &#x60;ExternalTask&#x60; interface in the engine.
     * Retrieves an external task by id, corresponding to the &#x60;ExternalTask&#x60; interface in the engine.
     * @param {String} id Parameter externalTaskId
     * @param {module:api/ExternalApi~getExternalTaskCallback} callback The callback function, accepting three arguments: error, data, response
     */
			this.getExternalTask = function(id, callback) {
				var postBody = null;

				// verify the required parameter 'id' is set
				if (id === undefined || id === null) {
					throw new Error("Missing the required parameter 'id' when calling getExternalTask");
				}


				var pathParams = {
					"id": id
				};
				var queryParams = {
				};
				var collectionQueryParams = {
				};
				var headerParams = {
				};
				var formParams = {
				};

				var authNames = [];
				var contentTypes = [];
				var accepts = [];
				var returnType = null;

				return this.apiClient.callApi(
					"/external-task/{id}", "GET",
					pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
					authNames, contentTypes, accepts, returnType, callback
				);
			};

			/**
     * Callback function to receive the result of the getExternalTasks operation.
     * @callback module:api/ExternalApi~getExternalTasksCallback
     * @param {String} error Error message, if any.
     * @param {Array.<Object>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

			/**
     * Queries for the external tasks that fulfill given parameters.
     * Queries for the external tasks that fulfill given parameters. Parameters may be static as well as dynamic runtime properties of executions. The size of the result set can be retrieved by using the Get External Task Count method.
     * @param {Object} opts Optional parameters
     * @param {Number} opts.firstResult Parameter firstResult
     * @param {Number} opts.maxResults Parameter maxResults
     * @param {String} opts.processInstanceId Filter by the id of the process instance that an external task belongs to.
     * @param {String} opts.processDefinitionId Filter by the id of the process definition that an external task belongs to.
     * @param {String} opts.workerId Filter by the id of the worker that the task was most recently locked by.
     * @param {String} opts.withRetriesLeft Only include external tasks that have a positive (&gt; 0) number of retries (or null). Value may only be true, as false matches any external task.
     * @param {String} opts.notLocked Only include external tasks that are currently not locked (i.e., they have no lock or it has expired). Value may only be true, as false matches any external task.
     * @param {String} opts.lockExpirationAfter Restrict to external tasks that have a lock that expires after a given date. The date must have the format yyyy-MM-dd&#39;T&#39;HH:mm:ss, e.g., 2013-01-23T14:42:45.
     * @param {String} opts.active Only include active tasks. Value may only be true, as false matches any external task.
     * @param {String} opts.firstResult2 Pagination of results. Specifies the index of the first result to return.
     * @param {String} opts.suspended Only include suspended tasks. Value may only be true, as false matches any external task.
     * @param {String} opts.activityId Filter by the id of the activity that an external task is created for.
     * @param {String} opts.executionId Filter by the id of the execution that an external task belongs to.
     * @param {String} opts.priorityLowerThanOrEquals Only include jobs with a priority lower than or equal to the given value. Value must be a valid long value.
     * @param {String} opts.priorityHigherThanOrEquals Only include jobs with a priority higher than or equal to the given value. Value must be a valid long value.
     * @param {String} opts.lockExpirationBefore Restrict to external tasks that have a lock that expires before a given date. The date must have the format yyyy-MM-dd&#39;T&#39;HH:mm:ss, e.g., 2013-01-23T14:42:45.
     * @param {String} opts.tenantIdIn Filter by a comma-separated list of tenant ids. An external task must have one of the given tenant ids.
     * @param {String} opts.maxResults2 Pagination of results. Specifies the maximum number of results to return. Will return less results if there are no more results left.
     * @param {String} opts.sortOrder Sort the results in a given order. Values may be asc for ascending order or desc for descending order. Must be used in conjunction with the sortBy parameter.
     * @param {String} opts.topicName Filter by an external task topic.
     * @param {String} opts.sortBy Sort the results lexicographically by a given criterion. Valid values are id, lockExpirationTime, processInstanceId, processDefinitionId, processDefinitionKey, tenantId and taskPriority. Must be used in conjunction with the sortOrder parameter.
     * @param {String} opts.noRetriesLeft Only include external tasks that have 0 retries. Value may only be true, as false matches any external task.
     * @param {String} opts.externalTaskId Filter by an external task&#39;s id.
     * @param {String} opts.locked Only include external tasks that are currently locked (i.e., they have a lock time and it has not expired). Value may only be true, as false matches any external task.
     * @param {String} opts.activityIdIn Filter by the comma-separated list of ids of the activities that an external task is created for.
     * @param {module:api/ExternalApi~getExternalTasksCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<Object>}
     */
			this.getExternalTasks = function(opts, callback) {
				opts = opts || {};
				var postBody = null;


				var pathParams = {
				};
				var queryParams = {
					"firstResult": opts["firstResult"],
					"maxResults": opts["maxResults"],
					"processInstanceId": opts["processInstanceId"],
					"processDefinitionId": opts["processDefinitionId"],
					"workerId": opts["workerId"],
					"withRetriesLeft": opts["withRetriesLeft"],
					"notLocked": opts["notLocked"],
					"lockExpirationAfter": opts["lockExpirationAfter"],
					"active": opts["active"],
					"firstResult2": opts["firstResult2"],
					"suspended": opts["suspended"],
					"activityId": opts["activityId"],
					"executionId": opts["executionId"],
					"priorityLowerThanOrEquals": opts["priorityLowerThanOrEquals"],
					"priorityHigherThanOrEquals": opts["priorityHigherThanOrEquals"],
					"lockExpirationBefore": opts["lockExpirationBefore"],
					"tenantIdIn": opts["tenantIdIn"],
					"maxResults2": opts["maxResults2"],
					"sortOrder": opts["sortOrder"],
					"topicName": opts["topicName"],
					"sortBy": opts["sortBy"],
					"noRetriesLeft": opts["noRetriesLeft"],
					"externalTaskId": opts["externalTaskId"],
					"locked": opts["locked"],
					"activityIdIn": opts["activityIdIn"],
				};
				var collectionQueryParams = {
				};
				var headerParams = {
				};
				var formParams = {
				};

				var authNames = [];
				var contentTypes = [];
				var accepts = ["application/json"];
				var returnType = [Object];

				return this.apiClient.callApi(
					"/external-task", "GET",
					pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
					authNames, contentTypes, accepts, returnType, callback
				);
			};

			/**
     * Callback function to receive the result of the getExternalTasksCount operation.
     * @callback module:api/ExternalApi~getExternalTasksCountCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CountResultDto} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

			/**
     * Queries for the number of external tasks that fulfill given parameters.
     * Queries for the number of external tasks that fulfill given parameters. Takes the same parameters as the Get External Tasks method.
     * @param {Object} opts Optional parameters
     * @param {String} opts.processInstanceId Filter by the id of the process instance that an external task belongs to.
     * @param {String} opts.processDefinitionId Filter by the id of the process definition that an external task belongs to.
     * @param {String} opts.workerId Filter by the id of the worker that the task was most recently locked by.
     * @param {String} opts.withRetriesLeft Only include external tasks that have a positive (&gt; 0) number of retries (or null). Value may only be true, as false matches any external task.
     * @param {String} opts.notLocked Only include external tasks that are currently not locked (i.e., they have no lock or it has expired). Value may only be true, as false matches any external task.
     * @param {String} opts.lockExpirationAfter Restrict to external tasks that have a lock that expires after a given date. The date must have the format yyyy-MM-dd&#39;T&#39;HH:mm:ss, e.g., 2013-01-23T14:42:45.
     * @param {String} opts.active Only include active tasks. Value may only be true, as false matches any external task.
     * @param {String} opts.suspended Only include suspended tasks. Value may only be true, as false matches any external task.
     * @param {String} opts.activityId Filter by the id of the activity that an external task is created for.
     * @param {String} opts.executionId Filter by the id of the execution that an external task belongs to.
     * @param {String} opts.priorityLowerThanOrEquals Only include jobs with a priority lower than or equal to the given value. Value must be a valid long value.
     * @param {String} opts.priorityHigherThanOrEquals Only include jobs with a priority higher than or equal to the given value. Value must be a valid long value.
     * @param {String} opts.lockExpirationBefore Restrict to external tasks that have a lock that expires before a given date. The date must have the format yyyy-MM-dd&#39;T&#39;HH:mm:ss, e.g., 2013-01-23T14:42:45.
     * @param {String} opts.tenantIdIn Filter by a comma-separated list of tenant ids. An external task must have one of the given tenant ids.
     * @param {String} opts.topicName Filter by an external task topic.
     * @param {String} opts.noRetriesLeft Only include external tasks that have 0 retries. Value may only be true, as false matches any external task.
     * @param {String} opts.externalTaskId Filter by an external task&#39;s id.
     * @param {String} opts.locked Only include external tasks that are currently locked (i.e., they have a lock time and it has not expired). Value may only be true, as false matches any external task.
     * @param {String} opts.activityIdIn Filter by the comma-separated list of ids of the activities that an external task is created for.
     * @param {module:api/ExternalApi~getExternalTasksCountCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CountResultDto}
     */
			this.getExternalTasksCount = function(opts, callback) {
				opts = opts || {};
				var postBody = null;


				var pathParams = {
				};
				var queryParams = {
					"processInstanceId": opts["processInstanceId"],
					"processDefinitionId": opts["processDefinitionId"],
					"workerId": opts["workerId"],
					"withRetriesLeft": opts["withRetriesLeft"],
					"notLocked": opts["notLocked"],
					"lockExpirationAfter": opts["lockExpirationAfter"],
					"active": opts["active"],
					"suspended": opts["suspended"],
					"activityId": opts["activityId"],
					"executionId": opts["executionId"],
					"priorityLowerThanOrEquals": opts["priorityLowerThanOrEquals"],
					"priorityHigherThanOrEquals": opts["priorityHigherThanOrEquals"],
					"lockExpirationBefore": opts["lockExpirationBefore"],
					"tenantIdIn": opts["tenantIdIn"],
					"topicName": opts["topicName"],
					"noRetriesLeft": opts["noRetriesLeft"],
					"externalTaskId": opts["externalTaskId"],
					"locked": opts["locked"],
					"activityIdIn": opts["activityIdIn"],
				};
				var collectionQueryParams = {
				};
				var headerParams = {
				};
				var formParams = {
				};

				var authNames = [];
				var contentTypes = [];
				var accepts = ["application/json"];
				var returnType = CountResultDto;

				return this.apiClient.callApi(
					"/external-task/count", "GET",
					pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
					authNames, contentTypes, accepts, returnType, callback
				);
			};

			/**
     * Callback function to receive the result of the handleBpmnError operation.
     * @callback module:api/ExternalApi~handleBpmnErrorCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

			/**
     * Reports a business error in the context of a running external task by id.
     * Reports a business error in the context of a running external task by id. The error code must be specified to identify the BPMN error handler.
     * @param {String} id Parameter externalTaskId
     * @param {Object} opts Optional parameters
     * @param {module:model/ExternalTaskBpmnError} opts.body Parameter dto
     * @param {module:api/ExternalApi~handleBpmnErrorCallback} callback The callback function, accepting three arguments: error, data, response
     */
			this.handleBpmnError = function(id, opts, callback) {
				opts = opts || {};
				var postBody = opts["body"];

				// verify the required parameter 'id' is set
				if (id === undefined || id === null) {
					throw new Error("Missing the required parameter 'id' when calling handleBpmnError");
				}


				var pathParams = {
					"id": id
				};
				var queryParams = {
				};
				var collectionQueryParams = {
				};
				var headerParams = {
				};
				var formParams = {
				};

				var authNames = [];
				var contentTypes = ["application/json"];
				var accepts = [];
				var returnType = null;

				return this.apiClient.callApi(
					"/external-task/{id}/bpmnError", "POST",
					pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
					authNames, contentTypes, accepts, returnType, callback
				);
			};

			/**
     * Callback function to receive the result of the handleFailure operation.
     * @callback module:api/ExternalApi~handleFailureCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

			/**
     * Reports a failure to execute an external task by id.
     * Reports a failure to execute an external task by id. A number of retries and a timeout until the task can be retried can be specified. If retries are set to 0, an incident for this task is created.
     * @param {String} id Parameter externalTaskId
     * @param {Object} opts Optional parameters
     * @param {module:model/ExternalTaskFailureDto} opts.body Parameter dto
     * @param {module:api/ExternalApi~handleFailureCallback} callback The callback function, accepting three arguments: error, data, response
     */
			this.handleFailure = function(id, opts, callback) {
				opts = opts || {};
				var postBody = opts["body"];

				// verify the required parameter 'id' is set
				if (id === undefined || id === null) {
					throw new Error("Missing the required parameter 'id' when calling handleFailure");
				}


				var pathParams = {
					"id": id
				};
				var queryParams = {
				};
				var collectionQueryParams = {
				};
				var headerParams = {
				};
				var formParams = {
				};

				var authNames = [];
				var contentTypes = ["application/json"];
				var accepts = [];
				var returnType = null;

				return this.apiClient.callApi(
					"/external-task/{id}/failure", "POST",
					pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
					authNames, contentTypes, accepts, returnType, callback
				);
			};

			/**
     * Callback function to receive the result of the queryExternalTasks operation.
     * @callback module:api/ExternalApi~queryExternalTasksCallback
     * @param {String} error Error message, if any.
     * @param {Array.<Object>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

			/**
     * Queries for external tasks that fulfill given parameters in the form of a JSON object.
     * Queries for external tasks that fulfill given parameters in the form of a JSON object. This method is slightly more powerful than the Get External Tasks method because it allows to specify a hierarchical result sorting.
     * @param {Object} opts Optional parameters
     * @param {module:model/ExternalTaskQueryDto} opts.body Parameter query
     * @param {Number} opts.firstResult Parameter firstResult
     * @param {Number} opts.maxResults Parameter maxResults
     * @param {module:api/ExternalApi~queryExternalTasksCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<Object>}
     */
			this.queryExternalTasks = function(opts, callback) {
				opts = opts || {};
				var postBody = opts["body"];


				var pathParams = {
				};
				var queryParams = {
					"firstResult": opts["firstResult"],
					"maxResults": opts["maxResults"],
				};
				var collectionQueryParams = {
				};
				var headerParams = {
				};
				var formParams = {
				};

				var authNames = [];
				var contentTypes = ["application/json"];
				var accepts = ["application/json"];
				var returnType = [Object];

				return this.apiClient.callApi(
					"/external-task", "POST",
					pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
					authNames, contentTypes, accepts, returnType, callback
				);
			};

			/**
     * Callback function to receive the result of the queryExternalTasksCount operation.
     * @callback module:api/ExternalApi~queryExternalTasksCountCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CountResultDto} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

			/**
     * Queries for the number of external tasks that fulfill given parameters.
     * Queries for the number of external tasks that fulfill given parameters. This method takes the same message body as the Get External Tasks (POST) method.
     * @param {Object} opts Optional parameters
     * @param {module:model/ExternalTaskQueryDto} opts.body Parameter query
     * @param {module:api/ExternalApi~queryExternalTasksCountCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CountResultDto}
     */
			this.queryExternalTasksCount = function(opts, callback) {
				opts = opts || {};
				var postBody = opts["body"];


				var pathParams = {
				};
				var queryParams = {
				};
				var collectionQueryParams = {
				};
				var headerParams = {
				};
				var formParams = {
				};

				var authNames = [];
				var contentTypes = ["application/json"];
				var accepts = ["application/json"];
				var returnType = CountResultDto;

				return this.apiClient.callApi(
					"/external-task/count", "POST",
					pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
					authNames, contentTypes, accepts, returnType, callback
				);
			};

			/**
     * Callback function to receive the result of the setPriority operation.
     * @callback module:api/ExternalApi~setPriorityCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

			/**
     * Sets the priority of an existing external task by id.
     * Sets the priority of an existing external task by id. The default value of a priority is 0.
     * @param {String} id Parameter externalTaskId
     * @param {Object} opts Optional parameters
     * @param {module:model/PriorityDto} opts.body Parameter dto
     * @param {module:api/ExternalApi~setPriorityCallback} callback The callback function, accepting three arguments: error, data, response
     */
			this.setPriority = function(id, opts, callback) {
				opts = opts || {};
				var postBody = opts["body"];

				// verify the required parameter 'id' is set
				if (id === undefined || id === null) {
					throw new Error("Missing the required parameter 'id' when calling setPriority");
				}


				var pathParams = {
					"id": id
				};
				var queryParams = {
				};
				var collectionQueryParams = {
				};
				var headerParams = {
				};
				var formParams = {
				};

				var authNames = [];
				var contentTypes = ["application/json"];
				var accepts = [];
				var returnType = null;

				return this.apiClient.callApi(
					"/external-task/{id}/priority", "PUT",
					pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
					authNames, contentTypes, accepts, returnType, callback
				);
			};

			/**
     * Callback function to receive the result of the setRetries operation.
     * @callback module:api/ExternalApi~setRetriesCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

			/**
     * Set Retries.
     * Set Retries
     * @param {module:api/ExternalApi~setRetriesCallback} callback The callback function, accepting three arguments: error, data, response
     */
			this.setRetries = function(callback) {
				var postBody = null;


				var pathParams = {
				};
				var queryParams = {
				};
				var collectionQueryParams = {
				};
				var headerParams = {
				};
				var formParams = {
				};

				var authNames = [];
				var contentTypes = ["application/json"];
				var accepts = [];
				var returnType = null;

				return this.apiClient.callApi(
					"/external-task/retries", "PUT",
					pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
					authNames, contentTypes, accepts, returnType, callback
				);
			};

			/**
     * Callback function to receive the result of the setRetriesAsync operation.
     * @callback module:api/ExternalApi~setRetriesAsyncCallback
     * @param {String} error Error message, if any.
     * @param {module:model/BatchDto} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

			/**
     * Sets the number of retries left to execute external tasks by id asynchronously.
     * Sets the number of retries left to execute external tasks by id asynchronously. If retries are set to 0, an incident is created.
     * @param {Object} opts Optional parameters
     * @param {module:model/SetRetriesForExternalTasksDto} opts.body Parameter retriesDto
     * @param {module:api/ExternalApi~setRetriesAsyncCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/BatchDto}
     */
			this.setRetriesAsync = function(opts, callback) {
				opts = opts || {};
				var postBody = opts["body"];


				var pathParams = {
				};
				var queryParams = {
				};
				var collectionQueryParams = {
				};
				var headerParams = {
				};
				var formParams = {
				};

				var authNames = [];
				var contentTypes = ["application/json"];
				var accepts = ["application/json"];
				var returnType = BatchDto;

				return this.apiClient.callApi(
					"/external-task/retries-async", "POST",
					pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
					authNames, contentTypes, accepts, returnType, callback
				);
			};

			/**
     * Callback function to receive the result of the setRetries_0 operation.
     * @callback module:api/ExternalApi~setRetries_0Callback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

			/**
     * Sets the number of retries left to execute an external task by id.
     * Sets the number of retries left to execute an external task by id. If retries are set to 0, an incident is created.
     * @param {String} id Parameter externalTaskId
     * @param {Object} opts Optional parameters
     * @param {module:model/RetriesDto} opts.body Parameter dto
     * @param {module:api/ExternalApi~setRetries_0Callback} callback The callback function, accepting three arguments: error, data, response
     */
			this.setRetries_0 = function(id, opts, callback) {
				opts = opts || {};
				var postBody = opts["body"];

				// verify the required parameter 'id' is set
				if (id === undefined || id === null) {
					throw new Error("Missing the required parameter 'id' when calling setRetries_0");
				}


				var pathParams = {
					"id": id
				};
				var queryParams = {
				};
				var collectionQueryParams = {
				};
				var headerParams = {
				};
				var formParams = {
				};

				var authNames = [];
				var contentTypes = ["application/json"];
				var accepts = [];
				var returnType = null;

				return this.apiClient.callApi(
					"/external-task/{id}/retries", "PUT",
					pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
					authNames, contentTypes, accepts, returnType, callback
				);
			};

			/**
     * Callback function to receive the result of the unlock operation.
     * @callback module:api/ExternalApi~unlockCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

			/**
     * Unlocks an external task by id.
     * Unlocks an external task by id. Clears the task&#39;s lock expiration time and worker id.
     * @param {String} id Parameter externalTaskId
     * @param {module:api/ExternalApi~unlockCallback} callback The callback function, accepting three arguments: error, data, response
     */
			this.unlock = function(id, callback) {
				var postBody = null;

				// verify the required parameter 'id' is set
				if (id === undefined || id === null) {
					throw new Error("Missing the required parameter 'id' when calling unlock");
				}


				var pathParams = {
					"id": id
				};
				var queryParams = {
				};
				var collectionQueryParams = {
				};
				var headerParams = {
				};
				var formParams = {
				};

				var authNames = [];
				var contentTypes = [];
				var accepts = [];
				var returnType = null;

				return this.apiClient.callApi(
					"/external-task/{id}/unlock", "POST",
					pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
					authNames, contentTypes, accepts, returnType, callback
				);
			};
		};

		return exports;
	}));

},{"../ApiClient":16,"../model/BatchDto":50,"../model/CompleteExternalTaskDto":59,"../model/CountResultDto":62,"../model/ExternalTaskBpmnError":74,"../model/ExternalTaskFailureDto":76,"../model/ExternalTaskQueryDto":77,"../model/FetchExternalTasksDto":79,"../model/PriorityDto":106,"../model/RetriesDto":117,"../model/SetRetriesForExternalTasksDto":120}],25:[function(require,module,exports){
/**
 * Camunda REST API
 * Swagger OpenApi Spec for Camunda REST API.
 *
 * OpenAPI spec version: v7.8.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.3.1
 *
 * Do not edit the class manually.
 *
 */

	(function(root, factory) {
		if (typeof define === "function" && define.amd) {
			// AMD. Register as an anonymous module.
			define(["ApiClient", "model/CountResultDto", "model/FilterDto", "model/ResourceOptionsDto"], factory);
		} else if (typeof module === "object" && module.exports) {
			// CommonJS-like environments that support module.exports, like Node.
			module.exports = factory(require("../ApiClient"), require("../model/CountResultDto"), require("../model/FilterDto"), require("../model/ResourceOptionsDto"));
		} else {
			// Browser globals (root is window)
			if (!root.CamundaRestApi) {
				root.CamundaRestApi = {};
			}
			root.CamundaRestApi.FilterApi = factory(root.CamundaRestApi.ApiClient, root.CamundaRestApi.CountResultDto, root.CamundaRestApi.FilterDto, root.CamundaRestApi.ResourceOptionsDto);
		}
	}(this, function(ApiClient, CountResultDto, FilterDto, ResourceOptionsDto) {
		"use strict";

		/**
   * Filter service.
   * @module api/FilterApi
   * @version v7.8.0
   */

		/**
   * Constructs a new FilterApi.
   * @alias module:api/FilterApi
   * @class
   * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
		var exports = function(apiClient) {
			this.apiClient = apiClient || ApiClient.instance;


			/**
     * Callback function to receive the result of the availableOperations operation.
     * @callback module:api/FilterApi~availableOperationsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ResourceOptionsDto} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

			/**
     * The &#x60;/filter&#x60; resource supports two custom OPTIONS requests, one for the resource as such and one for individual filter instances.
     * The &#x60;/filter&#x60; resource supports two custom OPTIONS requests, one for the resource as such and one for individual filter instances. The OPTIONS request allows you to check for the set of available operations that the currently authenticated user can perform on the &#x60;/filter&#x60; resource. Whether the user can perform an operation or not may depend on various factors, including the users authorizations to interact with this resource and the internal context of the process engine.
     * @param {module:api/FilterApi~availableOperationsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ResourceOptionsDto}
     */
			this.availableOperations = function(callback) {
				var postBody = null;


				var pathParams = {
				};
				var queryParams = {
				};
				var collectionQueryParams = {
				};
				var headerParams = {
				};
				var formParams = {
				};

				var authNames = [];
				var contentTypes = [];
				var accepts = ["application/json"];
				var returnType = ResourceOptionsDto;

				return this.apiClient.callApi(
					"/filter", "OPTIONS",
					pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
					authNames, contentTypes, accepts, returnType, callback
				);
			};

			/**
     * Callback function to receive the result of the availableOperations_0 operation.
     * @callback module:api/FilterApi~availableOperations_0Callback
     * @param {String} error Error message, if any.
     * @param {module:model/ResourceOptionsDto} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

			/**
     * The &#x60;/filter&#x60; resource supports two custom OPTIONS requests, one for the resource as such and one for individual filter instances.
     * The &#x60;/filter&#x60; resource supports two custom OPTIONS requests, one for the resource as such and one for individual filter instances. The OPTIONS request allows you to check for the set of available operations that the currently authenticated user can perform on the &#x60;/filter&#x60; resource. Whether the user can perform an operation or not may depend on various factors, including the users authorizations to interact with this resource and the internal context of the process engine.
     * @param {String} id Parameter filterId
     * @param {module:api/FilterApi~availableOperations_0Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ResourceOptionsDto}
     */
			this.availableOperations_0 = function(id, callback) {
				var postBody = null;

				// verify the required parameter 'id' is set
				if (id === undefined || id === null) {
					throw new Error("Missing the required parameter 'id' when calling availableOperations_0");
				}


				var pathParams = {
					"id": id
				};
				var queryParams = {
				};
				var collectionQueryParams = {
				};
				var headerParams = {
				};
				var formParams = {
				};

				var authNames = [];
				var contentTypes = [];
				var accepts = ["application/json"];
				var returnType = ResourceOptionsDto;

				return this.apiClient.callApi(
					"/filter/{id}", "OPTIONS",
					pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
					authNames, contentTypes, accepts, returnType, callback
				);
			};

			/**
     * Callback function to receive the result of the createFilter operation.
     * @callback module:api/FilterApi~createFilterCallback
     * @param {String} error Error message, if any.
     * @param {module:model/FilterDto} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

			/**
     * Creates a new filter.
     * Creates a new filter.The &#x60;query&#x60; parameter of the request body takes a JSON-serialized query. Some query types (e.g., task queries) allow to specify EL expressions in their parameters and may therefore be abused for remote code execution. See the section on security considerations for custom code in the user guide for details.
     * @param {Object} opts Optional parameters
     * @param {module:model/FilterDto} opts.body Parameter filterDto
     * @param {module:api/FilterApi~createFilterCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/FilterDto}
     */
			this.createFilter = function(opts, callback) {
				opts = opts || {};
				var postBody = opts["body"];


				var pathParams = {
				};
				var queryParams = {
				};
				var collectionQueryParams = {
				};
				var headerParams = {
				};
				var formParams = {
				};

				var authNames = [];
				var contentTypes = ["application/json"];
				var accepts = ["application/json"];
				var returnType = FilterDto;

				return this.apiClient.callApi(
					"/filter/create", "POST",
					pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
					authNames, contentTypes, accepts, returnType, callback
				);
			};

			/**
     * Callback function to receive the result of the deleteFilter operation.
     * @callback module:api/FilterApi~deleteFilterCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

			/**
     * Deletes a filter by id.
     * Deletes a filter by id.
     * @param {String} id Parameter filterId
     * @param {module:api/FilterApi~deleteFilterCallback} callback The callback function, accepting three arguments: error, data, response
     */
			this.deleteFilter = function(id, callback) {
				var postBody = null;

				// verify the required parameter 'id' is set
				if (id === undefined || id === null) {
					throw new Error("Missing the required parameter 'id' when calling deleteFilter");
				}


				var pathParams = {
					"id": id
				};
				var queryParams = {
				};
				var collectionQueryParams = {
				};
				var headerParams = {
				};
				var formParams = {
				};

				var authNames = [];
				var contentTypes = [];
				var accepts = ["application/json"];
				var returnType = null;

				return this.apiClient.callApi(
					"/filter/{id}", "DELETE",
					pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
					authNames, contentTypes, accepts, returnType, callback
				);
			};

			/**
     * Callback function to receive the result of the executeCount operation.
     * @callback module:api/FilterApi~executeCountCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CountResultDto} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

			/**
     * Executes the saved query of the filter by id and returns the count.
     * Executes the saved query of the filter by id and returns the count.
     * @param {String} id Parameter filterId
     * @param {module:api/FilterApi~executeCountCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CountResultDto}
     */
			this.executeCount = function(id, callback) {
				var postBody = null;

				// verify the required parameter 'id' is set
				if (id === undefined || id === null) {
					throw new Error("Missing the required parameter 'id' when calling executeCount");
				}


				var pathParams = {
					"id": id
				};
				var queryParams = {
				};
				var collectionQueryParams = {
				};
				var headerParams = {
				};
				var formParams = {
				};

				var authNames = [];
				var contentTypes = [];
				var accepts = ["application/json"];
				var returnType = CountResultDto;

				return this.apiClient.callApi(
					"/filter/{id}/count", "GET",
					pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
					authNames, contentTypes, accepts, returnType, callback
				);
			};

			/**
     * Callback function to receive the result of the executeList operation.
     * @callback module:api/FilterApi~executeListCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

			/**
     * Executes the saved query of the filter by id and returns the result list.
     * Executes the saved query of the filter by id and returns the result list.
     * @param {String} id Parameter filterId
     * @param {Object} opts Optional parameters
     * @param {Number} opts.firstResult Parameter firstResult
     * @param {Number} opts.maxResults Parameter maxResults
     * @param {module:api/FilterApi~executeListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
			this.executeList = function(id, opts, callback) {
				opts = opts || {};
				var postBody = null;

				// verify the required parameter 'id' is set
				if (id === undefined || id === null) {
					throw new Error("Missing the required parameter 'id' when calling executeList");
				}


				var pathParams = {
					"id": id
				};
				var queryParams = {
					"firstResult": opts["firstResult"],
					"maxResults": opts["maxResults"],
				};
				var collectionQueryParams = {
				};
				var headerParams = {
				};
				var formParams = {
				};

				var authNames = [];
				var contentTypes = [];
				var accepts = ["application/json", "application/hal+json"];
				var returnType = Object;

				return this.apiClient.callApi(
					"/filter/{id}/list", "GET",
					pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
					authNames, contentTypes, accepts, returnType, callback
				);
			};

			/**
     * Callback function to receive the result of the executeSingleResult operation.
     * @callback module:api/FilterApi~executeSingleResultCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

			/**
     * Executes the saved query of the filter by id and returns the single result.
     * Executes the saved query of the filter by id and returns the single result.
     * @param {String} id Parameter filterId
     * @param {module:api/FilterApi~executeSingleResultCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
			this.executeSingleResult = function(id, callback) {
				var postBody = null;

				// verify the required parameter 'id' is set
				if (id === undefined || id === null) {
					throw new Error("Missing the required parameter 'id' when calling executeSingleResult");
				}


				var pathParams = {
					"id": id
				};
				var queryParams = {
				};
				var collectionQueryParams = {
				};
				var headerParams = {
				};
				var formParams = {
				};

				var authNames = [];
				var contentTypes = [];
				var accepts = ["application/json", "application/hal+json"];
				var returnType = Object;

				return this.apiClient.callApi(
					"/filter/{id}/singleResult", "GET",
					pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
					authNames, contentTypes, accepts, returnType, callback
				);
			};

			/**
     * Callback function to receive the result of the getFilter operation.
     * @callback module:api/FilterApi~getFilterCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

			/**
     * Retrieves a single filter by id, according to the &#x60;Filter&#x60; interface in the engine.
     * Retrieves a single filter by id, according to the &#x60;Filter&#x60; interface in the engine.
     * @param {String} id Parameter filterId
     * @param {module:api/FilterApi~getFilterCallback} callback The callback function, accepting three arguments: error, data, response
     */
			this.getFilter = function(id, callback) {
				var postBody = null;

				// verify the required parameter 'id' is set
				if (id === undefined || id === null) {
					throw new Error("Missing the required parameter 'id' when calling getFilter");
				}


				var pathParams = {
					"id": id
				};
				var queryParams = {
				};
				var collectionQueryParams = {
				};
				var headerParams = {
				};
				var formParams = {
				};

				var authNames = [];
				var contentTypes = [];
				var accepts = ["application/json"];
				var returnType = null;

				return this.apiClient.callApi(
					"/filter/{id}", "GET",
					pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
					authNames, contentTypes, accepts, returnType, callback
				);
			};

			/**
     * Callback function to receive the result of the getFilters operation.
     * @callback module:api/FilterApi~getFiltersCallback
     * @param {String} error Error message, if any.
     * @param {Array.<Object>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

			/**
     * Queries for a list of filters using a list of parameters.
     * Queries for a list of filters using a list of parameters. The size of the result set can be retrieved by using the Get Filter Count method.
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.itemCount Parameter itemCount
     * @param {Number} opts.firstResult Parameter firstResult
     * @param {Number} opts.maxResults Parameter maxResults
     * @param {String} opts.filterId Filter by the id of the filter.
     * @param {String} opts.owner Filter by the user id of the owner of the filter.
     * @param {String} opts.nameLike Filter by the name that the parameter is a substring of.
     * @param {String} opts.maxResults2 Pagination of results. Specifies the maximum number of results to return. Will return less results if there are no more results left.
     * @param {String} opts.sortOrder Sort the results in a given order. Values may be asc for ascending order or desc for descending order. Must be used in conjunction with the sortBy parameter.
     * @param {String} opts.name Filter by the name of the filter.
     * @param {String} opts.firstResult2 Pagination of results. Specifies the index of the first result to return.
     * @param {String} opts.sortBy Sort the results lexicographically by a given criterion. Valid values are filterId, firstName, lastName and email. Must be used in conjunction with the sortOrder parameter.
     * @param {String} opts.resourceType Filter by the resource type of the filter, e.g., Task.
     * @param {String} opts.itemCount2 If set to true, each filter result will contain an itemCount property with the number of items matched by the filter itself.
     * @param {module:api/FilterApi~getFiltersCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<Object>}
     */
			this.getFilters = function(opts, callback) {
				opts = opts || {};
				var postBody = null;


				var pathParams = {
				};
				var queryParams = {
					"itemCount": opts["itemCount"],
					"firstResult": opts["firstResult"],
					"maxResults": opts["maxResults"],
					"filterId": opts["filterId"],
					"owner": opts["owner"],
					"nameLike": opts["nameLike"],
					"maxResults2": opts["maxResults2"],
					"sortOrder": opts["sortOrder"],
					"name": opts["name"],
					"firstResult2": opts["firstResult2"],
					"sortBy": opts["sortBy"],
					"resourceType": opts["resourceType"],
					"itemCount2": opts["itemCount2"],
				};
				var collectionQueryParams = {
				};
				var headerParams = {
				};
				var formParams = {
				};

				var authNames = [];
				var contentTypes = [];
				var accepts = ["application/json"];
				var returnType = [Object];

				return this.apiClient.callApi(
					"/filter", "GET",
					pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
					authNames, contentTypes, accepts, returnType, callback
				);
			};

			/**
     * Callback function to receive the result of the getFiltersCount operation.
     * @callback module:api/FilterApi~getFiltersCountCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CountResultDto} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

			/**
     * Retrieves the number of filters that fulfill a provided query.
     * Retrieves the number of filters that fulfill a provided query. Corresponds to the size of the result set when using the Get Filters method.
     * @param {Object} opts Optional parameters
     * @param {String} opts.filterId Restrict to filters that have the given id.
     * @param {String} opts.owner Restrict to filters that the given user owns.
     * @param {String} opts.nameLike Restrict to filters that have a name with the given parameter value as substring.
     * @param {String} opts.name Restrict to filters that have the given name.
     * @param {String} opts.resourceType Restrict to filters that have the given resource type, e.g., Task.
     * @param {module:api/FilterApi~getFiltersCountCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CountResultDto}
     */
			this.getFiltersCount = function(opts, callback) {
				opts = opts || {};
				var postBody = null;


				var pathParams = {
				};
				var queryParams = {
					"filterId": opts["filterId"],
					"owner": opts["owner"],
					"nameLike": opts["nameLike"],
					"name": opts["name"],
					"resourceType": opts["resourceType"],
				};
				var collectionQueryParams = {
				};
				var headerParams = {
				};
				var formParams = {
				};

				var authNames = [];
				var contentTypes = [];
				var accepts = ["application/json"];
				var returnType = CountResultDto;

				return this.apiClient.callApi(
					"/filter/count", "GET",
					pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
					authNames, contentTypes, accepts, returnType, callback
				);
			};

			/**
     * Callback function to receive the result of the queryCount operation.
     * @callback module:api/FilterApi~queryCountCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CountResultDto} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

			/**
     * Executes the saved query of the filter by id and returns the count.
     * Executes the saved query of the filter by id and returns the count. This method is slightly more powerful then the Get Execute Filter Count method because it allows to extend the saved query of the filter.The request body of this method takes a JSON-serialized query. Some query types (e.g., task queries) allow to specify EL expressions in their parameters and may therefore be abused for remote code execution. See the section on security considerations for custom code in the user guide for details.
     * @param {String} id Parameter filterId
     * @param {Object} opts Optional parameters
     * @param {String} opts.body Parameter extendingQuery
     * @param {module:api/FilterApi~queryCountCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CountResultDto}
     */
			this.queryCount = function(id, opts, callback) {
				opts = opts || {};
				var postBody = opts["body"];

				// verify the required parameter 'id' is set
				if (id === undefined || id === null) {
					throw new Error("Missing the required parameter 'id' when calling queryCount");
				}


				var pathParams = {
					"id": id
				};
				var queryParams = {
				};
				var collectionQueryParams = {
				};
				var headerParams = {
				};
				var formParams = {
				};

				var authNames = [];
				var contentTypes = ["application/json"];
				var accepts = ["application/json"];
				var returnType = CountResultDto;

				return this.apiClient.callApi(
					"/filter/{id}/count", "POST",
					pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
					authNames, contentTypes, accepts, returnType, callback
				);
			};

			/**
     * Callback function to receive the result of the queryList operation.
     * @callback module:api/FilterApi~queryListCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

			/**
     * Executes the saved query of the filter by id and returns the result list.
     * Executes the saved query of the filter by id and returns the result list. This method is slightly more powerful then the Get Execute Filter List method because it allows to extend the saved query of the filter.The request body of this method takes a JSON-serialized query. Some query types (e.g., task queries) allow to specify EL expressions in their parameters and may therefore be abused for remote code execution. See the section on security considerations for custom code in the user guide for details.
     * @param {String} id Parameter filterId
     * @param {Object} opts Optional parameters
     * @param {String} opts.body Parameter extendingQuery
     * @param {Number} opts.firstResult Parameter firstResult
     * @param {Number} opts.maxResults Parameter maxResults
     * @param {module:api/FilterApi~queryListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
			this.queryList = function(id, opts, callback) {
				opts = opts || {};
				var postBody = opts["body"];

				// verify the required parameter 'id' is set
				if (id === undefined || id === null) {
					throw new Error("Missing the required parameter 'id' when calling queryList");
				}


				var pathParams = {
					"id": id
				};
				var queryParams = {
					"firstResult": opts["firstResult"],
					"maxResults": opts["maxResults"],
				};
				var collectionQueryParams = {
				};
				var headerParams = {
				};
				var formParams = {
				};

				var authNames = [];
				var contentTypes = ["application/json"];
				var accepts = ["application/json", "application/hal+json"];
				var returnType = Object;

				return this.apiClient.callApi(
					"/filter/{id}/list", "POST",
					pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
					authNames, contentTypes, accepts, returnType, callback
				);
			};

			/**
     * Callback function to receive the result of the querySingleResult operation.
     * @callback module:api/FilterApi~querySingleResultCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

			/**
     * Executes the saved query of the filter by id and returns the single result.
     * Executes the saved query of the filter by id and returns the single result. This method is slightly more powerful then the Get Execute Filter Single Result method because it allows to extend the saved query of the filter.The request body of this method takes a JSON-serialized query. Some query types (e.g., task queries) allow to specify EL expressions in their parameters and may therefore be abused for remote code execution. See the section on security considerations for custom code in the user guide for details.
     * @param {String} id Parameter filterId
     * @param {Object} opts Optional parameters
     * @param {String} opts.body Parameter extendingQuery
     * @param {module:api/FilterApi~querySingleResultCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
			this.querySingleResult = function(id, opts, callback) {
				opts = opts || {};
				var postBody = opts["body"];

				// verify the required parameter 'id' is set
				if (id === undefined || id === null) {
					throw new Error("Missing the required parameter 'id' when calling querySingleResult");
				}


				var pathParams = {
					"id": id
				};
				var queryParams = {
				};
				var collectionQueryParams = {
				};
				var headerParams = {
				};
				var formParams = {
				};

				var authNames = [];
				var contentTypes = ["application/json"];
				var accepts = ["application/json", "application/hal+json"];
				var returnType = Object;

				return this.apiClient.callApi(
					"/filter/{id}/singleResult", "POST",
					pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
					authNames, contentTypes, accepts, returnType, callback
				);
			};

			/**
     * Callback function to receive the result of the updateFilter operation.
     * @callback module:api/FilterApi~updateFilterCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

			/**
     * Updates an existing filter.
     * Updates an existing filter.The &#x60;query&#x60; parameter of the request body takes a JSON-serialized query. Some query types (e.g., task queries) allow to specify EL expressions in their parameters and may therefore be abused for remote code execution. See the section on security considerations for custom code in the user guide for details.
     * @param {String} id Parameter filterId
     * @param {Object} opts Optional parameters
     * @param {module:model/FilterDto} opts.body Parameter filterDto
     * @param {module:api/FilterApi~updateFilterCallback} callback The callback function, accepting three arguments: error, data, response
     */
			this.updateFilter = function(id, opts, callback) {
				opts = opts || {};
				var postBody = opts["body"];

				// verify the required parameter 'id' is set
				if (id === undefined || id === null) {
					throw new Error("Missing the required parameter 'id' when calling updateFilter");
				}


				var pathParams = {
					"id": id
				};
				var queryParams = {
				};
				var collectionQueryParams = {
				};
				var headerParams = {
				};
				var formParams = {
				};

				var authNames = [];
				var contentTypes = ["application/json"];
				var accepts = ["application/json"];
				var returnType = null;

				return this.apiClient.callApi(
					"/filter/{id}", "PUT",
					pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
					authNames, contentTypes, accepts, returnType, callback
				);
			};
		};

		return exports;
	}));

},{"../ApiClient":16,"../model/CountResultDto":62,"../model/FilterDto":80,"../model/ResourceOptionsDto":116}],26:[function(require,module,exports){
/**
 * Camunda REST API
 * Swagger OpenApi Spec for Camunda REST API.
 *
 * OpenAPI spec version: v7.8.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.3.1
 *
 * Do not edit the class manually.
 *
 */

	(function(root, factory) {
		if (typeof define === "function" && define.amd) {
			// AMD. Register as an anonymous module.
			define(["ApiClient", "model/CountResultDto", "model/GroupDto", "model/ResourceOptionsDto"], factory);
		} else if (typeof module === "object" && module.exports) {
			// CommonJS-like environments that support module.exports, like Node.
			module.exports = factory(require("../ApiClient"), require("../model/CountResultDto"), require("../model/GroupDto"), require("../model/ResourceOptionsDto"));
		} else {
			// Browser globals (root is window)
			if (!root.CamundaRestApi) {
				root.CamundaRestApi = {};
			}
			root.CamundaRestApi.GroupApi = factory(root.CamundaRestApi.ApiClient, root.CamundaRestApi.CountResultDto, root.CamundaRestApi.GroupDto, root.CamundaRestApi.ResourceOptionsDto);
		}
	}(this, function(ApiClient, CountResultDto, GroupDto, ResourceOptionsDto) {
		"use strict";

		/**
   * Group service.
   * @module api/GroupApi
   * @version v7.8.0
   */

		/**
   * Constructs a new GroupApi.
   * @alias module:api/GroupApi
   * @class
   * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
		var exports = function(apiClient) {
			this.apiClient = apiClient || ApiClient.instance;


			/**
     * Callback function to receive the result of the availableOperations operation.
     * @callback module:api/GroupApi~availableOperationsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ResourceOptionsDto} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

			/**
     * The &#x60;/group&#x60; resource supports two custom OPTIONS requests, one for the resource as such and one for individual group instances.
     * The &#x60;/group&#x60; resource supports two custom OPTIONS requests, one for the resource as such and one for individual group instances. The OPTIONS request allows checking for the set of available operations that the currently authenticated user can perform on the &#x60;/group&#x60; resource. If the user can perform an operation or not may depend on various things, including the users authorizations to interact with this resource and the internal context of the process engine.
     * @param {module:api/GroupApi~availableOperationsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ResourceOptionsDto}
     */
			this.availableOperations = function(callback) {
				var postBody = null;


				var pathParams = {
				};
				var queryParams = {
				};
				var collectionQueryParams = {
				};
				var headerParams = {
				};
				var formParams = {
				};

				var authNames = [];
				var contentTypes = [];
				var accepts = ["application/json"];
				var returnType = ResourceOptionsDto;

				return this.apiClient.callApi(
					"/group", "OPTIONS",
					pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
					authNames, contentTypes, accepts, returnType, callback
				);
			};

			/**
     * Callback function to receive the result of the availableOperations_0 operation.
     * @callback module:api/GroupApi~availableOperations_0Callback
     * @param {String} error Error message, if any.
     * @param {module:model/ResourceOptionsDto} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

			/**
     * The &#x60;/group&#x60; resource supports two custom OPTIONS requests, one for the resource as such and one for individual group instances.
     * The &#x60;/group&#x60; resource supports two custom OPTIONS requests, one for the resource as such and one for individual group instances. The OPTIONS request allows checking for the set of available operations that the currently authenticated user can perform on the &#x60;/group&#x60; resource. If the user can perform an operation or not may depend on various things, including the users authorizations to interact with this resource and the internal context of the process engine.
     * @param {String} id Parameter id
     * @param {module:api/GroupApi~availableOperations_0Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ResourceOptionsDto}
     */
			this.availableOperations_0 = function(id, callback) {
				var postBody = null;

				// verify the required parameter 'id' is set
				if (id === undefined || id === null) {
					throw new Error("Missing the required parameter 'id' when calling availableOperations_0");
				}


				var pathParams = {
					"id": id
				};
				var queryParams = {
				};
				var collectionQueryParams = {
				};
				var headerParams = {
				};
				var formParams = {
				};

				var authNames = [];
				var contentTypes = [];
				var accepts = ["application/json"];
				var returnType = ResourceOptionsDto;

				return this.apiClient.callApi(
					"/group/{id}", "OPTIONS",
					pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
					authNames, contentTypes, accepts, returnType, callback
				);
			};

			/**
     * Callback function to receive the result of the availableOperations_1 operation.
     * @callback module:api/GroupApi~availableOperations_1Callback
     * @param {String} error Error message, if any.
     * @param {module:model/ResourceOptionsDto} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

			/**
     * The OPTIONS request allows checking for the set of available operations that the currently authenticated user can perform on the resource.
     * The OPTIONS request allows checking for the set of available operations that the currently authenticated user can perform on the resource. If the user can perform an operation or not may depend on various things, including the users authorizations to interact with this resource and the internal context of the process engine.
     * @param {String} id Parameter id
     * @param {module:api/GroupApi~availableOperations_1Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ResourceOptionsDto}
     */
			this.availableOperations_1 = function(id, callback) {
				var postBody = null;

				// verify the required parameter 'id' is set
				if (id === undefined || id === null) {
					throw new Error("Missing the required parameter 'id' when calling availableOperations_1");
				}


				var pathParams = {
					"id": id
				};
				var queryParams = {
				};
				var collectionQueryParams = {
				};
				var headerParams = {
				};
				var formParams = {
				};

				var authNames = [];
				var contentTypes = [];
				var accepts = ["application/json"];
				var returnType = ResourceOptionsDto;

				return this.apiClient.callApi(
					"/group/{id}/members", "OPTIONS",
					pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
					authNames, contentTypes, accepts, returnType, callback
				);
			};

			/**
     * Callback function to receive the result of the createGroup operation.
     * @callback module:api/GroupApi~createGroupCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

			/**
     * Creates a new group.
     * Creates a new group.
     * @param {Object} opts Optional parameters
     * @param {module:model/GroupDto} opts.body Parameter GroupDto
     * @param {module:api/GroupApi~createGroupCallback} callback The callback function, accepting three arguments: error, data, response
     */
			this.createGroup = function(opts, callback) {
				opts = opts || {};
				var postBody = opts["body"];


				var pathParams = {
				};
				var queryParams = {
				};
				var collectionQueryParams = {
				};
				var headerParams = {
				};
				var formParams = {
				};

				var authNames = [];
				var contentTypes = ["application/json"];
				var accepts = ["application/json"];
				var returnType = null;

				return this.apiClient.callApi(
					"/group/create", "POST",
					pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
					authNames, contentTypes, accepts, returnType, callback
				);
			};

			/**
     * Callback function to receive the result of the createGroupMember operation.
     * @callback module:api/GroupApi~createGroupMemberCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

			/**
     * Adds a member to a group.
     * Adds a member to a group.
     * @param {String} userId Parameter userId
     * @param {String} id Parameter id
     * @param {module:api/GroupApi~createGroupMemberCallback} callback The callback function, accepting three arguments: error, data, response
     */
			this.createGroupMember = function(userId, id, callback) {
				var postBody = null;

				// verify the required parameter 'userId' is set
				if (userId === undefined || userId === null) {
					throw new Error("Missing the required parameter 'userId' when calling createGroupMember");
				}

				// verify the required parameter 'id' is set
				if (id === undefined || id === null) {
					throw new Error("Missing the required parameter 'id' when calling createGroupMember");
				}


				var pathParams = {
					"userId": userId,
					"id": id
				};
				var queryParams = {
				};
				var collectionQueryParams = {
				};
				var headerParams = {
				};
				var formParams = {
				};

				var authNames = [];
				var contentTypes = [];
				var accepts = ["application/json"];
				var returnType = null;

				return this.apiClient.callApi(
					"/group/{id}/members/{userId}", "PUT",
					pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
					authNames, contentTypes, accepts, returnType, callback
				);
			};

			/**
     * Callback function to receive the result of the deleteGroup operation.
     * @callback module:api/GroupApi~deleteGroupCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

			/**
     * Deletes a group by id.
     * Deletes a group by id.
     * @param {String} id Parameter id
     * @param {module:api/GroupApi~deleteGroupCallback} callback The callback function, accepting three arguments: error, data, response
     */
			this.deleteGroup = function(id, callback) {
				var postBody = null;

				// verify the required parameter 'id' is set
				if (id === undefined || id === null) {
					throw new Error("Missing the required parameter 'id' when calling deleteGroup");
				}


				var pathParams = {
					"id": id
				};
				var queryParams = {
				};
				var collectionQueryParams = {
				};
				var headerParams = {
				};
				var formParams = {
				};

				var authNames = [];
				var contentTypes = [];
				var accepts = ["application/json"];
				var returnType = null;

				return this.apiClient.callApi(
					"/group/{id}", "DELETE",
					pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
					authNames, contentTypes, accepts, returnType, callback
				);
			};

			/**
     * Callback function to receive the result of the deleteGroupMember operation.
     * @callback module:api/GroupApi~deleteGroupMemberCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

			/**
     * Removes a member from a group.
     * Removes a member from a group.
     * @param {String} userId Parameter userId
     * @param {String} id Parameter id
     * @param {module:api/GroupApi~deleteGroupMemberCallback} callback The callback function, accepting three arguments: error, data, response
     */
			this.deleteGroupMember = function(userId, id, callback) {
				var postBody = null;

				// verify the required parameter 'userId' is set
				if (userId === undefined || userId === null) {
					throw new Error("Missing the required parameter 'userId' when calling deleteGroupMember");
				}

				// verify the required parameter 'id' is set
				if (id === undefined || id === null) {
					throw new Error("Missing the required parameter 'id' when calling deleteGroupMember");
				}


				var pathParams = {
					"userId": userId,
					"id": id
				};
				var queryParams = {
				};
				var collectionQueryParams = {
				};
				var headerParams = {
				};
				var formParams = {
				};

				var authNames = [];
				var contentTypes = [];
				var accepts = ["application/json"];
				var returnType = null;

				return this.apiClient.callApi(
					"/group/{id}/members/{userId}", "DELETE",
					pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
					authNames, contentTypes, accepts, returnType, callback
				);
			};

			/**
     * Callback function to receive the result of the getGroup operation.
     * @callback module:api/GroupApi~getGroupCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

			/**
     * Retrieves a group by id.
     * Retrieves a group by id.
     * @param {String} id Parameter id
     * @param {module:api/GroupApi~getGroupCallback} callback The callback function, accepting three arguments: error, data, response
     */
			this.getGroup = function(id, callback) {
				var postBody = null;

				// verify the required parameter 'id' is set
				if (id === undefined || id === null) {
					throw new Error("Missing the required parameter 'id' when calling getGroup");
				}


				var pathParams = {
					"id": id
				};
				var queryParams = {
				};
				var collectionQueryParams = {
				};
				var headerParams = {
				};
				var formParams = {
				};

				var authNames = [];
				var contentTypes = [];
				var accepts = ["application/json"];
				var returnType = null;

				return this.apiClient.callApi(
					"/group/{id}", "GET",
					pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
					authNames, contentTypes, accepts, returnType, callback
				);
			};

			/**
     * Callback function to receive the result of the getGroupCount operation.
     * @callback module:api/GroupApi~getGroupCountCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CountResultDto} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

			/**
     * Queries for groups using a list of parameters and retrieves the count.
     * Queries for groups using a list of parameters and retrieves the count.
     * @param {Object} opts Optional parameters
     * @param {String} opts.nameLike Filter by the name that the parameter is a substring of.
     * @param {String} opts.name Filter by the name of the group.
     * @param {String} opts.member Only retrieve groups where the given user id is a member of.
     * @param {String} opts.id Filter by the id of the group.
     * @param {String} opts.type Filter by the type of the group.
     * @param {String} opts.memberOfTenant Only retrieve groups which are members of the given tenant.
     * @param {module:api/GroupApi~getGroupCountCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CountResultDto}
     */
			this.getGroupCount = function(opts, callback) {
				opts = opts || {};
				var postBody = null;


				var pathParams = {
				};
				var queryParams = {
					"nameLike": opts["nameLike"],
					"name": opts["name"],
					"member": opts["member"],
					"id": opts["id"],
					"type": opts["type"],
					"memberOfTenant": opts["memberOfTenant"],
				};
				var collectionQueryParams = {
				};
				var headerParams = {
				};
				var formParams = {
				};

				var authNames = [];
				var contentTypes = [];
				var accepts = ["application/json"];
				var returnType = CountResultDto;

				return this.apiClient.callApi(
					"/group/count", "GET",
					pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
					authNames, contentTypes, accepts, returnType, callback
				);
			};

			/**
     * Callback function to receive the result of the getGroupMembersResource operation.
     * @callback module:api/GroupApi~getGroupMembersResourceCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

			/**
     * Get Group Members Resource.
     * Get Group Members Resource
     * @param {String} id Parameter id
     * @param {module:api/GroupApi~getGroupMembersResourceCallback} callback The callback function, accepting three arguments: error, data, response
     */
			this.getGroupMembersResource = function(id, callback) {
				var postBody = null;

				// verify the required parameter 'id' is set
				if (id === undefined || id === null) {
					throw new Error("Missing the required parameter 'id' when calling getGroupMembersResource");
				}


				var pathParams = {
					"id": id
				};
				var queryParams = {
				};
				var collectionQueryParams = {
				};
				var headerParams = {
				};
				var formParams = {
				};

				var authNames = [];
				var contentTypes = [];
				var accepts = ["application/json"];
				var returnType = null;

				return this.apiClient.callApi(
					"/group/{id}/members", "GET",
					pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
					authNames, contentTypes, accepts, returnType, callback
				);
			};

			/**
     * Callback function to receive the result of the queryGroups operation.
     * @callback module:api/GroupApi~queryGroupsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<Object>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

			/**
     * Queries for a list of groups using a list of parameters.
     * Queries for a list of groups using a list of parameters. The size of the result set can be retrieved by using the Get Group Count method.
     * @param {Object} opts Optional parameters
     * @param {Number} opts.firstResult Parameter firstResult
     * @param {Number} opts.maxResults Parameter maxResults
     * @param {String} opts.nameLike Filter by the name that the parameter is a substring of.
     * @param {String} opts.maxResults2 Pagination of results. Specifies the maximum number of results to return. Will return less results if there are no more results left.
     * @param {String} opts.sortOrder Sort the results in a given order. Values may be asc for ascending order or desc for descending order. Must be used in conjunction with the sortBy parameter.
     * @param {String} opts.name Filter by the name of the group.
     * @param {String} opts.member Only retrieve groups which the given user id is a member of.
     * @param {String} opts.firstResult2 Pagination of results. Specifies the index of the first result to return.
     * @param {String} opts.sortBy Sort the results lexicographically by a given criterion. Valid values are id, name and type. Must be used in conjunction with the sortOrder parameter.
     * @param {String} opts.id Filter by the id of the group.
     * @param {String} opts.type Filter by the type of the group.
     * @param {String} opts.memberOfTenant Only retrieve groups which are members of the given tenant.
     * @param {module:api/GroupApi~queryGroupsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<Object>}
     */
			this.queryGroups = function(opts, callback) {
				opts = opts || {};
				var postBody = null;


				var pathParams = {
				};
				var queryParams = {
					"firstResult": opts["firstResult"],
					"maxResults": opts["maxResults"],
					"nameLike": opts["nameLike"],
					"maxResults2": opts["maxResults2"],
					"sortOrder": opts["sortOrder"],
					"name": opts["name"],
					"member": opts["member"],
					"firstResult2": opts["firstResult2"],
					"sortBy": opts["sortBy"],
					"id": opts["id"],
					"type": opts["type"],
					"memberOfTenant": opts["memberOfTenant"],
				};
				var collectionQueryParams = {
				};
				var headerParams = {
				};
				var formParams = {
				};

				var authNames = [];
				var contentTypes = [];
				var accepts = ["application/json"];
				var returnType = [Object];

				return this.apiClient.callApi(
					"/group", "GET",
					pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
					authNames, contentTypes, accepts, returnType, callback
				);
			};

			/**
     * Callback function to receive the result of the updateGroup operation.
     * @callback module:api/GroupApi~updateGroupCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

			/**
     * Updates a given group by id.
     * Updates a given group by id.
     * @param {String} id Parameter id
     * @param {Object} opts Optional parameters
     * @param {module:model/GroupDto} opts.body Parameter Group
     * @param {module:api/GroupApi~updateGroupCallback} callback The callback function, accepting three arguments: error, data, response
     */
			this.updateGroup = function(id, opts, callback) {
				opts = opts || {};
				var postBody = opts["body"];

				// verify the required parameter 'id' is set
				if (id === undefined || id === null) {
					throw new Error("Missing the required parameter 'id' when calling updateGroup");
				}


				var pathParams = {
					"id": id
				};
				var queryParams = {
				};
				var collectionQueryParams = {
				};
				var headerParams = {
				};
				var formParams = {
				};

				var authNames = [];
				var contentTypes = ["application/json"];
				var accepts = ["application/json"];
				var returnType = null;

				return this.apiClient.callApi(
					"/group/{id}", "PUT",
					pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
					authNames, contentTypes, accepts, returnType, callback
				);
			};
		};

		return exports;
	}));

},{"../ApiClient":16,"../model/CountResultDto":62,"../model/GroupDto":82,"../model/ResourceOptionsDto":116}],27:[function(require,module,exports){
/**
 * Camunda REST API
 * Swagger OpenApi Spec for Camunda REST API.
 *
 * OpenAPI spec version: v7.8.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.3.1
 *
 * Do not edit the class manually.
 *
 */

	(function(root, factory) {
		if (typeof define === "function" && define.amd) {
			// AMD. Register as an anonymous module.
			define(["ApiClient", "model/AuthenticationResult", "model/BasicUserCredentialsDto", "model/GroupInfoDto"], factory);
		} else if (typeof module === "object" && module.exports) {
			// CommonJS-like environments that support module.exports, like Node.
			module.exports = factory(require("../ApiClient"), require("../model/AuthenticationResult"), require("../model/BasicUserCredentialsDto"), require("../model/GroupInfoDto"));
		} else {
			// Browser globals (root is window)
			if (!root.CamundaRestApi) {
				root.CamundaRestApi = {};
			}
			root.CamundaRestApi.IdentityApi = factory(root.CamundaRestApi.ApiClient, root.CamundaRestApi.AuthenticationResult, root.CamundaRestApi.BasicUserCredentialsDto, root.CamundaRestApi.GroupInfoDto);
		}
	}(this, function(ApiClient, AuthenticationResult, BasicUserCredentialsDto, GroupInfoDto) {
		"use strict";

		/**
   * Identity service.
   * @module api/IdentityApi
   * @version v7.8.0
   */

		/**
   * Constructs a new IdentityApi.
   * @alias module:api/IdentityApi
   * @class
   * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
		var exports = function(apiClient) {
			this.apiClient = apiClient || ApiClient.instance;


			/**
     * Callback function to receive the result of the getGroupInfo operation.
     * @callback module:api/IdentityApi~getGroupInfoCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GroupInfoDto} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

			/**
     * Gets the groups of a user by id and includes all users that share a group with the given user.
     * Gets the groups of a user by id and includes all users that share a group with the given user.
     * @param {Object} opts Optional parameters
     * @param {String} opts.userId Parameter userId
     * @param {module:api/IdentityApi~getGroupInfoCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GroupInfoDto}
     */
			this.getGroupInfo = function(opts, callback) {
				opts = opts || {};
				var postBody = null;


				var pathParams = {
				};
				var queryParams = {
					"userId": opts["userId"],
				};
				var collectionQueryParams = {
				};
				var headerParams = {
				};
				var formParams = {
				};

				var authNames = [];
				var contentTypes = [];
				var accepts = ["application/json"];
				var returnType = GroupInfoDto;

				return this.apiClient.callApi(
					"/identity/groups", "GET",
					pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
					authNames, contentTypes, accepts, returnType, callback
				);
			};

			/**
     * Callback function to receive the result of the verifyUser operation.
     * @callback module:api/IdentityApi~verifyUserCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AuthenticationResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

			/**
     * Verifies that user credentials are valid.
     * Verifies that user credentials are valid.
     * @param {Object} opts Optional parameters
     * @param {module:model/BasicUserCredentialsDto} opts.body Parameter credentialsDto
     * @param {module:api/IdentityApi~verifyUserCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AuthenticationResult}
     */
			this.verifyUser = function(opts, callback) {
				opts = opts || {};
				var postBody = opts["body"];


				var pathParams = {
				};
				var queryParams = {
				};
				var collectionQueryParams = {
				};
				var headerParams = {
				};
				var formParams = {
				};

				var authNames = [];
				var contentTypes = ["application/json"];
				var accepts = ["application/json"];
				var returnType = AuthenticationResult;

				return this.apiClient.callApi(
					"/identity/verify", "POST",
					pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
					authNames, contentTypes, accepts, returnType, callback
				);
			};
		};

		return exports;
	}));

},{"../ApiClient":16,"../model/AuthenticationResult":45,"../model/BasicUserCredentialsDto":49,"../model/GroupInfoDto":83}],28:[function(require,module,exports){
/**
 * Camunda REST API
 * Swagger OpenApi Spec for Camunda REST API.
 *
 * OpenAPI spec version: v7.8.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.3.1
 *
 * Do not edit the class manually.
 *
 */

	(function(root, factory) {
		if (typeof define === "function" && define.amd) {
			// AMD. Register as an anonymous module.
			define(["ApiClient", "model/CountResultDto", "model/JobDefinitionPriorityDto", "model/JobDefinitionQueryDto", "model/JobDefinitionSuspensionStateDto", "model/RetriesDto"], factory);
		} else if (typeof module === "object" && module.exports) {
			// CommonJS-like environments that support module.exports, like Node.
			module.exports = factory(require("../ApiClient"), require("../model/CountResultDto"), require("../model/JobDefinitionPriorityDto"), require("../model/JobDefinitionQueryDto"), require("../model/JobDefinitionSuspensionStateDto"), require("../model/RetriesDto"));
		} else {
			// Browser globals (root is window)
			if (!root.CamundaRestApi) {
				root.CamundaRestApi = {};
			}
			root.CamundaRestApi.JobDefinitionApi = factory(root.CamundaRestApi.ApiClient, root.CamundaRestApi.CountResultDto, root.CamundaRestApi.JobDefinitionPriorityDto, root.CamundaRestApi.JobDefinitionQueryDto, root.CamundaRestApi.JobDefinitionSuspensionStateDto, root.CamundaRestApi.RetriesDto);
		}
	}(this, function(ApiClient, CountResultDto, JobDefinitionPriorityDto, JobDefinitionQueryDto, JobDefinitionSuspensionStateDto, RetriesDto) {
		"use strict";

		/**
   * JobDefinition service.
   * @module api/JobDefinitionApi
   * @version v7.8.0
   */

		/**
   * Constructs a new JobDefinitionApi.
   * @alias module:api/JobDefinitionApi
   * @class
   * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
		var exports = function(apiClient) {
			this.apiClient = apiClient || ApiClient.instance;


			/**
     * Callback function to receive the result of the getJobDefinition operation.
     * @callback module:api/JobDefinitionApi~getJobDefinitionCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

			/**
     * Retrieves a job definition by id, according to the &#x60;JobDefinition&#x60; interface in the engine.
     * Retrieves a job definition by id, according to the &#x60;JobDefinition&#x60; interface in the engine.
     * @param {String} id Parameter jobDefinitionId
     * @param {module:api/JobDefinitionApi~getJobDefinitionCallback} callback The callback function, accepting three arguments: error, data, response
     */
			this.getJobDefinition = function(id, callback) {
				var postBody = null;

				// verify the required parameter 'id' is set
				if (id === undefined || id === null) {
					throw new Error("Missing the required parameter 'id' when calling getJobDefinition");
				}


				var pathParams = {
					"id": id
				};
				var queryParams = {
				};
				var collectionQueryParams = {
				};
				var headerParams = {
				};
				var formParams = {
				};

				var authNames = [];
				var contentTypes = [];
				var accepts = ["application/json"];
				var returnType = null;

				return this.apiClient.callApi(
					"/job-definition/{id}", "GET",
					pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
					authNames, contentTypes, accepts, returnType, callback
				);
			};

			/**
     * Callback function to receive the result of the getJobDefinitions operation.
     * @callback module:api/JobDefinitionApi~getJobDefinitionsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<Object>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

			/**
     * Queries for job definitions that fulfill given parameters.
     * Queries for job definitions that fulfill given parameters. The size of the result set can be retrieved by using the Get Job Definition Count method.
     * @param {Object} opts Optional parameters
     * @param {Number} opts.firstResult Parameter firstResult
     * @param {Number} opts.maxResults Parameter maxResults
     * @param {String} opts.processDefinitionId Only include job definitions which exist for the given process definition id.
     * @param {String} opts.jobDefinitionId Filter by job definition id.
     * @param {String} opts.withOverridingJobPriority Only include job definitions that have an overriding job priority defined. The only effective value is true. If set to false, this filter is not applied.
     * @param {String} opts.active Only include active job definitions. Value may only be true, as false is the default behavior.
     * @param {String} opts.suspended Only include suspended job definitions. Value may only be true, as false is the default behavior.
     * @param {String} opts.processDefinitionKey Only include job definitions which exist for the given process definition key.
     * @param {String} opts.includeJobDefinitionsWithoutTenantId Include job definitions which belong to no tenant. Can be used in combination with tenantIdIn. Value may only be true, as false is the default behavior.
     * @param {String} opts.tenantIdIn Only include job definitions which belong to one of the passed and comma-separated tenant ids.
     * @param {String} opts.sortOrder Sort the results in a given order. Values may be asc for ascending order or desc for descending order. Must be used in conjunction with the sortBy parameter.
     * @param {String} opts.withoutTenantId Only include job definitions which belong to no tenant. Value may only be true, as false is the default behavior.
     * @param {String} opts.sortBy Sort the results lexicographically by a given criterion. Valid values are jobDefinitionId, activityId, processDefinitionId, processDefinitionKey, jobType, jobConfiguration and tenantId. Must be used in conjunction with the sortOrder parameter.
     * @param {String} opts.jobConfiguration Only include job definitions which exist for the given job context. For example: for timer jobs it is the timer context.
     * @param {String} opts.jobType Only include job definitions which exist for the given job type. See the User Guide for more information about job types.
     * @param {String} opts.activityIdIn Only include job definitions which belong to one of the passed and comma-separated activity ids.
     * @param {module:api/JobDefinitionApi~getJobDefinitionsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<Object>}
     */
			this.getJobDefinitions = function(opts, callback) {
				opts = opts || {};
				var postBody = null;


				var pathParams = {
				};
				var queryParams = {
					"firstResult": opts["firstResult"],
					"maxResults": opts["maxResults"],
					"processDefinitionId": opts["processDefinitionId"],
					"jobDefinitionId": opts["jobDefinitionId"],
					"withOverridingJobPriority": opts["withOverridingJobPriority"],
					"active": opts["active"],
					"suspended": opts["suspended"],
					"processDefinitionKey": opts["processDefinitionKey"],
					"includeJobDefinitionsWithoutTenantId": opts["includeJobDefinitionsWithoutTenantId"],
					"tenantIdIn": opts["tenantIdIn"],
					"sortOrder": opts["sortOrder"],
					"withoutTenantId": opts["withoutTenantId"],
					"sortBy": opts["sortBy"],
					"jobConfiguration": opts["jobConfiguration"],
					"jobType": opts["jobType"],
					"activityIdIn": opts["activityIdIn"],
				};
				var collectionQueryParams = {
				};
				var headerParams = {
				};
				var formParams = {
				};

				var authNames = [];
				var contentTypes = [];
				var accepts = ["application/json"];
				var returnType = [Object];

				return this.apiClient.callApi(
					"/job-definition", "GET",
					pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
					authNames, contentTypes, accepts, returnType, callback
				);
			};

			/**
     * Callback function to receive the result of the getJobDefinitionsCount operation.
     * @callback module:api/JobDefinitionApi~getJobDefinitionsCountCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CountResultDto} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

			/**
     * Queries for the number of job definitions that fulfill given parameters.
     * Queries for the number of job definitions that fulfill given parameters. Takes the same parameters as the Get Job Definitions method.
     * @param {Object} opts Optional parameters
     * @param {String} opts.processDefinitionId Only include job definitions which exist for the given process definition id.
     * @param {String} opts.jobDefinitionId Filter by job definition id.
     * @param {String} opts.includeJobDefinitionsWithoutTenantId Include job definitions which belong to no tenant. Can be used in combination with tenantIdIn. Value may only be true, as false is the default behavior.
     * @param {String} opts.tenantIdIn Only include job definitions which belong to one of the passed and comma-separated tenant ids.
     * @param {String} opts.withOverridingJobPriority Only include job definitions that have an overriding job priority defined. The only effective value is true. If set to false, this filter is not applied.
     * @param {String} opts.active Only include active job definitions. Value may only be true, as false is the default behavior.
     * @param {String} opts.withoutTenantId Only include job definitions which belong to no tenant. Value may only be true, as false is the default behavior.
     * @param {String} opts.jobConfiguration Only include job definitions which exist for the given job context. For example: for timer jobs it is the timer context.
     * @param {String} opts.jobType Only include job definitions which exist for the given job type. See the User Guide for more information about job types.
     * @param {String} opts.suspended Only include suspended job definitions. Value may only be true, as false is the default behavior.
     * @param {String} opts.activityIdIn Only include job definitions which belong to one of the passed and comma-separated activity ids.
     * @param {String} opts.processDefinitionKey Only include job definitions which exist for the given process definition key.
     * @param {module:api/JobDefinitionApi~getJobDefinitionsCountCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CountResultDto}
     */
			this.getJobDefinitionsCount = function(opts, callback) {
				opts = opts || {};
				var postBody = null;


				var pathParams = {
				};
				var queryParams = {
					"processDefinitionId": opts["processDefinitionId"],
					"jobDefinitionId": opts["jobDefinitionId"],
					"includeJobDefinitionsWithoutTenantId": opts["includeJobDefinitionsWithoutTenantId"],
					"tenantIdIn": opts["tenantIdIn"],
					"withOverridingJobPriority": opts["withOverridingJobPriority"],
					"active": opts["active"],
					"withoutTenantId": opts["withoutTenantId"],
					"jobConfiguration": opts["jobConfiguration"],
					"jobType": opts["jobType"],
					"suspended": opts["suspended"],
					"activityIdIn": opts["activityIdIn"],
					"processDefinitionKey": opts["processDefinitionKey"],
				};
				var collectionQueryParams = {
				};
				var headerParams = {
				};
				var formParams = {
				};

				var authNames = [];
				var contentTypes = [];
				var accepts = ["application/json"];
				var returnType = CountResultDto;

				return this.apiClient.callApi(
					"/job-definition/count", "GET",
					pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
					authNames, contentTypes, accepts, returnType, callback
				);
			};

			/**
     * Callback function to receive the result of the queryJobDefinitions operation.
     * @callback module:api/JobDefinitionApi~queryJobDefinitionsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<Object>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

			/**
     * Queries for job definitions that fulfill given parameters.
     * Queries for job definitions that fulfill given parameters. This method is slightly more powerful than the Get Job Definitions method because it allows filtering by multiple job definitions of types String, Number or Boolean.
     * @param {Object} opts Optional parameters
     * @param {module:model/JobDefinitionQueryDto} opts.body Parameter queryDto
     * @param {Number} opts.firstResult Parameter firstResult
     * @param {Number} opts.maxResults Parameter maxResults
     * @param {module:api/JobDefinitionApi~queryJobDefinitionsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<Object>}
     */
			this.queryJobDefinitions = function(opts, callback) {
				opts = opts || {};
				var postBody = opts["body"];


				var pathParams = {
				};
				var queryParams = {
					"firstResult": opts["firstResult"],
					"maxResults": opts["maxResults"],
				};
				var collectionQueryParams = {
				};
				var headerParams = {
				};
				var formParams = {
				};

				var authNames = [];
				var contentTypes = ["application/json"];
				var accepts = ["application/json"];
				var returnType = [Object];

				return this.apiClient.callApi(
					"/job-definition", "POST",
					pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
					authNames, contentTypes, accepts, returnType, callback
				);
			};

			/**
     * Callback function to receive the result of the queryJobDefinitionsCount operation.
     * @callback module:api/JobDefinitionApi~queryJobDefinitionsCountCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CountResultDto} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

			/**
     * Queries for the number of job definitions that fulfill given parameters.
     * Queries for the number of job definitions that fulfill given parameters. This method takes the same message body as the Get Job Definitions (POST) method and therefore it is slightly more powerful than the Get Job Definition Count method.
     * @param {Object} opts Optional parameters
     * @param {module:model/JobDefinitionQueryDto} opts.body Parameter queryDto
     * @param {module:api/JobDefinitionApi~queryJobDefinitionsCountCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CountResultDto}
     */
			this.queryJobDefinitionsCount = function(opts, callback) {
				opts = opts || {};
				var postBody = opts["body"];


				var pathParams = {
				};
				var queryParams = {
				};
				var collectionQueryParams = {
				};
				var headerParams = {
				};
				var formParams = {
				};

				var authNames = [];
				var contentTypes = ["application/json"];
				var accepts = ["application/json"];
				var returnType = CountResultDto;

				return this.apiClient.callApi(
					"/job-definition/count", "POST",
					pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
					authNames, contentTypes, accepts, returnType, callback
				);
			};

			/**
     * Callback function to receive the result of the setJobPriority operation.
     * @callback module:api/JobDefinitionApi~setJobPriorityCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

			/**
     * Sets an overriding execution priority for jobs with the given definition id.
     * Sets an overriding execution priority for jobs with the given definition id. Optionally, the priorities of all the definition&#39;s existing jobs are updated accordingly. The priority can be reset by setting it to null, meaning that a new job&#39;s priority will not be determined based on its definition&#39;s priority any longer. See the user guide on job prioritization for details.
     * @param {String} id Parameter jobDefinitionId
     * @param {Object} opts Optional parameters
     * @param {module:model/JobDefinitionPriorityDto} opts.body Parameter dto
     * @param {module:api/JobDefinitionApi~setJobPriorityCallback} callback The callback function, accepting three arguments: error, data, response
     */
			this.setJobPriority = function(id, opts, callback) {
				opts = opts || {};
				var postBody = opts["body"];

				// verify the required parameter 'id' is set
				if (id === undefined || id === null) {
					throw new Error("Missing the required parameter 'id' when calling setJobPriority");
				}


				var pathParams = {
					"id": id
				};
				var queryParams = {
				};
				var collectionQueryParams = {
				};
				var headerParams = {
				};
				var formParams = {
				};

				var authNames = [];
				var contentTypes = ["application/json"];
				var accepts = ["application/json"];
				var returnType = null;

				return this.apiClient.callApi(
					"/job-definition/{id}/jobPriority", "PUT",
					pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
					authNames, contentTypes, accepts, returnType, callback
				);
			};

			/**
     * Callback function to receive the result of the setJobRetries operation.
     * @callback module:api/JobDefinitionApi~setJobRetriesCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

			/**
     * Sets the number of retries of all failed jobs associated with the given job definition id.
     * Sets the number of retries of all failed jobs associated with the given job definition id.
     * @param {String} id Parameter jobDefinitionId
     * @param {Object} opts Optional parameters
     * @param {module:model/RetriesDto} opts.body Parameter dto
     * @param {module:api/JobDefinitionApi~setJobRetriesCallback} callback The callback function, accepting three arguments: error, data, response
     */
			this.setJobRetries = function(id, opts, callback) {
				opts = opts || {};
				var postBody = opts["body"];

				// verify the required parameter 'id' is set
				if (id === undefined || id === null) {
					throw new Error("Missing the required parameter 'id' when calling setJobRetries");
				}


				var pathParams = {
					"id": id
				};
				var queryParams = {
				};
				var collectionQueryParams = {
				};
				var headerParams = {
				};
				var formParams = {
				};

				var authNames = [];
				var contentTypes = ["application/json"];
				var accepts = ["application/json"];
				var returnType = null;

				return this.apiClient.callApi(
					"/job-definition/{id}/retries", "PUT",
					pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
					authNames, contentTypes, accepts, returnType, callback
				);
			};

			/**
     * Callback function to receive the result of the updateSuspensionState operation.
     * @callback module:api/JobDefinitionApi~updateSuspensionStateCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

			/**
     * Activates or suspends job definitions with the given process definition id.
     * Activates or suspends job definitions with the given process definition id.
     * @param {Object} opts Optional parameters
     * @param {module:model/JobDefinitionSuspensionStateDto} opts.body Parameter dto
     * @param {module:api/JobDefinitionApi~updateSuspensionStateCallback} callback The callback function, accepting three arguments: error, data, response
     */
			this.updateSuspensionState = function(opts, callback) {
				opts = opts || {};
				var postBody = opts["body"];


				var pathParams = {
				};
				var queryParams = {
				};
				var collectionQueryParams = {
				};
				var headerParams = {
				};
				var formParams = {
				};

				var authNames = [];
				var contentTypes = ["application/json"];
				var accepts = ["application/json"];
				var returnType = null;

				return this.apiClient.callApi(
					"/job-definition/suspended", "PUT",
					pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
					authNames, contentTypes, accepts, returnType, callback
				);
			};

			/**
     * Callback function to receive the result of the updateSuspensionState_0 operation.
     * @callback module:api/JobDefinitionApi~updateSuspensionState_0Callback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

			/**
     * Activates or suspends a given job definition by id.
     * Activates or suspends a given job definition by id.
     * @param {String} id Parameter jobDefinitionId
     * @param {Object} opts Optional parameters
     * @param {module:model/JobDefinitionSuspensionStateDto} opts.body Parameter dto
     * @param {module:api/JobDefinitionApi~updateSuspensionState_0Callback} callback The callback function, accepting three arguments: error, data, response
     */
			this.updateSuspensionState_0 = function(id, opts, callback) {
				opts = opts || {};
				var postBody = opts["body"];

				// verify the required parameter 'id' is set
				if (id === undefined || id === null) {
					throw new Error("Missing the required parameter 'id' when calling updateSuspensionState_0");
				}


				var pathParams = {
					"id": id
				};
				var queryParams = {
				};
				var collectionQueryParams = {
				};
				var headerParams = {
				};
				var formParams = {
				};

				var authNames = [];
				var contentTypes = ["application/json"];
				var accepts = ["application/json"];
				var returnType = null;

				return this.apiClient.callApi(
					"/job-definition/{id}/suspended", "PUT",
					pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
					authNames, contentTypes, accepts, returnType, callback
				);
			};
		};

		return exports;
	}));

},{"../ApiClient":16,"../model/CountResultDto":62,"../model/JobDefinitionPriorityDto":90,"../model/JobDefinitionQueryDto":91,"../model/JobDefinitionSuspensionStateDto":92,"../model/RetriesDto":117}],29:[function(require,module,exports){
/**
 * Camunda REST API
 * Swagger OpenApi Spec for Camunda REST API.
 *
 * OpenAPI spec version: v7.8.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.3.1
 *
 * Do not edit the class manually.
 *
 */

	(function(root, factory) {
		if (typeof define === "function" && define.amd) {
			// AMD. Register as an anonymous module.
			define(["ApiClient", "model/BatchDto", "model/CountResultDto", "model/JobDuedateDto", "model/JobQueryDto", "model/JobSuspensionStateDto", "model/PriorityDto", "model/RetriesDto", "model/SetJobRetriesDto"], factory);
		} else if (typeof module === "object" && module.exports) {
			// CommonJS-like environments that support module.exports, like Node.
			module.exports = factory(require("../ApiClient"), require("../model/BatchDto"), require("../model/CountResultDto"), require("../model/JobDuedateDto"), require("../model/JobQueryDto"), require("../model/JobSuspensionStateDto"), require("../model/PriorityDto"), require("../model/RetriesDto"), require("../model/SetJobRetriesDto"));
		} else {
			// Browser globals (root is window)
			if (!root.CamundaRestApi) {
				root.CamundaRestApi = {};
			}
			root.CamundaRestApi.JobExecutionApi = factory(root.CamundaRestApi.ApiClient, root.CamundaRestApi.BatchDto, root.CamundaRestApi.CountResultDto, root.CamundaRestApi.JobDuedateDto, root.CamundaRestApi.JobQueryDto, root.CamundaRestApi.JobSuspensionStateDto, root.CamundaRestApi.PriorityDto, root.CamundaRestApi.RetriesDto, root.CamundaRestApi.SetJobRetriesDto);
		}
	}(this, function(ApiClient, BatchDto, CountResultDto, JobDuedateDto, JobQueryDto, JobSuspensionStateDto, PriorityDto, RetriesDto, SetJobRetriesDto) {
		"use strict";

		/**
   * JobExecution service.
   * @module api/JobExecutionApi
   * @version v7.8.0
   */

		/**
   * Constructs a new JobExecutionApi.
   * @alias module:api/JobExecutionApi
   * @class
   * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
		var exports = function(apiClient) {
			this.apiClient = apiClient || ApiClient.instance;


			/**
     * Callback function to receive the result of the deleteJob operation.
     * @callback module:api/JobExecutionApi~deleteJobCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

			/**
     * Deletes a job by id.
     * Deletes a job by id.
     * @param {String} id Parameter jobId
     * @param {module:api/JobExecutionApi~deleteJobCallback} callback The callback function, accepting three arguments: error, data, response
     */
			this.deleteJob = function(id, callback) {
				var postBody = null;

				// verify the required parameter 'id' is set
				if (id === undefined || id === null) {
					throw new Error("Missing the required parameter 'id' when calling deleteJob");
				}


				var pathParams = {
					"id": id
				};
				var queryParams = {
				};
				var collectionQueryParams = {
				};
				var headerParams = {
				};
				var formParams = {
				};

				var authNames = [];
				var contentTypes = [];
				var accepts = ["application/json"];
				var returnType = null;

				return this.apiClient.callApi(
					"/job/{id}", "DELETE",
					pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
					authNames, contentTypes, accepts, returnType, callback
				);
			};

			/**
     * Callback function to receive the result of the executeJob operation.
     * @callback module:api/JobExecutionApi~executeJobCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

			/**
     * Executes a job by id.
     * Executes a job by id.  Note: The execution of the job happens synchronously in the same thread.
     * @param {String} id Parameter jobId
     * @param {module:api/JobExecutionApi~executeJobCallback} callback The callback function, accepting three arguments: error, data, response
     */
			this.executeJob = function(id, callback) {
				var postBody = null;

				// verify the required parameter 'id' is set
				if (id === undefined || id === null) {
					throw new Error("Missing the required parameter 'id' when calling executeJob");
				}


				var pathParams = {
					"id": id
				};
				var queryParams = {
				};
				var collectionQueryParams = {
				};
				var headerParams = {
				};
				var formParams = {
				};

				var authNames = [];
				var contentTypes = [];
				var accepts = ["application/json"];
				var returnType = null;

				return this.apiClient.callApi(
					"/job/{id}/execute", "POST",
					pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
					authNames, contentTypes, accepts, returnType, callback
				);
			};

			/**
     * Callback function to receive the result of the getJob operation.
     * @callback module:api/JobExecutionApi~getJobCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

			/**
     * Retrieves a job by id, according to the &#x60;Job&#x60; interface in the engine.
     * Retrieves a job by id, according to the &#x60;Job&#x60; interface in the engine.
     * @param {String} id Parameter jobId
     * @param {module:api/JobExecutionApi~getJobCallback} callback The callback function, accepting three arguments: error, data, response
     */
			this.getJob = function(id, callback) {
				var postBody = null;

				// verify the required parameter 'id' is set
				if (id === undefined || id === null) {
					throw new Error("Missing the required parameter 'id' when calling getJob");
				}


				var pathParams = {
					"id": id
				};
				var queryParams = {
				};
				var collectionQueryParams = {
				};
				var headerParams = {
				};
				var formParams = {
				};

				var authNames = [];
				var contentTypes = [];
				var accepts = ["application/json"];
				var returnType = null;

				return this.apiClient.callApi(
					"/job/{id}", "GET",
					pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
					authNames, contentTypes, accepts, returnType, callback
				);
			};

			/**
     * Callback function to receive the result of the getJobs operation.
     * @callback module:api/JobExecutionApi~getJobsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<Object>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

			/**
     * Queries for jobs that fulfill given parameters.
     * Queries for jobs that fulfill given parameters. The size of the result set can be retrieved by using the Get Job Count method.
     * @param {Object} opts Optional parameters
     * @param {Number} opts.firstResult Parameter firstResult
     * @param {Number} opts.maxResults Parameter maxResults
     * @param {String} opts.withRetriesLeft Only select jobs which have retries left. Value may only be true, as false is the default behavior.
     * @param {String} opts.dueDates Only select jobs where the due date is lower or higher than the given date. Due date expressions are comma-separated and are structured as follows: A valid condition value has the form operator_value. operator is the comparison operator to be used and value the date value as string. Valid operator values are: gt - greater than; lt - lower than. value may not contain underscore or comma characters.
     * @param {String} opts.firstResult2 Pagination of results. Specifies the index of the first result to return.
     * @param {String} opts.processDefinitionKey Filter by the key of the process definition the jobs run on.
     * @param {String} opts.activityId Only select jobs which exist for an activity with the given id.
     * @param {String} opts.priorityLowerThanOrEquals Only include jobs with a priority lower than or equal to the given value. Value must be a valid long value.
     * @param {String} opts.withException Only select jobs that failed due to an exception. Value may only be true, as false is the default behavior.
     * @param {String} opts.priorityHigherThanOrEquals Only include jobs with a priority higher than or equal to the given value. Value must be a valid long value.
     * @param {String} opts.tenantIdIn Only include jobs which belong to one of the passed and comma-separated tenant ids.
     * @param {String} opts.maxResults2 Pagination of results. Specifies the maximum number of results to return. Will return less results if there are no more results left.
     * @param {String} opts.sortBy Sort the results by a given criterion. Valid values are jobId, executionId, processInstanceId, jobPriority, jobRetries, jobDueDate and tenantId. Must be used in conjunction with the sortOrder parameter.
     * @param {String} opts.exceptionMessage Only select jobs that failed due to an exception with the given message.
     * @param {String} opts.processInstanceId Only select jobs which exist for the given process instance.
     * @param {String} opts.processDefinitionId Filter by the id of the process definition the jobs run on.
     * @param {String} opts.jobDefinitionId Only select jobs which exist for the given job definition.
     * @param {String} opts.timers Only select jobs that are timers. Cannot be used together with messages. Value may only be true, as false is the default behavior.
     * @param {String} opts.active Only include active jobs. Value may only be true, as false is the default behavior.
     * @param {String} opts.executable Only select jobs which are executable, i.e., retries &gt; 0 and due date is null or due date is in the past. Value may only be true, as false is the default behavior.
     * @param {String} opts.suspended Only include suspended jobs. Value may only be true, as false is the default behavior.
     * @param {String} opts.jobId Filter by job id.
     * @param {String} opts.executionId Only select jobs which exist for the given execution.
     * @param {String} opts.includeJobsWithoutTenantId Include jobs which belong to no tenant. Can be used in combination with tenantIdIn. Value may only be true, as false is the default behavior.
     * @param {String} opts.sortOrder Sort the results in a given order. Values may be asc for ascending order or desc for descending order. Must be used in conjunction with the sortBy parameter.
     * @param {String} opts.messages Only select jobs that are messages. Cannot be used together with timers. Value may only be true, as false is the default behavior.
     * @param {String} opts.withoutTenantId Only include jobs which belong to no tenant. Value may only be true, as false is the default behavior.
     * @param {String} opts.noRetriesLeft Only select jobs which have no retries left. Value may only be true, as false is the default behavior.
     * @param {module:api/JobExecutionApi~getJobsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<Object>}
     */
			this.getJobs = function(opts, callback) {
				opts = opts || {};
				var postBody = null;


				var pathParams = {
				};
				var queryParams = {
					"firstResult": opts["firstResult"],
					"maxResults": opts["maxResults"],
					"withRetriesLeft": opts["withRetriesLeft"],
					"dueDates": opts["dueDates"],
					"firstResult2": opts["firstResult2"],
					"processDefinitionKey": opts["processDefinitionKey"],
					"activityId": opts["activityId"],
					"priorityLowerThanOrEquals": opts["priorityLowerThanOrEquals"],
					"withException": opts["withException"],
					"priorityHigherThanOrEquals": opts["priorityHigherThanOrEquals"],
					"tenantIdIn": opts["tenantIdIn"],
					"maxResults2": opts["maxResults2"],
					"sortBy": opts["sortBy"],
					"exceptionMessage": opts["exceptionMessage"],
					"processInstanceId": opts["processInstanceId"],
					"processDefinitionId": opts["processDefinitionId"],
					"jobDefinitionId": opts["jobDefinitionId"],
					"timers": opts["timers"],
					"active": opts["active"],
					"executable": opts["executable"],
					"suspended": opts["suspended"],
					"jobId": opts["jobId"],
					"executionId": opts["executionId"],
					"includeJobsWithoutTenantId": opts["includeJobsWithoutTenantId"],
					"sortOrder": opts["sortOrder"],
					"messages": opts["messages"],
					"withoutTenantId": opts["withoutTenantId"],
					"noRetriesLeft": opts["noRetriesLeft"],
				};
				var collectionQueryParams = {
				};
				var headerParams = {
				};
				var formParams = {
				};

				var authNames = [];
				var contentTypes = [];
				var accepts = ["application/json"];
				var returnType = [Object];

				return this.apiClient.callApi(
					"/job", "GET",
					pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
					authNames, contentTypes, accepts, returnType, callback
				);
			};

			/**
     * Callback function to receive the result of the getJobsCount operation.
     * @callback module:api/JobExecutionApi~getJobsCountCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CountResultDto} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

			/**
     * Queries for the number of jobs that fulfill given parameters.
     * Queries for the number of jobs that fulfill given parameters. Takes the same parameters as the Get Jobs method.
     * @param {Object} opts Optional parameters
     * @param {String} opts.processInstanceId Only select jobs which exist for the given process instance.
     * @param {String} opts.processDefinitionId Filter by the id of the process definition the jobs run on.
     * @param {String} opts.jobDefinitionId Only select jobs which exist for the given job definition.
     * @param {String} opts.timers Only select jobs that are timers. Cannot be used together with messages. Value may only be true, as false is the default behavior.
     * @param {String} opts.withRetriesLeft Only select jobs which have retries left. Value may only be true, as false is the default behavior.
     * @param {String} opts.dueDates Only select jobs where the due date is lower or higher than the given date. Due date expressions are comma-separated and are structured as follows: A valid condition value has the form operator_value. operator is the comparison operator to be used and value the date value as string. Valid operator values are: gt - greater than; lt - lower than. value may not contain underscore or comma characters.
     * @param {String} opts.active Only include active jobs. Value may only be true, as false is the default behavior.
     * @param {String} opts.executable Only select jobs which are executable, i.e., retries &gt; 0 and due date is null or due date is in the past. Value may only be true, as false is the default behavior.
     * @param {String} opts.suspended Only include suspended jobs. Value may only be true, as false is the default behavior.
     * @param {String} opts.processDefinitionKey Filter by the key of the process definition the jobs run on.
     * @param {String} opts.jobId Filter by job id.
     * @param {String} opts.executionId Only select jobs which exist for the given execution.
     * @param {String} opts.activityId Only select jobs which exist for an activity with the given id.
     * @param {String} opts.priorityLowerThanOrEquals Only include jobs with a priority lower than or equal to the given value. Value must be a valid long value.
     * @param {String} opts.withException Only select jobs that failed due to an exception. Value may only be true, as false is the default behavior.
     * @param {String} opts.priorityHigherThanOrEquals Only include jobs with a priority higher than or equal to the given value. Value must be a valid long value.
     * @param {String} opts.tenantIdIn Only include jobs which belong to one of the passed and comma-separated tenant ids.
     * @param {String} opts.includeJobsWithoutTenantId Include jobs which belong to no tenant. Can be used in combination with tenantIdIn. Value may only be true, as false is the default behavior.
     * @param {String} opts.messages Only select jobs that are messages. Cannot be used together with timers. Value may only be true, as false is the default behavior.
     * @param {String} opts.withoutTenantId Only include jobs which belong to no tenant. Value may only be true, as false is the default behavior.
     * @param {String} opts.noRetriesLeft Only select jobs which have no retries left. Value may only be true, as false is the default behavior.
     * @param {String} opts.exceptionMessage Only select jobs that failed due to an exception with the given message.
     * @param {module:api/JobExecutionApi~getJobsCountCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CountResultDto}
     */
			this.getJobsCount = function(opts, callback) {
				opts = opts || {};
				var postBody = null;


				var pathParams = {
				};
				var queryParams = {
					"processInstanceId": opts["processInstanceId"],
					"processDefinitionId": opts["processDefinitionId"],
					"jobDefinitionId": opts["jobDefinitionId"],
					"timers": opts["timers"],
					"withRetriesLeft": opts["withRetriesLeft"],
					"dueDates": opts["dueDates"],
					"active": opts["active"],
					"executable": opts["executable"],
					"suspended": opts["suspended"],
					"processDefinitionKey": opts["processDefinitionKey"],
					"jobId": opts["jobId"],
					"executionId": opts["executionId"],
					"activityId": opts["activityId"],
					"priorityLowerThanOrEquals": opts["priorityLowerThanOrEquals"],
					"withException": opts["withException"],
					"priorityHigherThanOrEquals": opts["priorityHigherThanOrEquals"],
					"tenantIdIn": opts["tenantIdIn"],
					"includeJobsWithoutTenantId": opts["includeJobsWithoutTenantId"],
					"messages": opts["messages"],
					"withoutTenantId": opts["withoutTenantId"],
					"noRetriesLeft": opts["noRetriesLeft"],
					"exceptionMessage": opts["exceptionMessage"],
				};
				var collectionQueryParams = {
				};
				var headerParams = {
				};
				var formParams = {
				};

				var authNames = [];
				var contentTypes = [];
				var accepts = ["application/json"];
				var returnType = CountResultDto;

				return this.apiClient.callApi(
					"/job/count", "GET",
					pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
					authNames, contentTypes, accepts, returnType, callback
				);
			};

			/**
     * Callback function to receive the result of the getStacktrace operation.
     * @callback module:api/JobExecutionApi~getStacktraceCallback
     * @param {String} error Error message, if any.
     * @param {'String'} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

			/**
     * Retrieves the exception stacktrace corresponding to the passed job id.
     * Retrieves the exception stacktrace corresponding to the passed job id.
     * @param {String} id Parameter jobId
     * @param {module:api/JobExecutionApi~getStacktraceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link 'String'}
     */
			this.getStacktrace = function(id, callback) {
				var postBody = null;

				// verify the required parameter 'id' is set
				if (id === undefined || id === null) {
					throw new Error("Missing the required parameter 'id' when calling getStacktrace");
				}


				var pathParams = {
					"id": id
				};
				var queryParams = {
				};
				var collectionQueryParams = {
				};
				var headerParams = {
				};
				var formParams = {
				};

				var authNames = [];
				var contentTypes = [];
				var accepts = ["text/plain"];
				var returnType = "String";

				return this.apiClient.callApi(
					"/job/{id}/stacktrace", "GET",
					pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
					authNames, contentTypes, accepts, returnType, callback
				);
			};

			/**
     * Callback function to receive the result of the queryJobs operation.
     * @callback module:api/JobExecutionApi~queryJobsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<Object>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

			/**
     * Queries for jobs that fulfill given parameters.
     * Queries for jobs that fulfill given parameters. This method is slightly more powerful than the Get Jobs method because it allows filtering by multiple jobs of types String, Number or Boolean.
     * @param {Object} opts Optional parameters
     * @param {module:model/JobQueryDto} opts.body Parameter queryDto
     * @param {Number} opts.firstResult Parameter firstResult
     * @param {Number} opts.maxResults Parameter maxResults
     * @param {module:api/JobExecutionApi~queryJobsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<Object>}
     */
			this.queryJobs = function(opts, callback) {
				opts = opts || {};
				var postBody = opts["body"];


				var pathParams = {
				};
				var queryParams = {
					"firstResult": opts["firstResult"],
					"maxResults": opts["maxResults"],
				};
				var collectionQueryParams = {
				};
				var headerParams = {
				};
				var formParams = {
				};

				var authNames = [];
				var contentTypes = ["application/json"];
				var accepts = ["application/json"];
				var returnType = [Object];

				return this.apiClient.callApi(
					"/job", "POST",
					pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
					authNames, contentTypes, accepts, returnType, callback
				);
			};

			/**
     * Callback function to receive the result of the queryJobsCount operation.
     * @callback module:api/JobExecutionApi~queryJobsCountCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CountResultDto} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

			/**
     * Queries for jobs that fulfill given parameters.
     * Queries for jobs that fulfill given parameters. This method takes the same message body as the Get Jobs (POST) method and therefore it is slightly more powerful than the Get Job Count method.
     * @param {Object} opts Optional parameters
     * @param {module:model/JobQueryDto} opts.body Parameter queryDto
     * @param {module:api/JobExecutionApi~queryJobsCountCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CountResultDto}
     */
			this.queryJobsCount = function(opts, callback) {
				opts = opts || {};
				var postBody = opts["body"];


				var pathParams = {
				};
				var queryParams = {
				};
				var collectionQueryParams = {
				};
				var headerParams = {
				};
				var formParams = {
				};

				var authNames = [];
				var contentTypes = ["application/json"];
				var accepts = ["application/json"];
				var returnType = CountResultDto;

				return this.apiClient.callApi(
					"/job/count", "POST",
					pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
					authNames, contentTypes, accepts, returnType, callback
				);
			};

			/**
     * Callback function to receive the result of the setJobDuedate operation.
     * @callback module:api/JobExecutionApi~setJobDuedateCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

			/**
     * Updates the due date of a job by id.
     * Updates the due date of a job by id.
     * @param {String} id Parameter jobId
     * @param {Object} opts Optional parameters
     * @param {module:model/JobDuedateDto} opts.body Parameter dto
     * @param {module:api/JobExecutionApi~setJobDuedateCallback} callback The callback function, accepting three arguments: error, data, response
     */
			this.setJobDuedate = function(id, opts, callback) {
				opts = opts || {};
				var postBody = opts["body"];

				// verify the required parameter 'id' is set
				if (id === undefined || id === null) {
					throw new Error("Missing the required parameter 'id' when calling setJobDuedate");
				}


				var pathParams = {
					"id": id
				};
				var queryParams = {
				};
				var collectionQueryParams = {
				};
				var headerParams = {
				};
				var formParams = {
				};

				var authNames = [];
				var contentTypes = ["application/json"];
				var accepts = ["application/json"];
				var returnType = null;

				return this.apiClient.callApi(
					"/job/{id}/duedate", "PUT",
					pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
					authNames, contentTypes, accepts, returnType, callback
				);
			};

			/**
     * Callback function to receive the result of the setJobPriority operation.
     * @callback module:api/JobExecutionApi~setJobPriorityCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

			/**
     * Sets the execution priority of a job by id.
     * Sets the execution priority of a job by id.
     * @param {String} id Parameter jobId
     * @param {Object} opts Optional parameters
     * @param {module:model/PriorityDto} opts.body Parameter dto
     * @param {module:api/JobExecutionApi~setJobPriorityCallback} callback The callback function, accepting three arguments: error, data, response
     */
			this.setJobPriority = function(id, opts, callback) {
				opts = opts || {};
				var postBody = opts["body"];

				// verify the required parameter 'id' is set
				if (id === undefined || id === null) {
					throw new Error("Missing the required parameter 'id' when calling setJobPriority");
				}


				var pathParams = {
					"id": id
				};
				var queryParams = {
				};
				var collectionQueryParams = {
				};
				var headerParams = {
				};
				var formParams = {
				};

				var authNames = [];
				var contentTypes = ["application/json"];
				var accepts = ["application/json"];
				var returnType = null;

				return this.apiClient.callApi(
					"/job/{id}/priority", "PUT",
					pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
					authNames, contentTypes, accepts, returnType, callback
				);
			};

			/**
     * Callback function to receive the result of the setJobRetries operation.
     * @callback module:api/JobExecutionApi~setJobRetriesCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

			/**
     * Sets the retries of the job to the given number of retries by id.
     * Sets the retries of the job to the given number of retries by id.
     * @param {String} id Parameter jobId
     * @param {Object} opts Optional parameters
     * @param {module:model/RetriesDto} opts.body Parameter dto
     * @param {module:api/JobExecutionApi~setJobRetriesCallback} callback The callback function, accepting three arguments: error, data, response
     */
			this.setJobRetries = function(id, opts, callback) {
				opts = opts || {};
				var postBody = opts["body"];

				// verify the required parameter 'id' is set
				if (id === undefined || id === null) {
					throw new Error("Missing the required parameter 'id' when calling setJobRetries");
				}


				var pathParams = {
					"id": id
				};
				var queryParams = {
				};
				var collectionQueryParams = {
				};
				var headerParams = {
				};
				var formParams = {
				};

				var authNames = [];
				var contentTypes = ["application/json"];
				var accepts = ["application/json"];
				var returnType = null;

				return this.apiClient.callApi(
					"/job/{id}/retries", "PUT",
					pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
					authNames, contentTypes, accepts, returnType, callback
				);
			};

			/**
     * Callback function to receive the result of the setRetries operation.
     * @callback module:api/JobExecutionApi~setRetriesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/BatchDto} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

			/**
     * Create a batch to set retries of jobs asynchronously.
     * Create a batch to set retries of jobs asynchronously.
     * @param {Object} opts Optional parameters
     * @param {module:model/SetJobRetriesDto} opts.body Parameter setJobRetriesDto
     * @param {module:api/JobExecutionApi~setRetriesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/BatchDto}
     */
			this.setRetries = function(opts, callback) {
				opts = opts || {};
				var postBody = opts["body"];


				var pathParams = {
				};
				var queryParams = {
				};
				var collectionQueryParams = {
				};
				var headerParams = {
				};
				var formParams = {
				};

				var authNames = [];
				var contentTypes = ["application/json"];
				var accepts = ["application/json"];
				var returnType = BatchDto;

				return this.apiClient.callApi(
					"/job/retries", "POST",
					pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
					authNames, contentTypes, accepts, returnType, callback
				);
			};

			/**
     * Callback function to receive the result of the updateSuspensionState operation.
     * @callback module:api/JobExecutionApi~updateSuspensionStateCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

			/**
     * Activates or suspends jobs with the given job definition id.
     * Activates or suspends jobs with the given job definition id.
     * @param {Object} opts Optional parameters
     * @param {module:model/JobSuspensionStateDto} opts.body Parameter dto
     * @param {module:api/JobExecutionApi~updateSuspensionStateCallback} callback The callback function, accepting three arguments: error, data, response
     */
			this.updateSuspensionState = function(opts, callback) {
				opts = opts || {};
				var postBody = opts["body"];


				var pathParams = {
				};
				var queryParams = {
				};
				var collectionQueryParams = {
				};
				var headerParams = {
				};
				var formParams = {
				};

				var authNames = [];
				var contentTypes = ["application/json"];
				var accepts = ["application/json"];
				var returnType = null;

				return this.apiClient.callApi(
					"/job/suspended", "PUT",
					pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
					authNames, contentTypes, accepts, returnType, callback
				);
			};

			/**
     * Callback function to receive the result of the updateSuspensionState_0 operation.
     * @callback module:api/JobExecutionApi~updateSuspensionState_0Callback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

			/**
     * Activates or suspends a given job by id.
     * Activates or suspends a given job by id.
     * @param {String} id Parameter jobId
     * @param {Object} opts Optional parameters
     * @param {module:model/JobSuspensionStateDto} opts.body Parameter dto
     * @param {module:api/JobExecutionApi~updateSuspensionState_0Callback} callback The callback function, accepting three arguments: error, data, response
     */
			this.updateSuspensionState_0 = function(id, opts, callback) {
				opts = opts || {};
				var postBody = opts["body"];

				// verify the required parameter 'id' is set
				if (id === undefined || id === null) {
					throw new Error("Missing the required parameter 'id' when calling updateSuspensionState_0");
				}


				var pathParams = {
					"id": id
				};
				var queryParams = {
				};
				var collectionQueryParams = {
				};
				var headerParams = {
				};
				var formParams = {
				};

				var authNames = [];
				var contentTypes = ["application/json"];
				var accepts = ["application/json"];
				var returnType = null;

				return this.apiClient.callApi(
					"/job/{id}/suspended", "PUT",
					pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
					authNames, contentTypes, accepts, returnType, callback
				);
			};
		};

		return exports;
	}));

},{"../ApiClient":16,"../model/BatchDto":50,"../model/CountResultDto":62,"../model/JobDuedateDto":94,"../model/JobQueryDto":95,"../model/JobSuspensionStateDto":96,"../model/PriorityDto":106,"../model/RetriesDto":117,"../model/SetJobRetriesDto":119}],30:[function(require,module,exports){
/**
 * Camunda REST API
 * Swagger OpenApi Spec for Camunda REST API.
 *
 * OpenAPI spec version: v7.8.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.3.1
 *
 * Do not edit the class manually.
 *
 */

	(function(root, factory) {
		if (typeof define === "function" && define.amd) {
			// AMD. Register as an anonymous module.
			define(["ApiClient", "model/CorrelationMessageDto"], factory);
		} else if (typeof module === "object" && module.exports) {
			// CommonJS-like environments that support module.exports, like Node.
			module.exports = factory(require("../ApiClient"), require("../model/CorrelationMessageDto"));
		} else {
			// Browser globals (root is window)
			if (!root.CamundaRestApi) {
				root.CamundaRestApi = {};
			}
			root.CamundaRestApi.MessageApi = factory(root.CamundaRestApi.ApiClient, root.CamundaRestApi.CorrelationMessageDto);
		}
	}(this, function(ApiClient, CorrelationMessageDto) {
		"use strict";

		/**
   * Message service.
   * @module api/MessageApi
   * @version v7.8.0
   */

		/**
   * Constructs a new MessageApi.
   * @alias module:api/MessageApi
   * @class
   * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
		var exports = function(apiClient) {
			this.apiClient = apiClient || ApiClient.instance;


			/**
     * Callback function to receive the result of the deliverMessage operation.
     * @callback module:api/MessageApi~deliverMessageCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

			/**
     * Correlates a message to the process engine to either trigger a message start event or an intermediate message catching event.
     * Correlates a message to the process engine to either trigger a message start event or an intermediate message catching event. Internally this maps to the engine&#39;s message correlation builder methods &#x60;MessageCorrelationBuilder#correlateWithResult()&#x60; and &#x60;MessageCorrelationBuilder#correlateAllWithResult()&#x60;. For more information about the correlation behavior, see the Message Events section of the BPMN 2.0 Implementation Reference.
     * @param {Object} opts Optional parameters
     * @param {module:model/CorrelationMessageDto} opts.body Parameter messageDto
     * @param {module:api/MessageApi~deliverMessageCallback} callback The callback function, accepting three arguments: error, data, response
     */
			this.deliverMessage = function(opts, callback) {
				opts = opts || {};
				var postBody = opts["body"];


				var pathParams = {
				};
				var queryParams = {
				};
				var collectionQueryParams = {
				};
				var headerParams = {
				};
				var formParams = {
				};

				var authNames = [];
				var contentTypes = ["application/json"];
				var accepts = ["application/json"];
				var returnType = null;

				return this.apiClient.callApi(
					"/message", "POST",
					pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
					authNames, contentTypes, accepts, returnType, callback
				);
			};
		};

		return exports;
	}));

},{"../ApiClient":16,"../model/CorrelationMessageDto":61}],31:[function(require,module,exports){
/**
 * Camunda REST API
 * Swagger OpenApi Spec for Camunda REST API.
 *
 * OpenAPI spec version: v7.8.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.3.1
 *
 * Do not edit the class manually.
 *
 */

	(function(root, factory) {
		if (typeof define === "function" && define.amd) {
			// AMD. Register as an anonymous module.
			define(["ApiClient", "model/BatchDto", "model/MigrationExecutionDto", "model/MigrationPlanDto", "model/MigrationPlanGenerationDto", "model/MigrationPlanReportDto"], factory);
		} else if (typeof module === "object" && module.exports) {
			// CommonJS-like environments that support module.exports, like Node.
			module.exports = factory(require("../ApiClient"), require("../model/BatchDto"), require("../model/MigrationExecutionDto"), require("../model/MigrationPlanDto"), require("../model/MigrationPlanGenerationDto"), require("../model/MigrationPlanReportDto"));
		} else {
			// Browser globals (root is window)
			if (!root.CamundaRestApi) {
				root.CamundaRestApi = {};
			}
			root.CamundaRestApi.MigrationApi = factory(root.CamundaRestApi.ApiClient, root.CamundaRestApi.BatchDto, root.CamundaRestApi.MigrationExecutionDto, root.CamundaRestApi.MigrationPlanDto, root.CamundaRestApi.MigrationPlanGenerationDto, root.CamundaRestApi.MigrationPlanReportDto);
		}
	}(this, function(ApiClient, BatchDto, MigrationExecutionDto, MigrationPlanDto, MigrationPlanGenerationDto, MigrationPlanReportDto) {
		"use strict";

		/**
   * Migration service.
   * @module api/MigrationApi
   * @version v7.8.0
   */

		/**
   * Constructs a new MigrationApi.
   * @alias module:api/MigrationApi
   * @class
   * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
		var exports = function(apiClient) {
			this.apiClient = apiClient || ApiClient.instance;


			/**
     * Callback function to receive the result of the executeMigrationPlan operation.
     * @callback module:api/MigrationApi~executeMigrationPlanCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

			/**
     * Executes a migration plan synchronously for multiple process instances.
     * Executes a migration plan synchronously for multiple process instances. To execute a migration plan asynchronously, use the Execute Migration Plan Async (Batch) method.For more information about the difference between synchronous and asynchronous execution of a migration plan, please refer to the related section of the user guide.
     * @param {Object} opts Optional parameters
     * @param {module:model/MigrationExecutionDto} opts.body Parameter migrationPlan
     * @param {module:api/MigrationApi~executeMigrationPlanCallback} callback The callback function, accepting three arguments: error, data, response
     */
			this.executeMigrationPlan = function(opts, callback) {
				opts = opts || {};
				var postBody = opts["body"];


				var pathParams = {
				};
				var queryParams = {
				};
				var collectionQueryParams = {
				};
				var headerParams = {
				};
				var formParams = {
				};

				var authNames = [];
				var contentTypes = ["application/json"];
				var accepts = [];
				var returnType = null;

				return this.apiClient.callApi(
					"/migration/execute", "POST",
					pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
					authNames, contentTypes, accepts, returnType, callback
				);
			};

			/**
     * Callback function to receive the result of the executeMigrationPlanAsync operation.
     * @callback module:api/MigrationApi~executeMigrationPlanAsyncCallback
     * @param {String} error Error message, if any.
     * @param {module:model/BatchDto} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

			/**
     * Executes a migration plan asynchronously (batch) for multiple process instances.
     * Executes a migration plan asynchronously (batch) for multiple process instances. To execute a migration plan synchronously, use the Execute Migration Plan method.For more information about the difference between synchronous and asynchronous execution of a migration plan, please refer to the related section of the user guide.
     * @param {Object} opts Optional parameters
     * @param {module:model/MigrationExecutionDto} opts.body Parameter migrationPlan
     * @param {module:api/MigrationApi~executeMigrationPlanAsyncCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/BatchDto}
     */
			this.executeMigrationPlanAsync = function(opts, callback) {
				opts = opts || {};
				var postBody = opts["body"];


				var pathParams = {
				};
				var queryParams = {
				};
				var collectionQueryParams = {
				};
				var headerParams = {
				};
				var formParams = {
				};

				var authNames = [];
				var contentTypes = ["application/json"];
				var accepts = ["application/json"];
				var returnType = BatchDto;

				return this.apiClient.callApi(
					"/migration/executeAsync", "POST",
					pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
					authNames, contentTypes, accepts, returnType, callback
				);
			};

			/**
     * Callback function to receive the result of the generateMigrationPlan operation.
     * @callback module:api/MigrationApi~generateMigrationPlanCallback
     * @param {String} error Error message, if any.
     * @param {module:model/MigrationPlanDto} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

			/**
     * Generates a migration plan for two process definitions.
     * Generates a migration plan for two process definitions. The generated migration plan contains migration instructions which map equal activities between the two process definitions.
     * @param {Object} opts Optional parameters
     * @param {module:model/MigrationPlanGenerationDto} opts.body Parameter generationDto
     * @param {module:api/MigrationApi~generateMigrationPlanCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/MigrationPlanDto}
     */
			this.generateMigrationPlan = function(opts, callback) {
				opts = opts || {};
				var postBody = opts["body"];


				var pathParams = {
				};
				var queryParams = {
				};
				var collectionQueryParams = {
				};
				var headerParams = {
				};
				var formParams = {
				};

				var authNames = [];
				var contentTypes = ["application/json"];
				var accepts = ["application/json"];
				var returnType = MigrationPlanDto;

				return this.apiClient.callApi(
					"/migration/generate", "POST",
					pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
					authNames, contentTypes, accepts, returnType, callback
				);
			};

			/**
     * Callback function to receive the result of the validateMigrationPlan operation.
     * @callback module:api/MigrationApi~validateMigrationPlanCallback
     * @param {String} error Error message, if any.
     * @param {module:model/MigrationPlanReportDto} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

			/**
     * Validates a migration plan statically without executing it.
     * Validates a migration plan statically without executing it. This corresponds to the creation time validation described in the user guide.
     * @param {Object} opts Optional parameters
     * @param {module:model/MigrationPlanDto} opts.body Parameter migrationPlanDto
     * @param {module:api/MigrationApi~validateMigrationPlanCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/MigrationPlanReportDto}
     */
			this.validateMigrationPlan = function(opts, callback) {
				opts = opts || {};
				var postBody = opts["body"];


				var pathParams = {
				};
				var queryParams = {
				};
				var collectionQueryParams = {
				};
				var headerParams = {
				};
				var formParams = {
				};

				var authNames = [];
				var contentTypes = ["application/json"];
				var accepts = ["application/json"];
				var returnType = MigrationPlanReportDto;

				return this.apiClient.callApi(
					"/migration/validate", "POST",
					pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
					authNames, contentTypes, accepts, returnType, callback
				);
			};
		};

		return exports;
	}));

},{"../ApiClient":16,"../model/BatchDto":50,"../model/MigrationExecutionDto":97,"../model/MigrationPlanDto":100,"../model/MigrationPlanGenerationDto":101,"../model/MigrationPlanReportDto":102}],32:[function(require,module,exports){
/**
 * Camunda REST API
 * Swagger OpenApi Spec for Camunda REST API.
 *
 * OpenAPI spec version: v7.8.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.3.1
 *
 * Do not edit the class manually.
 *
 */

	(function(root, factory) {
		if (typeof define === "function" && define.amd) {
			// AMD. Register as an anonymous module.
			define(["ApiClient", "model/BatchDto", "model/ModificationDto"], factory);
		} else if (typeof module === "object" && module.exports) {
			// CommonJS-like environments that support module.exports, like Node.
			module.exports = factory(require("../ApiClient"), require("../model/BatchDto"), require("../model/ModificationDto"));
		} else {
			// Browser globals (root is window)
			if (!root.CamundaRestApi) {
				root.CamundaRestApi = {};
			}
			root.CamundaRestApi.ModificationApi = factory(root.CamundaRestApi.ApiClient, root.CamundaRestApi.BatchDto, root.CamundaRestApi.ModificationDto);
		}
	}(this, function(ApiClient, BatchDto, ModificationDto) {
		"use strict";

		/**
   * Modification service.
   * @module api/ModificationApi
   * @version v7.8.0
   */

		/**
   * Constructs a new ModificationApi.
   * @alias module:api/ModificationApi
   * @class
   * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
		var exports = function(apiClient) {
			this.apiClient = apiClient || ApiClient.instance;


			/**
     * Callback function to receive the result of the executeModification operation.
     * @callback module:api/ModificationApi~executeModificationCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

			/**
     * Execute Modification.
     * Execute Modification
     * @param {module:api/ModificationApi~executeModificationCallback} callback The callback function, accepting three arguments: error, data, response
     */
			this.executeModification = function(callback) {
				var postBody = null;


				var pathParams = {
				};
				var queryParams = {
				};
				var collectionQueryParams = {
				};
				var headerParams = {
				};
				var formParams = {
				};

				var authNames = [];
				var contentTypes = ["application/json"];
				var accepts = ["application/json"];
				var returnType = null;

				return this.apiClient.callApi(
					"/modification/execute", "POST",
					pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
					authNames, contentTypes, accepts, returnType, callback
				);
			};

			/**
     * Callback function to receive the result of the executeModificationAsync operation.
     * @callback module:api/ModificationApi~executeModificationAsyncCallback
     * @param {String} error Error message, if any.
     * @param {module:model/BatchDto} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

			/**
     * Executes a modification asynchronously for multiple process instances.
     * Executes a modification asynchronously for multiple process instances. To execute a modification synchronously, use the Execute Modification method.For more information about the difference between synchronous and asynchronous execution of a modification, please refer to the related section of the user guide.
     * @param {Object} opts Optional parameters
     * @param {module:model/ModificationDto} opts.body Parameter modificationExecutionDto
     * @param {module:api/ModificationApi~executeModificationAsyncCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/BatchDto}
     */
			this.executeModificationAsync = function(opts, callback) {
				opts = opts || {};
				var postBody = opts["body"];


				var pathParams = {
				};
				var queryParams = {
				};
				var collectionQueryParams = {
				};
				var headerParams = {
				};
				var formParams = {
				};

				var authNames = [];
				var contentTypes = ["application/json"];
				var accepts = ["application/json"];
				var returnType = BatchDto;

				return this.apiClient.callApi(
					"/modification/executeAsync", "POST",
					pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
					authNames, contentTypes, accepts, returnType, callback
				);
			};
		};

		return exports;
	}));

},{"../ApiClient":16,"../model/BatchDto":50,"../model/ModificationDto":103}],33:[function(require,module,exports){
/**
 * Camunda REST API
 * Swagger OpenApi Spec for Camunda REST API.
 *
 * OpenAPI spec version: v7.8.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.3.1
 *
 * Do not edit the class manually.
 *
 */

	(function(root, factory) {
		if (typeof define === "function" && define.amd) {
			// AMD. Register as an anonymous module.
			define(["ApiClient", "model/BatchDto", "model/CountResultDto", "model/FormDto", "model/HistoryTimeToLiveDto", "model/ProcessDefinitionDiagramDto", "model/ProcessDefinitionSuspensionStateDto", "model/ProcessInstanceDto", "model/StartProcessInstanceDto"], factory);
		} else if (typeof module === "object" && module.exports) {
			// CommonJS-like environments that support module.exports, like Node.
			module.exports = factory(require("../ApiClient"), require("../model/BatchDto"), require("../model/CountResultDto"), require("../model/FormDto"), require("../model/HistoryTimeToLiveDto"), require("../model/ProcessDefinitionDiagramDto"), require("../model/ProcessDefinitionSuspensionStateDto"), require("../model/ProcessInstanceDto"), require("../model/StartProcessInstanceDto"));
		} else {
			// Browser globals (root is window)
			if (!root.CamundaRestApi) {
				root.CamundaRestApi = {};
			}
			root.CamundaRestApi.ProcessDefinitionApi = factory(root.CamundaRestApi.ApiClient, root.CamundaRestApi.BatchDto, root.CamundaRestApi.CountResultDto, root.CamundaRestApi.FormDto, root.CamundaRestApi.HistoryTimeToLiveDto, root.CamundaRestApi.ProcessDefinitionDiagramDto, root.CamundaRestApi.ProcessDefinitionSuspensionStateDto, root.CamundaRestApi.ProcessInstanceDto, root.CamundaRestApi.StartProcessInstanceDto);
		}
	}(this, function(ApiClient, BatchDto, CountResultDto, FormDto, HistoryTimeToLiveDto, ProcessDefinitionDiagramDto, ProcessDefinitionSuspensionStateDto, ProcessInstanceDto, StartProcessInstanceDto) {
		"use strict";

		/**
   * ProcessDefinition service.
   * @module api/ProcessDefinitionApi
   * @version v7.8.0
   */

		/**
   * Constructs a new ProcessDefinitionApi.
   * @alias module:api/ProcessDefinitionApi
   * @class
   * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
		var exports = function(apiClient) {
			this.apiClient = apiClient || ApiClient.instance;


			/**
     * Callback function to receive the result of the deleteProcessDefinition operation.
     * @callback module:api/ProcessDefinitionApi~deleteProcessDefinitionCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

			/**
     * Delete Process Definition.
     * Delete Process Definition
     * @param {String} key Parameter processDefinitionKey
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.cascade
     * @param {Boolean} opts.skipCustomListeners
     * @param {module:api/ProcessDefinitionApi~deleteProcessDefinitionCallback} callback The callback function, accepting three arguments: error, data, response
     */
			this.deleteProcessDefinition = function(key, opts, callback) {
				opts = opts || {};
				var postBody = null;

				// verify the required parameter 'key' is set
				if (key === undefined || key === null) {
					throw new Error("Missing the required parameter 'key' when calling deleteProcessDefinition");
				}


				var pathParams = {
					"key": key
				};
				var queryParams = {
					"cascade": opts["cascade"],
					"skipCustomListeners": opts["skipCustomListeners"],
				};
				var collectionQueryParams = {
				};
				var headerParams = {
				};
				var formParams = {
				};

				var authNames = [];
				var contentTypes = [];
				var accepts = ["application/json"];
				var returnType = null;

				return this.apiClient.callApi(
					"/process-definition/key/{key}", "DELETE",
					pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
					authNames, contentTypes, accepts, returnType, callback
				);
			};

			/**
     * Callback function to receive the result of the deleteProcessDefinition_0 operation.
     * @callback module:api/ProcessDefinitionApi~deleteProcessDefinition_0Callback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

			/**
     * Delete Process Definition.
     * Delete Process Definition
     * @param {String} key Parameter processDefinitionKey
     * @param {String} tenantId Parameter tenantId
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.cascade
     * @param {Boolean} opts.skipCustomListeners
     * @param {module:api/ProcessDefinitionApi~deleteProcessDefinition_0Callback} callback The callback function, accepting three arguments: error, data, response
     */
			this.deleteProcessDefinition_0 = function(key, tenantId, opts, callback) {
				opts = opts || {};
				var postBody = null;

				// verify the required parameter 'key' is set
				if (key === undefined || key === null) {
					throw new Error("Missing the required parameter 'key' when calling deleteProcessDefinition_0");
				}

				// verify the required parameter 'tenantId' is set
				if (tenantId === undefined || tenantId === null) {
					throw new Error("Missing the required parameter 'tenantId' when calling deleteProcessDefinition_0");
				}


				var pathParams = {
					"key": key,
					"tenantId": tenantId
				};
				var queryParams = {
					"cascade": opts["cascade"],
					"skipCustomListeners": opts["skipCustomListeners"],
				};
				var collectionQueryParams = {
				};
				var headerParams = {
				};
				var formParams = {
				};

				var authNames = [];
				var contentTypes = [];
				var accepts = ["application/json"];
				var returnType = null;

				return this.apiClient.callApi(
					"/process-definition/key/{key}/tenant-id/{tenantId}", "DELETE",
					pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
					authNames, contentTypes, accepts, returnType, callback
				);
			};

			/**
     * Callback function to receive the result of the deleteProcessDefinition_1 operation.
     * @callback module:api/ProcessDefinitionApi~deleteProcessDefinition_1Callback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

			/**
     * Delete Process Definition.
     * Delete Process Definition
     * @param {String} id Parameter processDefinitionId
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.cascade
     * @param {Boolean} opts.skipCustomListeners
     * @param {module:api/ProcessDefinitionApi~deleteProcessDefinition_1Callback} callback The callback function, accepting three arguments: error, data, response
     */
			this.deleteProcessDefinition_1 = function(id, opts, callback) {
				opts = opts || {};
				var postBody = null;

				// verify the required parameter 'id' is set
				if (id === undefined || id === null) {
					throw new Error("Missing the required parameter 'id' when calling deleteProcessDefinition_1");
				}


				var pathParams = {
					"id": id
				};
				var queryParams = {
					"cascade": opts["cascade"],
					"skipCustomListeners": opts["skipCustomListeners"],
				};
				var collectionQueryParams = {
				};
				var headerParams = {
				};
				var formParams = {
				};

				var authNames = [];
				var contentTypes = [];
				var accepts = ["application/json"];
				var returnType = null;

				return this.apiClient.callApi(
					"/process-definition/{id}", "DELETE",
					pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
					authNames, contentTypes, accepts, returnType, callback
				);
			};

			/**
     * Callback function to receive the result of the deleteProcessDefinitionsByKey operation.
     * @callback module:api/ProcessDefinitionApi~deleteProcessDefinitionsByKeyCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

			/**
     * Delete Process Definitions By Key.
     * Delete Process Definitions By Key
     * @param {String} key
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.cascade
     * @param {Boolean} opts.skipCustomListeners
     * @param {module:api/ProcessDefinitionApi~deleteProcessDefinitionsByKeyCallback} callback The callback function, accepting three arguments: error, data, response
     */
			this.deleteProcessDefinitionsByKey = function(key, opts, callback) {
				opts = opts || {};
				var postBody = null;

				// verify the required parameter 'key' is set
				if (key === undefined || key === null) {
					throw new Error("Missing the required parameter 'key' when calling deleteProcessDefinitionsByKey");
				}


				var pathParams = {
					"key": key
				};
				var queryParams = {
					"cascade": opts["cascade"],
					"skipCustomListeners": opts["skipCustomListeners"],
				};
				var collectionQueryParams = {
				};
				var headerParams = {
				};
				var formParams = {
				};

				var authNames = [];
				var contentTypes = [];
				var accepts = ["application/json"];
				var returnType = null;

				return this.apiClient.callApi(
					"/process-definition/key/{key}/delete", "DELETE",
					pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
					authNames, contentTypes, accepts, returnType, callback
				);
			};

			/**
     * Callback function to receive the result of the deleteProcessDefinitionsByKeyAndTenantId operation.
     * @callback module:api/ProcessDefinitionApi~deleteProcessDefinitionsByKeyAndTenantIdCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

			/**
     * Delete Process Definitions By Key And Tenant Id.
     * Delete Process Definitions By Key And Tenant Id
     * @param {String} key
     * @param {String} tenantId
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.cascade
     * @param {Boolean} opts.skipCustomListeners
     * @param {module:api/ProcessDefinitionApi~deleteProcessDefinitionsByKeyAndTenantIdCallback} callback The callback function, accepting three arguments: error, data, response
     */
			this.deleteProcessDefinitionsByKeyAndTenantId = function(key, tenantId, opts, callback) {
				opts = opts || {};
				var postBody = null;

				// verify the required parameter 'key' is set
				if (key === undefined || key === null) {
					throw new Error("Missing the required parameter 'key' when calling deleteProcessDefinitionsByKeyAndTenantId");
				}

				// verify the required parameter 'tenantId' is set
				if (tenantId === undefined || tenantId === null) {
					throw new Error("Missing the required parameter 'tenantId' when calling deleteProcessDefinitionsByKeyAndTenantId");
				}


				var pathParams = {
					"key": key,
					"tenantId": tenantId
				};
				var queryParams = {
					"cascade": opts["cascade"],
					"skipCustomListeners": opts["skipCustomListeners"],
				};
				var collectionQueryParams = {
				};
				var headerParams = {
				};
				var formParams = {
				};

				var authNames = [];
				var contentTypes = [];
				var accepts = ["application/json"];
				var returnType = null;

				return this.apiClient.callApi(
					"/process-definition/key/{key}/tenant-id/{tenantId}/delete", "DELETE",
					pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
					authNames, contentTypes, accepts, returnType, callback
				);
			};

			/**
     * Callback function to receive the result of the getActivityStatistics operation.
     * @callback module:api/ProcessDefinitionApi~getActivityStatisticsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<Object>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

			/**
     * Retrieves runtime statistics of a given process definition, grouped by activities.
     * Retrieves runtime statistics of a given process definition, grouped by activities. These statistics include the number of running activity instances, optionally the number of failed jobs and also optionally the number of incidents either grouped by incident types or for a specific incident type.  Note: This does not include historic data.
     * @param {String} key Parameter processDefinitionKey
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.failedJobs Parameter includeFailedJobs
     * @param {Boolean} opts.incidents Parameter includeIncidents
     * @param {String} opts.incidentsForType Parameter includeIncidentsForType
     * @param {module:api/ProcessDefinitionApi~getActivityStatisticsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<Object>}
     */
			this.getActivityStatistics = function(key, opts, callback) {
				opts = opts || {};
				var postBody = null;

				// verify the required parameter 'key' is set
				if (key === undefined || key === null) {
					throw new Error("Missing the required parameter 'key' when calling getActivityStatistics");
				}


				var pathParams = {
					"key": key
				};
				var queryParams = {
					"failedJobs": opts["failedJobs"],
					"incidents": opts["incidents"],
					"incidentsForType": opts["incidentsForType"],
				};
				var collectionQueryParams = {
				};
				var headerParams = {
				};
				var formParams = {
				};

				var authNames = [];
				var contentTypes = [];
				var accepts = ["application/json"];
				var returnType = [Object];

				return this.apiClient.callApi(
					"/process-definition/key/{key}/statistics", "GET",
					pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
					authNames, contentTypes, accepts, returnType, callback
				);
			};

			/**
     * Callback function to receive the result of the getActivityStatistics_0 operation.
     * @callback module:api/ProcessDefinitionApi~getActivityStatistics_0Callback
     * @param {String} error Error message, if any.
     * @param {Array.<Object>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

			/**
     * Retrieves runtime statistics of a given process definition, grouped by activities.
     * Retrieves runtime statistics of a given process definition, grouped by activities. These statistics include the number of running activity instances, optionally the number of failed jobs and also optionally the number of incidents either grouped by incident types or for a specific incident type.  Note: This does not include historic data.
     * @param {String} key Parameter processDefinitionKey
     * @param {String} tenantId Parameter tenantId
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.failedJobs Parameter includeFailedJobs
     * @param {Boolean} opts.incidents Parameter includeIncidents
     * @param {String} opts.incidentsForType Parameter includeIncidentsForType
     * @param {module:api/ProcessDefinitionApi~getActivityStatistics_0Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<Object>}
     */
			this.getActivityStatistics_0 = function(key, tenantId, opts, callback) {
				opts = opts || {};
				var postBody = null;

				// verify the required parameter 'key' is set
				if (key === undefined || key === null) {
					throw new Error("Missing the required parameter 'key' when calling getActivityStatistics_0");
				}

				// verify the required parameter 'tenantId' is set
				if (tenantId === undefined || tenantId === null) {
					throw new Error("Missing the required parameter 'tenantId' when calling getActivityStatistics_0");
				}


				var pathParams = {
					"key": key,
					"tenantId": tenantId
				};
				var queryParams = {
					"failedJobs": opts["failedJobs"],
					"incidents": opts["incidents"],
					"incidentsForType": opts["incidentsForType"],
				};
				var collectionQueryParams = {
				};
				var headerParams = {
				};
				var formParams = {
				};

				var authNames = [];
				var contentTypes = [];
				var accepts = ["application/json"];
				var returnType = [Object];

				return this.apiClient.callApi(
					"/process-definition/key/{key}/tenant-id/{tenantId}/statistics", "GET",
					pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
					authNames, contentTypes, accepts, returnType, callback
				);
			};

			/**
     * Callback function to receive the result of the getActivityStatistics_1 operation.
     * @callback module:api/ProcessDefinitionApi~getActivityStatistics_1Callback
     * @param {String} error Error message, if any.
     * @param {Array.<Object>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

			/**
     * Retrieves runtime statistics of a given process definition, grouped by activities.
     * Retrieves runtime statistics of a given process definition, grouped by activities. These statistics include the number of running activity instances, optionally the number of failed jobs and also optionally the number of incidents either grouped by incident types or for a specific incident type.  Note: This does not include historic data.
     * @param {String} id Parameter processDefinitionId
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.failedJobs Parameter includeFailedJobs
     * @param {Boolean} opts.incidents Parameter includeIncidents
     * @param {String} opts.incidentsForType Parameter includeIncidentsForType
     * @param {module:api/ProcessDefinitionApi~getActivityStatistics_1Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<Object>}
     */
			this.getActivityStatistics_1 = function(id, opts, callback) {
				opts = opts || {};
				var postBody = null;

				// verify the required parameter 'id' is set
				if (id === undefined || id === null) {
					throw new Error("Missing the required parameter 'id' when calling getActivityStatistics_1");
				}


				var pathParams = {
					"id": id
				};
				var queryParams = {
					"failedJobs": opts["failedJobs"],
					"incidents": opts["incidents"],
					"incidentsForType": opts["incidentsForType"],
				};
				var collectionQueryParams = {
				};
				var headerParams = {
				};
				var formParams = {
				};

				var authNames = [];
				var contentTypes = [];
				var accepts = ["application/json"];
				var returnType = [Object];

				return this.apiClient.callApi(
					"/process-definition/{id}/statistics", "GET",
					pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
					authNames, contentTypes, accepts, returnType, callback
				);
			};

			/**
     * Callback function to receive the result of the getDeployedStartForm operation.
     * @callback module:api/ProcessDefinitionApi~getDeployedStartFormCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

			/**
     * Get Deployed Start Form.
     * Get Deployed Start Form
     * @param {String} key Parameter processDefinitionKey
     * @param {module:api/ProcessDefinitionApi~getDeployedStartFormCallback} callback The callback function, accepting three arguments: error, data, response
     */
			this.getDeployedStartForm = function(key, callback) {
				var postBody = null;

				// verify the required parameter 'key' is set
				if (key === undefined || key === null) {
					throw new Error("Missing the required parameter 'key' when calling getDeployedStartForm");
				}


				var pathParams = {
					"key": key
				};
				var queryParams = {
				};
				var collectionQueryParams = {
				};
				var headerParams = {
				};
				var formParams = {
				};

				var authNames = [];
				var contentTypes = [];
				var accepts = ["application/json"];
				var returnType = null;

				return this.apiClient.callApi(
					"/process-definition/key/{key}/deployed-start-form", "GET",
					pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
					authNames, contentTypes, accepts, returnType, callback
				);
			};

			/**
     * Callback function to receive the result of the getDeployedStartForm_0 operation.
     * @callback module:api/ProcessDefinitionApi~getDeployedStartForm_0Callback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

			/**
     * Get Deployed Start Form.
     * Get Deployed Start Form
     * @param {String} key Parameter processDefinitionKey
     * @param {String} tenantId Parameter tenantId
     * @param {module:api/ProcessDefinitionApi~getDeployedStartForm_0Callback} callback The callback function, accepting three arguments: error, data, response
     */
			this.getDeployedStartForm_0 = function(key, tenantId, callback) {
				var postBody = null;

				// verify the required parameter 'key' is set
				if (key === undefined || key === null) {
					throw new Error("Missing the required parameter 'key' when calling getDeployedStartForm_0");
				}

				// verify the required parameter 'tenantId' is set
				if (tenantId === undefined || tenantId === null) {
					throw new Error("Missing the required parameter 'tenantId' when calling getDeployedStartForm_0");
				}


				var pathParams = {
					"key": key,
					"tenantId": tenantId
				};
				var queryParams = {
				};
				var collectionQueryParams = {
				};
				var headerParams = {
				};
				var formParams = {
				};

				var authNames = [];
				var contentTypes = [];
				var accepts = ["application/json"];
				var returnType = null;

				return this.apiClient.callApi(
					"/process-definition/key/{key}/tenant-id/{tenantId}/deployed-start-form", "GET",
					pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
					authNames, contentTypes, accepts, returnType, callback
				);
			};

			/**
     * Callback function to receive the result of the getDeployedStartForm_1 operation.
     * @callback module:api/ProcessDefinitionApi~getDeployedStartForm_1Callback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

			/**
     * Get Deployed Start Form.
     * Get Deployed Start Form
     * @param {String} id Parameter processDefinitionId
     * @param {module:api/ProcessDefinitionApi~getDeployedStartForm_1Callback} callback The callback function, accepting three arguments: error, data, response
     */
			this.getDeployedStartForm_1 = function(id, callback) {
				var postBody = null;

				// verify the required parameter 'id' is set
				if (id === undefined || id === null) {
					throw new Error("Missing the required parameter 'id' when calling getDeployedStartForm_1");
				}


				var pathParams = {
					"id": id
				};
				var queryParams = {
				};
				var collectionQueryParams = {
				};
				var headerParams = {
				};
				var formParams = {
				};

				var authNames = [];
				var contentTypes = [];
				var accepts = ["application/json"];
				var returnType = null;

				return this.apiClient.callApi(
					"/process-definition/{id}/deployed-start-form", "GET",
					pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
					authNames, contentTypes, accepts, returnType, callback
				);
			};

			/**
     * Callback function to receive the result of the getFormVariables operation.
     * @callback module:api/ProcessDefinitionApi~getFormVariablesCallback
     * @param {String} error Error message, if any.
     * @param {Object.<String, {'String': Object}>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

			/**
     * Retrieves the start form variables for a process definition (only if they are defined via the Generated Task Form approach).
     * Retrieves the start form variables for a process definition (only if they are defined via the Generated Task Form approach). The start form variables take form data specified on the start event into account. If form fields are defined, the variable types and default values of the form fields are taken into account.
     * @param {String} key Parameter processDefinitionKey
     * @param {Object} opts Optional parameters
     * @param {String} opts.variableNames Parameter variableNames
     * @param {Boolean} opts.deserializeValues Parameter deserializeValues (default to true)
     * @param {module:api/ProcessDefinitionApi~getFormVariablesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object.<String, {'String': Object}>}
     */
			this.getFormVariables = function(key, opts, callback) {
				opts = opts || {};
				var postBody = null;

				// verify the required parameter 'key' is set
				if (key === undefined || key === null) {
					throw new Error("Missing the required parameter 'key' when calling getFormVariables");
				}


				var pathParams = {
					"key": key
				};
				var queryParams = {
					"variableNames": opts["variableNames"],
					"deserializeValues": opts["deserializeValues"],
				};
				var collectionQueryParams = {
				};
				var headerParams = {
				};
				var formParams = {
				};

				var authNames = [];
				var contentTypes = [];
				var accepts = ["application/json"];
				var returnType = {"String": Object};

				return this.apiClient.callApi(
					"/process-definition/key/{key}/form-variables", "GET",
					pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
					authNames, contentTypes, accepts, returnType, callback
				);
			};

			/**
     * Callback function to receive the result of the getFormVariables_0 operation.
     * @callback module:api/ProcessDefinitionApi~getFormVariables_0Callback
     * @param {String} error Error message, if any.
     * @param {Object.<String, {'String': Object}>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

			/**
     * Retrieves the start form variables for a process definition (only if they are defined via the Generated Task Form approach).
     * Retrieves the start form variables for a process definition (only if they are defined via the Generated Task Form approach). The start form variables take form data specified on the start event into account. If form fields are defined, the variable types and default values of the form fields are taken into account.
     * @param {String} key Parameter processDefinitionKey
     * @param {String} tenantId Parameter tenantId
     * @param {Object} opts Optional parameters
     * @param {String} opts.variableNames Parameter variableNames
     * @param {Boolean} opts.deserializeValues Parameter deserializeValues (default to true)
     * @param {module:api/ProcessDefinitionApi~getFormVariables_0Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object.<String, {'String': Object}>}
     */
			this.getFormVariables_0 = function(key, tenantId, opts, callback) {
				opts = opts || {};
				var postBody = null;

				// verify the required parameter 'key' is set
				if (key === undefined || key === null) {
					throw new Error("Missing the required parameter 'key' when calling getFormVariables_0");
				}

				// verify the required parameter 'tenantId' is set
				if (tenantId === undefined || tenantId === null) {
					throw new Error("Missing the required parameter 'tenantId' when calling getFormVariables_0");
				}


				var pathParams = {
					"key": key,
					"tenantId": tenantId
				};
				var queryParams = {
					"variableNames": opts["variableNames"],
					"deserializeValues": opts["deserializeValues"],
				};
				var collectionQueryParams = {
				};
				var headerParams = {
				};
				var formParams = {
				};

				var authNames = [];
				var contentTypes = [];
				var accepts = ["application/json"];
				var returnType = {"String": Object};

				return this.apiClient.callApi(
					"/process-definition/key/{key}/tenant-id/{tenantId}/form-variables", "GET",
					pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
					authNames, contentTypes, accepts, returnType, callback
				);
			};

			/**
     * Callback function to receive the result of the getFormVariables_1 operation.
     * @callback module:api/ProcessDefinitionApi~getFormVariables_1Callback
     * @param {String} error Error message, if any.
     * @param {Object.<String, {'String': Object}>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

			/**
     * Retrieves the start form variables for a process definition (only if they are defined via the Generated Task Form approach).
     * Retrieves the start form variables for a process definition (only if they are defined via the Generated Task Form approach). The start form variables take form data specified on the start event into account. If form fields are defined, the variable types and default values of the form fields are taken into account.
     * @param {String} id Parameter processDefinitionId
     * @param {Object} opts Optional parameters
     * @param {String} opts.variableNames Parameter variableNames
     * @param {Boolean} opts.deserializeValues Parameter deserializeValues (default to true)
     * @param {module:api/ProcessDefinitionApi~getFormVariables_1Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object.<String, {'String': Object}>}
     */
			this.getFormVariables_1 = function(id, opts, callback) {
				opts = opts || {};
				var postBody = null;

				// verify the required parameter 'id' is set
				if (id === undefined || id === null) {
					throw new Error("Missing the required parameter 'id' when calling getFormVariables_1");
				}


				var pathParams = {
					"id": id
				};
				var queryParams = {
					"variableNames": opts["variableNames"],
					"deserializeValues": opts["deserializeValues"],
				};
				var collectionQueryParams = {
				};
				var headerParams = {
				};
				var formParams = {
				};

				var authNames = [];
				var contentTypes = [];
				var accepts = ["application/json"];
				var returnType = {"String": Object};

				return this.apiClient.callApi(
					"/process-definition/{id}/form-variables", "GET",
					pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
					authNames, contentTypes, accepts, returnType, callback
				);
			};

			/**
     * Callback function to receive the result of the getProcessDefinitionBpmn20Xml operation.
     * @callback module:api/ProcessDefinitionApi~getProcessDefinitionBpmn20XmlCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ProcessDefinitionDiagramDto} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

			/**
     * Retrieves the BPMN 2.
     * Retrieves the BPMN 2.0 XML of a process definition.
     * @param {String} key Parameter processDefinitionKey
     * @param {String} tenantId Parameter tenantId
     * @param {module:api/ProcessDefinitionApi~getProcessDefinitionBpmn20XmlCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ProcessDefinitionDiagramDto}
     */
			this.getProcessDefinitionBpmn20Xml = function(key, tenantId, callback) {
				var postBody = null;

				// verify the required parameter 'key' is set
				if (key === undefined || key === null) {
					throw new Error("Missing the required parameter 'key' when calling getProcessDefinitionBpmn20Xml");
				}

				// verify the required parameter 'tenantId' is set
				if (tenantId === undefined || tenantId === null) {
					throw new Error("Missing the required parameter 'tenantId' when calling getProcessDefinitionBpmn20Xml");
				}


				var pathParams = {
					"key": key,
					"tenantId": tenantId
				};
				var queryParams = {
				};
				var collectionQueryParams = {
				};
				var headerParams = {
				};
				var formParams = {
				};

				var authNames = [];
				var contentTypes = [];
				var accepts = ["application/json"];
				var returnType = ProcessDefinitionDiagramDto;

				return this.apiClient.callApi(
					"/process-definition/key/{key}/tenant-id/{tenantId}/xml", "GET",
					pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
					authNames, contentTypes, accepts, returnType, callback
				);
			};

			/**
     * Callback function to receive the result of the getProcessDefinitionBpmn20Xml_0 operation.
     * @callback module:api/ProcessDefinitionApi~getProcessDefinitionBpmn20Xml_0Callback
     * @param {String} error Error message, if any.
     * @param {module:model/ProcessDefinitionDiagramDto} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

			/**
     * Retrieves the BPMN 2.
     * Retrieves the BPMN 2.0 XML of a process definition.
     * @param {String} key Parameter processDefinitionKey
     * @param {module:api/ProcessDefinitionApi~getProcessDefinitionBpmn20Xml_0Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ProcessDefinitionDiagramDto}
     */
			this.getProcessDefinitionBpmn20Xml_0 = function(key, callback) {
				var postBody = null;

				// verify the required parameter 'key' is set
				if (key === undefined || key === null) {
					throw new Error("Missing the required parameter 'key' when calling getProcessDefinitionBpmn20Xml_0");
				}


				var pathParams = {
					"key": key
				};
				var queryParams = {
				};
				var collectionQueryParams = {
				};
				var headerParams = {
				};
				var formParams = {
				};

				var authNames = [];
				var contentTypes = [];
				var accepts = ["application/json"];
				var returnType = ProcessDefinitionDiagramDto;

				return this.apiClient.callApi(
					"/process-definition/key/{key}/xml", "GET",
					pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
					authNames, contentTypes, accepts, returnType, callback
				);
			};

			/**
     * Callback function to receive the result of the getProcessDefinitionBpmn20Xml_1 operation.
     * @callback module:api/ProcessDefinitionApi~getProcessDefinitionBpmn20Xml_1Callback
     * @param {String} error Error message, if any.
     * @param {module:model/ProcessDefinitionDiagramDto} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

			/**
     * Retrieves the BPMN 2.
     * Retrieves the BPMN 2.0 XML of a process definition.
     * @param {String} id Parameter processDefinitionId
     * @param {module:api/ProcessDefinitionApi~getProcessDefinitionBpmn20Xml_1Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ProcessDefinitionDiagramDto}
     */
			this.getProcessDefinitionBpmn20Xml_1 = function(id, callback) {
				var postBody = null;

				// verify the required parameter 'id' is set
				if (id === undefined || id === null) {
					throw new Error("Missing the required parameter 'id' when calling getProcessDefinitionBpmn20Xml_1");
				}


				var pathParams = {
					"id": id
				};
				var queryParams = {
				};
				var collectionQueryParams = {
				};
				var headerParams = {
				};
				var formParams = {
				};

				var authNames = [];
				var contentTypes = [];
				var accepts = ["application/json"];
				var returnType = ProcessDefinitionDiagramDto;

				return this.apiClient.callApi(
					"/process-definition/{id}/xml", "GET",
					pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
					authNames, contentTypes, accepts, returnType, callback
				);
			};

			/**
     * Callback function to receive the result of the getProcessDefinitionById operation.
     * @callback module:api/ProcessDefinitionApi~getProcessDefinitionByIdCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

			/**
     * Retrieves a process definition according to the &#x60;ProcessDefinition&#x60; interface in the engine.
     * Retrieves a process definition according to the &#x60;ProcessDefinition&#x60; interface in the engine.
     * @param {String} id Parameter processDefinitionId
     * @param {module:api/ProcessDefinitionApi~getProcessDefinitionByIdCallback} callback The callback function, accepting three arguments: error, data, response
     */
			this.getProcessDefinitionById = function(id, callback) {
				var postBody = null;

				// verify the required parameter 'id' is set
				if (id === undefined || id === null) {
					throw new Error("Missing the required parameter 'id' when calling getProcessDefinitionById");
				}


				var pathParams = {
					"id": id
				};
				var queryParams = {
				};
				var collectionQueryParams = {
				};
				var headerParams = {
				};
				var formParams = {
				};

				var authNames = [];
				var contentTypes = [];
				var accepts = ["application/json"];
				var returnType = null;

				return this.apiClient.callApi(
					"/process-definition/{id}", "GET",
					pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
					authNames, contentTypes, accepts, returnType, callback
				);
			};

			/**
     * Callback function to receive the result of the getProcessDefinitionByKey operation.
     * @callback module:api/ProcessDefinitionApi~getProcessDefinitionByKeyCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

			/**
     * Retrieves a process definition according to the &#x60;ProcessDefinition&#x60; interface in the engine.
     * Retrieves a process definition according to the &#x60;ProcessDefinition&#x60; interface in the engine.
     * @param {String} key Parameter processDefinitionKey
     * @param {module:api/ProcessDefinitionApi~getProcessDefinitionByKeyCallback} callback The callback function, accepting three arguments: error, data, response
     */
			this.getProcessDefinitionByKey = function(key, callback) {
				var postBody = null;

				// verify the required parameter 'key' is set
				if (key === undefined || key === null) {
					throw new Error("Missing the required parameter 'key' when calling getProcessDefinitionByKey");
				}


				var pathParams = {
					"key": key
				};
				var queryParams = {
				};
				var collectionQueryParams = {
				};
				var headerParams = {
				};
				var formParams = {
				};

				var authNames = [];
				var contentTypes = [];
				var accepts = ["application/json"];
				var returnType = null;

				return this.apiClient.callApi(
					"/process-definition/key/{key}", "GET",
					pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
					authNames, contentTypes, accepts, returnType, callback
				);
			};

			/**
     * Callback function to receive the result of the getProcessDefinitionByKeyAndTenantId operation.
     * @callback module:api/ProcessDefinitionApi~getProcessDefinitionByKeyAndTenantIdCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

			/**
     * Retrieves a process definition according to the &#x60;ProcessDefinition&#x60; interface in the engine.
     * Retrieves a process definition according to the &#x60;ProcessDefinition&#x60; interface in the engine.
     * @param {String} key Parameter processDefinitionKey
     * @param {String} tenantId Parameter tenantId
     * @param {module:api/ProcessDefinitionApi~getProcessDefinitionByKeyAndTenantIdCallback} callback The callback function, accepting three arguments: error, data, response
     */
			this.getProcessDefinitionByKeyAndTenantId = function(key, tenantId, callback) {
				var postBody = null;

				// verify the required parameter 'key' is set
				if (key === undefined || key === null) {
					throw new Error("Missing the required parameter 'key' when calling getProcessDefinitionByKeyAndTenantId");
				}

				// verify the required parameter 'tenantId' is set
				if (tenantId === undefined || tenantId === null) {
					throw new Error("Missing the required parameter 'tenantId' when calling getProcessDefinitionByKeyAndTenantId");
				}


				var pathParams = {
					"key": key,
					"tenantId": tenantId
				};
				var queryParams = {
				};
				var collectionQueryParams = {
				};
				var headerParams = {
				};
				var formParams = {
				};

				var authNames = [];
				var contentTypes = [];
				var accepts = ["application/json"];
				var returnType = null;

				return this.apiClient.callApi(
					"/process-definition/key/{key}/tenant-id/{tenantId}", "GET",
					pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
					authNames, contentTypes, accepts, returnType, callback
				);
			};

			/**
     * Callback function to receive the result of the getProcessDefinitionDiagram operation.
     * @callback module:api/ProcessDefinitionApi~getProcessDefinitionDiagramCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

			/**
     * Retrieves the diagram of a process definition.
     * Retrieves the diagram of a process definition.
     * @param {String} key Parameter processDefinitionKey
     * @param {module:api/ProcessDefinitionApi~getProcessDefinitionDiagramCallback} callback The callback function, accepting three arguments: error, data, response
     */
			this.getProcessDefinitionDiagram = function(key, callback) {
				var postBody = null;

				// verify the required parameter 'key' is set
				if (key === undefined || key === null) {
					throw new Error("Missing the required parameter 'key' when calling getProcessDefinitionDiagram");
				}


				var pathParams = {
					"key": key
				};
				var queryParams = {
				};
				var collectionQueryParams = {
				};
				var headerParams = {
				};
				var formParams = {
				};

				var authNames = [];
				var contentTypes = [];
				var accepts = ["application/json"];
				var returnType = null;

				return this.apiClient.callApi(
					"/process-definition/key/{key}/diagram", "GET",
					pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
					authNames, contentTypes, accepts, returnType, callback
				);
			};

			/**
     * Callback function to receive the result of the getProcessDefinitionDiagram_0 operation.
     * @callback module:api/ProcessDefinitionApi~getProcessDefinitionDiagram_0Callback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

			/**
     * Retrieves the diagram of a process definition.
     * Retrieves the diagram of a process definition.
     * @param {String} key Parameter processDefinitionKey
     * @param {String} tenantId Parameter tenantId
     * @param {module:api/ProcessDefinitionApi~getProcessDefinitionDiagram_0Callback} callback The callback function, accepting three arguments: error, data, response
     */
			this.getProcessDefinitionDiagram_0 = function(key, tenantId, callback) {
				var postBody = null;

				// verify the required parameter 'key' is set
				if (key === undefined || key === null) {
					throw new Error("Missing the required parameter 'key' when calling getProcessDefinitionDiagram_0");
				}

				// verify the required parameter 'tenantId' is set
				if (tenantId === undefined || tenantId === null) {
					throw new Error("Missing the required parameter 'tenantId' when calling getProcessDefinitionDiagram_0");
				}


				var pathParams = {
					"key": key,
					"tenantId": tenantId
				};
				var queryParams = {
				};
				var collectionQueryParams = {
				};
				var headerParams = {
				};
				var formParams = {
				};

				var authNames = [];
				var contentTypes = [];
				var accepts = ["application/json"];
				var returnType = null;

				return this.apiClient.callApi(
					"/process-definition/key/{key}/tenant-id/{tenantId}/diagram", "GET",
					pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
					authNames, contentTypes, accepts, returnType, callback
				);
			};

			/**
     * Callback function to receive the result of the getProcessDefinitionDiagram_1 operation.
     * @callback module:api/ProcessDefinitionApi~getProcessDefinitionDiagram_1Callback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

			/**
     * Retrieves the diagram of a process definition.
     * Retrieves the diagram of a process definition.
     * @param {String} id Parameter processDefinitionId
     * @param {module:api/ProcessDefinitionApi~getProcessDefinitionDiagram_1Callback} callback The callback function, accepting three arguments: error, data, response
     */
			this.getProcessDefinitionDiagram_1 = function(id, callback) {
				var postBody = null;

				// verify the required parameter 'id' is set
				if (id === undefined || id === null) {
					throw new Error("Missing the required parameter 'id' when calling getProcessDefinitionDiagram_1");
				}


				var pathParams = {
					"id": id
				};
				var queryParams = {
				};
				var collectionQueryParams = {
				};
				var headerParams = {
				};
				var formParams = {
				};

				var authNames = [];
				var contentTypes = [];
				var accepts = ["application/json"];
				var returnType = null;

				return this.apiClient.callApi(
					"/process-definition/{id}/diagram", "GET",
					pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
					authNames, contentTypes, accepts, returnType, callback
				);
			};

			/**
     * Callback function to receive the result of the getProcessDefinitions operation.
     * @callback module:api/ProcessDefinitionApi~getProcessDefinitionsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<Object>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

			/**
     * Queries for process definitions that fulfill given parameters.
     * Queries for process definitions that fulfill given parameters. Parameters may be the properties of process definitions, such as the name, key or version. The size of the result set can be retrieved by using the Get Definition Count method.
     * @param {Object} opts Optional parameters
     * @param {Number} opts.firstResult Parameter firstResult
     * @param {Number} opts.maxResults Parameter maxResults
     * @param {String} opts.resourceNameLike Filter by names of those process definition resources that the parameter is a substring of.
     * @param {String} opts.includeProcessDefinitionsWithoutTenantId Include process definitions which belong to no tenant. Can be used in combination with tenantIdIn. Value may only be true, as false is the default behavior.
     * @param {String} opts.incidentType Filter by the incident type. See the User Guide for a list of incident types.
     * @param {String} opts.firstResult2 Pagination of results. Specifies the index of the first result to return.
     * @param {String} opts.categoryLike Filter by process definition categories that the parameter is a substring of.
     * @param {String} opts.tenantIdIn Filter by a comma-separated list of tenant ids. A process definition must have one of the given tenant ids.
     * @param {String} opts.maxResults2 Pagination of results. Specifies the maximum number of results to return. Will return less results if there are no more results left.
     * @param {String} opts.deploymentId Filter by the deployment the id belongs to.
     * @param {String} opts.sortBy Sort the results lexicographically by a given criterion. Valid values are category, key, id, name, version, deploymentId, tenantId and versionTag. Must be used in conjunction with the sortOrder parameter. Note: Sorting by versionTag is string based. The version will not be interpreted. As an example, the sorting could return v0.1.0, v0.10.0, v0.2.0.
     * @param {String} opts.startableBy Filter by a user name who is allowed to start the process.
     * @param {String} opts.key Filter by process definition key, i.e., the id in the BPMN 2.0 XML. Exact match.
     * @param {String} opts.processDefinitionId Filter by process definition id.
     * @param {String} opts.incidentMessage Filter by the incident message. Exact match.
     * @param {String} opts.processDefinitionIdIn Filter by process definition ids.
     * @param {String} opts.active Only include active process definitions. Value may only be true, as false is the default behavior.
     * @param {String} opts.resourceName Filter by the name of the process definition resource. Exact match.
     * @param {String} opts.versionTag Filter by the version tag.
     * @param {String} opts.versionTagLike Filter by the version tag that the parameter is a substring of.
     * @param {String} opts.version Filter by process definition version.
     * @param {String} opts.suspended Only include suspended process definitions. Value may only be true, as false is the default behavior.
     * @param {String} opts.nameLike Filter by process definition names that the parameter is a substring of.
     * @param {String} opts.latestVersion Only include those process definitions that are latest versions. Value may only be true, as false is the default behavior.
     * @param {String} opts.keyLike Filter by process definition keys that the parameter is a substring of.
     * @param {String} opts.sortOrder Sort the results in a given order. Values may be asc for ascending order or desc for descending order. Must be used in conjunction with the sortBy parameter.
     * @param {String} opts.name Filter by process definition name.
     * @param {String} opts.withoutTenantId Only include process definitions which belong to no tenant. Value may only be true, as false is the default behavior.
     * @param {String} opts.category Filter by process definition category. Exact match.
     * @param {String} opts.incidentId Filter by the incident id.
     * @param {String} opts.incidentMessageLike Filter by the incident message that the parameter is a substring of.
     * @param {module:api/ProcessDefinitionApi~getProcessDefinitionsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<Object>}
     */
			this.getProcessDefinitions = function(opts, callback) {
				opts = opts || {};
				var postBody = null;


				var pathParams = {
				};
				var queryParams = {
					"firstResult": opts["firstResult"],
					"maxResults": opts["maxResults"],
					"resourceNameLike": opts["resourceNameLike"],
					"includeProcessDefinitionsWithoutTenantId": opts["includeProcessDefinitionsWithoutTenantId"],
					"incidentType": opts["incidentType"],
					"firstResult2": opts["firstResult2"],
					"categoryLike": opts["categoryLike"],
					"tenantIdIn": opts["tenantIdIn"],
					"maxResults2": opts["maxResults2"],
					"deploymentId": opts["deploymentId"],
					"sortBy": opts["sortBy"],
					"startableBy": opts["startableBy"],
					"key": opts["key"],
					"processDefinitionId": opts["processDefinitionId"],
					"incidentMessage": opts["incidentMessage"],
					"processDefinitionIdIn": opts["processDefinitionIdIn"],
					"active": opts["active"],
					"resourceName": opts["resourceName"],
					"versionTag": opts["versionTag"],
					"versionTagLike": opts["versionTagLike"],
					"version": opts["version"],
					"suspended": opts["suspended"],
					"nameLike": opts["nameLike"],
					"latestVersion": opts["latestVersion"],
					"keyLike": opts["keyLike"],
					"sortOrder": opts["sortOrder"],
					"name": opts["name"],
					"withoutTenantId": opts["withoutTenantId"],
					"category": opts["category"],
					"incidentId": opts["incidentId"],
					"incidentMessageLike": opts["incidentMessageLike"],
				};
				var collectionQueryParams = {
				};
				var headerParams = {
				};
				var formParams = {
				};

				var authNames = [];
				var contentTypes = [];
				var accepts = ["application/json"];
				var returnType = [Object];

				return this.apiClient.callApi(
					"/process-definition", "GET",
					pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
					authNames, contentTypes, accepts, returnType, callback
				);
			};

			/**
     * Callback function to receive the result of the getProcessDefinitionsCount operation.
     * @callback module:api/ProcessDefinitionApi~getProcessDefinitionsCountCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CountResultDto} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

			/**
     * Requests the number of process definitions that fulfill the query criteria.
     * Requests the number of process definitions that fulfill the query criteria. Takes the same filtering parameters as the Get Definitions method.
     * @param {Object} opts Optional parameters
     * @param {String} opts.resourceNameLike Filter by names of those process definition resources that the parameter is a substring of.
     * @param {String} opts.includeProcessDefinitionsWithoutTenantId Include process definitions which belong to no tenant. Can be used in combination with tenantIdIn. Value may only be true, as false is the default behavior.
     * @param {String} opts.incidentType Filter by the incident type. See the User Guide for a list of incident types.
     * @param {String} opts.categoryLike Filter by process definition categories that the parameter is a substring of.
     * @param {String} opts.tenantIdIn Filter by a comma-separated list of tenant ids. A process definition must have one of the given tenant ids.
     * @param {String} opts.deploymentId Filter by the deployment the id belongs to.
     * @param {String} opts.startableBy Filter by a user name who is allowed to start the process.
     * @param {String} opts.key Filter by process definition key, i.e., the id in the BPMN 2.0 XML. Exact match.
     * @param {String} opts.processDefinitionId Filter by process definition id.
     * @param {String} opts.incidentMessage Filter by the incident message. Exact match.
     * @param {String} opts.processDefinitionIdIn Filter by process definition ids.
     * @param {String} opts.active Only include active process definitions. Value may only be true, as false is the default behavior.
     * @param {String} opts.resourceName Filter by the name of the process definition resource. Exact match.
     * @param {String} opts.versionTag Filter by the version tag.
     * @param {String} opts.versionTagLike Filter by the version tag that the parameter is a substring of.
     * @param {String} opts.version Filter by process definition version.
     * @param {String} opts.suspended Only include suspended process definitions. Value may only be true, as false is the default behavior.
     * @param {String} opts.nameLike Filter by process definition names that the parameter is a substring of.
     * @param {String} opts.latestVersion Only include those process definitions that are latest versions. Value may only be true, as false is the default behavior.
     * @param {String} opts.keyLike Filter by process definition keys that the parameter is a substring of.
     * @param {String} opts.name Filter by process definition name.
     * @param {String} opts.withoutTenantId Only include process definitions which belong to no tenant. Value may only be true, as false is the default behavior.
     * @param {String} opts.category Filter by process definition category. Exact match.
     * @param {String} opts.incidentId Filter by the incident id.
     * @param {String} opts.incidentMessageLike Filter by the incident message that the parameter is a substring of.
     * @param {module:api/ProcessDefinitionApi~getProcessDefinitionsCountCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CountResultDto}
     */
			this.getProcessDefinitionsCount = function(opts, callback) {
				opts = opts || {};
				var postBody = null;


				var pathParams = {
				};
				var queryParams = {
					"resourceNameLike": opts["resourceNameLike"],
					"includeProcessDefinitionsWithoutTenantId": opts["includeProcessDefinitionsWithoutTenantId"],
					"incidentType": opts["incidentType"],
					"categoryLike": opts["categoryLike"],
					"tenantIdIn": opts["tenantIdIn"],
					"deploymentId": opts["deploymentId"],
					"startableBy": opts["startableBy"],
					"key": opts["key"],
					"processDefinitionId": opts["processDefinitionId"],
					"incidentMessage": opts["incidentMessage"],
					"processDefinitionIdIn": opts["processDefinitionIdIn"],
					"active": opts["active"],
					"resourceName": opts["resourceName"],
					"versionTag": opts["versionTag"],
					"versionTagLike": opts["versionTagLike"],
					"version": opts["version"],
					"suspended": opts["suspended"],
					"nameLike": opts["nameLike"],
					"latestVersion": opts["latestVersion"],
					"keyLike": opts["keyLike"],
					"name": opts["name"],
					"withoutTenantId": opts["withoutTenantId"],
					"category": opts["category"],
					"incidentId": opts["incidentId"],
					"incidentMessageLike": opts["incidentMessageLike"],
				};
				var collectionQueryParams = {
				};
				var headerParams = {
				};
				var formParams = {
				};

				var authNames = [];
				var contentTypes = [];
				var accepts = ["application/json"];
				var returnType = CountResultDto;

				return this.apiClient.callApi(
					"/process-definition/count", "GET",
					pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
					authNames, contentTypes, accepts, returnType, callback
				);
			};

			/**
     * Callback function to receive the result of the getRenderedForm operation.
     * @callback module:api/ProcessDefinitionApi~getRenderedFormCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

			/**
     * Retrieves the rendered form for a process definition.
     * Retrieves the rendered form for a process definition. This method can be used for getting the HTML rendering of a Generated Task Form.
     * @param {String} key Parameter processDefinitionKey
     * @param {module:api/ProcessDefinitionApi~getRenderedFormCallback} callback The callback function, accepting three arguments: error, data, response
     */
			this.getRenderedForm = function(key, callback) {
				var postBody = null;

				// verify the required parameter 'key' is set
				if (key === undefined || key === null) {
					throw new Error("Missing the required parameter 'key' when calling getRenderedForm");
				}


				var pathParams = {
					"key": key
				};
				var queryParams = {
				};
				var collectionQueryParams = {
				};
				var headerParams = {
				};
				var formParams = {
				};

				var authNames = [];
				var contentTypes = [];
				var accepts = ["application/xhtml+xml"];
				var returnType = null;

				return this.apiClient.callApi(
					"/process-definition/key/{key}/rendered-form", "GET",
					pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
					authNames, contentTypes, accepts, returnType, callback
				);
			};

			/**
     * Callback function to receive the result of the getRenderedForm_0 operation.
     * @callback module:api/ProcessDefinitionApi~getRenderedForm_0Callback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

			/**
     * Retrieves the rendered form for a process definition.
     * Retrieves the rendered form for a process definition. This method can be used for getting the HTML rendering of a Generated Task Form.
     * @param {String} key Parameter processDefinitionKey
     * @param {String} tenantId Parameter tenantId
     * @param {module:api/ProcessDefinitionApi~getRenderedForm_0Callback} callback The callback function, accepting three arguments: error, data, response
     */
			this.getRenderedForm_0 = function(key, tenantId, callback) {
				var postBody = null;

				// verify the required parameter 'key' is set
				if (key === undefined || key === null) {
					throw new Error("Missing the required parameter 'key' when calling getRenderedForm_0");
				}

				// verify the required parameter 'tenantId' is set
				if (tenantId === undefined || tenantId === null) {
					throw new Error("Missing the required parameter 'tenantId' when calling getRenderedForm_0");
				}


				var pathParams = {
					"key": key,
					"tenantId": tenantId
				};
				var queryParams = {
				};
				var collectionQueryParams = {
				};
				var headerParams = {
				};
				var formParams = {
				};

				var authNames = [];
				var contentTypes = [];
				var accepts = ["application/xhtml+xml"];
				var returnType = null;

				return this.apiClient.callApi(
					"/process-definition/key/{key}/tenant-id/{tenantId}/rendered-form", "GET",
					pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
					authNames, contentTypes, accepts, returnType, callback
				);
			};

			/**
     * Callback function to receive the result of the getRenderedForm_1 operation.
     * @callback module:api/ProcessDefinitionApi~getRenderedForm_1Callback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

			/**
     * Retrieves the rendered form for a process definition.
     * Retrieves the rendered form for a process definition. This method can be used for getting the HTML rendering of a Generated Task Form.
     * @param {String} id Parameter processDefinitionId
     * @param {module:api/ProcessDefinitionApi~getRenderedForm_1Callback} callback The callback function, accepting three arguments: error, data, response
     */
			this.getRenderedForm_1 = function(id, callback) {
				var postBody = null;

				// verify the required parameter 'id' is set
				if (id === undefined || id === null) {
					throw new Error("Missing the required parameter 'id' when calling getRenderedForm_1");
				}


				var pathParams = {
					"id": id
				};
				var queryParams = {
				};
				var collectionQueryParams = {
				};
				var headerParams = {
				};
				var formParams = {
				};

				var authNames = [];
				var contentTypes = [];
				var accepts = ["application/xhtml+xml"];
				var returnType = null;

				return this.apiClient.callApi(
					"/process-definition/{id}/rendered-form", "GET",
					pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
					authNames, contentTypes, accepts, returnType, callback
				);
			};

			/**
     * Callback function to receive the result of the getStartForm operation.
     * @callback module:api/ProcessDefinitionApi~getStartFormCallback
     * @param {String} error Error message, if any.
     * @param {module:model/FormDto} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

			/**
     * Retrieves the key of the start form for a process definition.
     * Retrieves the key of the start form for a process definition. The form key corresponds to the &#x60;FormData#formKey&#x60; property in the engine.
     * @param {String} key Parameter processDefinitionKey
     * @param {module:api/ProcessDefinitionApi~getStartFormCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/FormDto}
     */
			this.getStartForm = function(key, callback) {
				var postBody = null;

				// verify the required parameter 'key' is set
				if (key === undefined || key === null) {
					throw new Error("Missing the required parameter 'key' when calling getStartForm");
				}


				var pathParams = {
					"key": key
				};
				var queryParams = {
				};
				var collectionQueryParams = {
				};
				var headerParams = {
				};
				var formParams = {
				};

				var authNames = [];
				var contentTypes = [];
				var accepts = ["application/json"];
				var returnType = FormDto;

				return this.apiClient.callApi(
					"/process-definition/key/{key}/startForm", "GET",
					pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
					authNames, contentTypes, accepts, returnType, callback
				);
			};

			/**
     * Callback function to receive the result of the getStartForm_0 operation.
     * @callback module:api/ProcessDefinitionApi~getStartForm_0Callback
     * @param {String} error Error message, if any.
     * @param {module:model/FormDto} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

			/**
     * Retrieves the key of the start form for a process definition.
     * Retrieves the key of the start form for a process definition. The form key corresponds to the &#x60;FormData#formKey&#x60; property in the engine.
     * @param {String} key Parameter processDefinitionKey
     * @param {String} tenantId Parameter tenantId
     * @param {module:api/ProcessDefinitionApi~getStartForm_0Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/FormDto}
     */
			this.getStartForm_0 = function(key, tenantId, callback) {
				var postBody = null;

				// verify the required parameter 'key' is set
				if (key === undefined || key === null) {
					throw new Error("Missing the required parameter 'key' when calling getStartForm_0");
				}

				// verify the required parameter 'tenantId' is set
				if (tenantId === undefined || tenantId === null) {
					throw new Error("Missing the required parameter 'tenantId' when calling getStartForm_0");
				}


				var pathParams = {
					"key": key,
					"tenantId": tenantId
				};
				var queryParams = {
				};
				var collectionQueryParams = {
				};
				var headerParams = {
				};
				var formParams = {
				};

				var authNames = [];
				var contentTypes = [];
				var accepts = ["application/json"];
				var returnType = FormDto;

				return this.apiClient.callApi(
					"/process-definition/key/{key}/tenant-id/{tenantId}/startForm", "GET",
					pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
					authNames, contentTypes, accepts, returnType, callback
				);
			};

			/**
     * Callback function to receive the result of the getStartForm_1 operation.
     * @callback module:api/ProcessDefinitionApi~getStartForm_1Callback
     * @param {String} error Error message, if any.
     * @param {module:model/FormDto} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

			/**
     * Retrieves the key of the start form for a process definition.
     * Retrieves the key of the start form for a process definition. The form key corresponds to the &#x60;FormData#formKey&#x60; property in the engine.
     * @param {String} id Parameter processDefinitionId
     * @param {module:api/ProcessDefinitionApi~getStartForm_1Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/FormDto}
     */
			this.getStartForm_1 = function(id, callback) {
				var postBody = null;

				// verify the required parameter 'id' is set
				if (id === undefined || id === null) {
					throw new Error("Missing the required parameter 'id' when calling getStartForm_1");
				}


				var pathParams = {
					"id": id
				};
				var queryParams = {
				};
				var collectionQueryParams = {
				};
				var headerParams = {
				};
				var formParams = {
				};

				var authNames = [];
				var contentTypes = [];
				var accepts = ["application/json"];
				var returnType = FormDto;

				return this.apiClient.callApi(
					"/process-definition/{id}/startForm", "GET",
					pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
					authNames, contentTypes, accepts, returnType, callback
				);
			};

			/**
     * Callback function to receive the result of the getStatistics operation.
     * @callback module:api/ProcessDefinitionApi~getStatisticsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<Object>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

			/**
     * Retrieves runtime statistics of the process engine, grouped by process definitions.
     * Retrieves runtime statistics of the process engine, grouped by process definitions. These statistics include the number of running process instances, optionally the number of failed jobs and also optionally the number of incidents either grouped by incident types or for a specific incident type.  Note: This does not include historic data.
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.failedJobs Parameter includeFailedJobs
     * @param {Boolean} opts.incidents Parameter includeIncidents
     * @param {String} opts.incidentsForType Parameter includeIncidentsForType
     * @param {module:api/ProcessDefinitionApi~getStatisticsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<Object>}
     */
			this.getStatistics = function(opts, callback) {
				opts = opts || {};
				var postBody = null;


				var pathParams = {
				};
				var queryParams = {
					"failedJobs": opts["failedJobs"],
					"incidents": opts["incidents"],
					"incidentsForType": opts["incidentsForType"],
				};
				var collectionQueryParams = {
				};
				var headerParams = {
				};
				var formParams = {
				};

				var authNames = [];
				var contentTypes = [];
				var accepts = ["application/json"];
				var returnType = [Object];

				return this.apiClient.callApi(
					"/process-definition/statistics", "GET",
					pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
					authNames, contentTypes, accepts, returnType, callback
				);
			};

			/**
     * Callback function to receive the result of the restartProcessInstance operation.
     * @callback module:api/ProcessDefinitionApi~restartProcessInstanceCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

			/**
     * Restart Process Instance.
     * Restart Process Instance
     * @param {String} key Parameter processDefinitionKey
     * @param {module:api/ProcessDefinitionApi~restartProcessInstanceCallback} callback The callback function, accepting three arguments: error, data, response
     */
			this.restartProcessInstance = function(key, callback) {
				var postBody = null;

				// verify the required parameter 'key' is set
				if (key === undefined || key === null) {
					throw new Error("Missing the required parameter 'key' when calling restartProcessInstance");
				}


				var pathParams = {
					"key": key
				};
				var queryParams = {
				};
				var collectionQueryParams = {
				};
				var headerParams = {
				};
				var formParams = {
				};

				var authNames = [];
				var contentTypes = ["application/json"];
				var accepts = ["application/json"];
				var returnType = null;

				return this.apiClient.callApi(
					"/process-definition/key/{key}/restart", "POST",
					pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
					authNames, contentTypes, accepts, returnType, callback
				);
			};

			/**
     * Callback function to receive the result of the restartProcessInstanceAsync operation.
     * @callback module:api/ProcessDefinitionApi~restartProcessInstanceAsyncCallback
     * @param {String} error Error message, if any.
     * @param {module:model/BatchDto} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

			/**
     * Restart Process Instance Async.
     * Restart Process Instance Async
     * @param {String} key Parameter processDefinitionKey
     * @param {module:api/ProcessDefinitionApi~restartProcessInstanceAsyncCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/BatchDto}
     */
			this.restartProcessInstanceAsync = function(key, callback) {
				var postBody = null;

				// verify the required parameter 'key' is set
				if (key === undefined || key === null) {
					throw new Error("Missing the required parameter 'key' when calling restartProcessInstanceAsync");
				}


				var pathParams = {
					"key": key
				};
				var queryParams = {
				};
				var collectionQueryParams = {
				};
				var headerParams = {
				};
				var formParams = {
				};

				var authNames = [];
				var contentTypes = ["application/json"];
				var accepts = ["application/json"];
				var returnType = BatchDto;

				return this.apiClient.callApi(
					"/process-definition/key/{key}/restart-async", "POST",
					pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
					authNames, contentTypes, accepts, returnType, callback
				);
			};

			/**
     * Callback function to receive the result of the restartProcessInstanceAsync_0 operation.
     * @callback module:api/ProcessDefinitionApi~restartProcessInstanceAsync_0Callback
     * @param {String} error Error message, if any.
     * @param {module:model/BatchDto} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

			/**
     * Restart Process Instance Async.
     * Restart Process Instance Async
     * @param {String} key Parameter processDefinitionKey
     * @param {String} tenantId Parameter tenantId
     * @param {module:api/ProcessDefinitionApi~restartProcessInstanceAsync_0Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/BatchDto}
     */
			this.restartProcessInstanceAsync_0 = function(key, tenantId, callback) {
				var postBody = null;

				// verify the required parameter 'key' is set
				if (key === undefined || key === null) {
					throw new Error("Missing the required parameter 'key' when calling restartProcessInstanceAsync_0");
				}

				// verify the required parameter 'tenantId' is set
				if (tenantId === undefined || tenantId === null) {
					throw new Error("Missing the required parameter 'tenantId' when calling restartProcessInstanceAsync_0");
				}


				var pathParams = {
					"key": key,
					"tenantId": tenantId
				};
				var queryParams = {
				};
				var collectionQueryParams = {
				};
				var headerParams = {
				};
				var formParams = {
				};

				var authNames = [];
				var contentTypes = ["application/json"];
				var accepts = ["application/json"];
				var returnType = BatchDto;

				return this.apiClient.callApi(
					"/process-definition/key/{key}/tenant-id/{tenantId}/restart-async", "POST",
					pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
					authNames, contentTypes, accepts, returnType, callback
				);
			};

			/**
     * Callback function to receive the result of the restartProcessInstanceAsync_1 operation.
     * @callback module:api/ProcessDefinitionApi~restartProcessInstanceAsync_1Callback
     * @param {String} error Error message, if any.
     * @param {module:model/BatchDto} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

			/**
     * Restart Process Instance Async.
     * Restart Process Instance Async
     * @param {String} id Parameter processDefinitionId
     * @param {module:api/ProcessDefinitionApi~restartProcessInstanceAsync_1Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/BatchDto}
     */
			this.restartProcessInstanceAsync_1 = function(id, callback) {
				var postBody = null;

				// verify the required parameter 'id' is set
				if (id === undefined || id === null) {
					throw new Error("Missing the required parameter 'id' when calling restartProcessInstanceAsync_1");
				}


				var pathParams = {
					"id": id
				};
				var queryParams = {
				};
				var collectionQueryParams = {
				};
				var headerParams = {
				};
				var formParams = {
				};

				var authNames = [];
				var contentTypes = ["application/json"];
				var accepts = ["application/json"];
				var returnType = BatchDto;

				return this.apiClient.callApi(
					"/process-definition/{id}/restart-async", "POST",
					pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
					authNames, contentTypes, accepts, returnType, callback
				);
			};

			/**
     * Callback function to receive the result of the restartProcessInstance_0 operation.
     * @callback module:api/ProcessDefinitionApi~restartProcessInstance_0Callback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

			/**
     * Restart Process Instance.
     * Restart Process Instance
     * @param {String} key Parameter processDefinitionKey
     * @param {String} tenantId Parameter tenantId
     * @param {module:api/ProcessDefinitionApi~restartProcessInstance_0Callback} callback The callback function, accepting three arguments: error, data, response
     */
			this.restartProcessInstance_0 = function(key, tenantId, callback) {
				var postBody = null;

				// verify the required parameter 'key' is set
				if (key === undefined || key === null) {
					throw new Error("Missing the required parameter 'key' when calling restartProcessInstance_0");
				}

				// verify the required parameter 'tenantId' is set
				if (tenantId === undefined || tenantId === null) {
					throw new Error("Missing the required parameter 'tenantId' when calling restartProcessInstance_0");
				}


				var pathParams = {
					"key": key,
					"tenantId": tenantId
				};
				var queryParams = {
				};
				var collectionQueryParams = {
				};
				var headerParams = {
				};
				var formParams = {
				};

				var authNames = [];
				var contentTypes = ["application/json"];
				var accepts = ["application/json"];
				var returnType = null;

				return this.apiClient.callApi(
					"/process-definition/key/{key}/tenant-id/{tenantId}/restart", "POST",
					pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
					authNames, contentTypes, accepts, returnType, callback
				);
			};

			/**
     * Callback function to receive the result of the restartProcessInstance_1 operation.
     * @callback module:api/ProcessDefinitionApi~restartProcessInstance_1Callback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

			/**
     * Restart Process Instance.
     * Restart Process Instance
     * @param {String} id Parameter processDefinitionId
     * @param {module:api/ProcessDefinitionApi~restartProcessInstance_1Callback} callback The callback function, accepting three arguments: error, data, response
     */
			this.restartProcessInstance_1 = function(id, callback) {
				var postBody = null;

				// verify the required parameter 'id' is set
				if (id === undefined || id === null) {
					throw new Error("Missing the required parameter 'id' when calling restartProcessInstance_1");
				}


				var pathParams = {
					"id": id
				};
				var queryParams = {
				};
				var collectionQueryParams = {
				};
				var headerParams = {
				};
				var formParams = {
				};

				var authNames = [];
				var contentTypes = ["application/json"];
				var accepts = ["application/json"];
				var returnType = null;

				return this.apiClient.callApi(
					"/process-definition/{id}/restart", "POST",
					pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
					authNames, contentTypes, accepts, returnType, callback
				);
			};

			/**
     * Callback function to receive the result of the startProcessInstance operation.
     * @callback module:api/ProcessDefinitionApi~startProcessInstanceCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ProcessInstanceDto} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

			/**
     * Instantiates a given process definition.
     * Instantiates a given process definition. Process variables and business key may be supplied in the request body.
     * @param {String} key Parameter processDefinitionKey
     * @param {Object} opts Optional parameters
     * @param {module:model/StartProcessInstanceDto} opts.body Parameter parameters
     * @param {module:api/ProcessDefinitionApi~startProcessInstanceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ProcessInstanceDto}
     */
			this.startProcessInstance = function(key, opts, callback) {
				opts = opts || {};
				var postBody = opts["body"];

				// verify the required parameter 'key' is set
				if (key === undefined || key === null) {
					throw new Error("Missing the required parameter 'key' when calling startProcessInstance");
				}


				var pathParams = {
					"key": key
				};
				var queryParams = {
				};
				var collectionQueryParams = {
				};
				var headerParams = {
				};
				var formParams = {
				};

				var authNames = [];
				var contentTypes = ["application/json"];
				var accepts = ["application/json"];
				var returnType = ProcessInstanceDto;

				return this.apiClient.callApi(
					"/process-definition/key/{key}/start", "POST",
					pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
					authNames, contentTypes, accepts, returnType, callback
				);
			};

			/**
     * Callback function to receive the result of the startProcessInstance_0 operation.
     * @callback module:api/ProcessDefinitionApi~startProcessInstance_0Callback
     * @param {String} error Error message, if any.
     * @param {module:model/ProcessInstanceDto} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

			/**
     * Instantiates a given process definition.
     * Instantiates a given process definition. Process variables and business key may be supplied in the request body.
     * @param {String} key Parameter processDefinitionKey
     * @param {String} tenantId Parameter tenantId
     * @param {Object} opts Optional parameters
     * @param {module:model/StartProcessInstanceDto} opts.body Parameter parameters
     * @param {module:api/ProcessDefinitionApi~startProcessInstance_0Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ProcessInstanceDto}
     */
			this.startProcessInstance_0 = function(key, tenantId, opts, callback) {
				opts = opts || {};
				var postBody = opts["body"];

				// verify the required parameter 'key' is set
				if (key === undefined || key === null) {
					throw new Error("Missing the required parameter 'key' when calling startProcessInstance_0");
				}

				// verify the required parameter 'tenantId' is set
				if (tenantId === undefined || tenantId === null) {
					throw new Error("Missing the required parameter 'tenantId' when calling startProcessInstance_0");
				}


				var pathParams = {
					"key": key,
					"tenantId": tenantId
				};
				var queryParams = {
				};
				var collectionQueryParams = {
				};
				var headerParams = {
				};
				var formParams = {
				};

				var authNames = [];
				var contentTypes = ["application/json"];
				var accepts = ["application/json"];
				var returnType = ProcessInstanceDto;

				return this.apiClient.callApi(
					"/process-definition/key/{key}/tenant-id/{tenantId}/start", "POST",
					pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
					authNames, contentTypes, accepts, returnType, callback
				);
			};

			/**
     * Callback function to receive the result of the startProcessInstance_1 operation.
     * @callback module:api/ProcessDefinitionApi~startProcessInstance_1Callback
     * @param {String} error Error message, if any.
     * @param {module:model/ProcessInstanceDto} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

			/**
     * Instantiates a given process definition.
     * Instantiates a given process definition. Process variables and business key may be supplied in the request body.
     * @param {String} id Parameter processDefinitionId
     * @param {Object} opts Optional parameters
     * @param {module:model/StartProcessInstanceDto} opts.body Parameter parameters
     * @param {module:api/ProcessDefinitionApi~startProcessInstance_1Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ProcessInstanceDto}
     */
			this.startProcessInstance_1 = function(id, opts, callback) {
				opts = opts || {};
				var postBody = opts["body"];

				// verify the required parameter 'id' is set
				if (id === undefined || id === null) {
					throw new Error("Missing the required parameter 'id' when calling startProcessInstance_1");
				}


				var pathParams = {
					"id": id
				};
				var queryParams = {
				};
				var collectionQueryParams = {
				};
				var headerParams = {
				};
				var formParams = {
				};

				var authNames = [];
				var contentTypes = ["application/json"];
				var accepts = ["application/json"];
				var returnType = ProcessInstanceDto;

				return this.apiClient.callApi(
					"/process-definition/{id}/start", "POST",
					pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
					authNames, contentTypes, accepts, returnType, callback
				);
			};

			/**
     * Callback function to receive the result of the submitForm operation.
     * @callback module:api/ProcessDefinitionApi~submitFormCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ProcessInstanceDto} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

			/**
     * Starts a process instance using a set of process variables and the business key.
     * Starts a process instance using a set of process variables and the business key. If the start event has Form Field Metadata defined, the process engine will perform backend validation for any form fields which have validators defined. See Documentation on Generated Task Forms.
     * @param {String} key Parameter processDefinitionKey
     * @param {Object} opts Optional parameters
     * @param {module:model/StartProcessInstanceDto} opts.body Parameter parameters
     * @param {module:api/ProcessDefinitionApi~submitFormCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ProcessInstanceDto}
     */
			this.submitForm = function(key, opts, callback) {
				opts = opts || {};
				var postBody = opts["body"];

				// verify the required parameter 'key' is set
				if (key === undefined || key === null) {
					throw new Error("Missing the required parameter 'key' when calling submitForm");
				}


				var pathParams = {
					"key": key
				};
				var queryParams = {
				};
				var collectionQueryParams = {
				};
				var headerParams = {
				};
				var formParams = {
				};

				var authNames = [];
				var contentTypes = ["application/json"];
				var accepts = ["application/json"];
				var returnType = ProcessInstanceDto;

				return this.apiClient.callApi(
					"/process-definition/key/{key}/submit-form", "POST",
					pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
					authNames, contentTypes, accepts, returnType, callback
				);
			};

			/**
     * Callback function to receive the result of the submitForm_0 operation.
     * @callback module:api/ProcessDefinitionApi~submitForm_0Callback
     * @param {String} error Error message, if any.
     * @param {module:model/ProcessInstanceDto} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

			/**
     * Starts a process instance using a set of process variables and the business key.
     * Starts a process instance using a set of process variables and the business key. If the start event has Form Field Metadata defined, the process engine will perform backend validation for any form fields which have validators defined. See Documentation on Generated Task Forms.
     * @param {String} key Parameter processDefinitionKey
     * @param {String} tenantId Parameter tenantId
     * @param {Object} opts Optional parameters
     * @param {module:model/StartProcessInstanceDto} opts.body Parameter parameters
     * @param {module:api/ProcessDefinitionApi~submitForm_0Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ProcessInstanceDto}
     */
			this.submitForm_0 = function(key, tenantId, opts, callback) {
				opts = opts || {};
				var postBody = opts["body"];

				// verify the required parameter 'key' is set
				if (key === undefined || key === null) {
					throw new Error("Missing the required parameter 'key' when calling submitForm_0");
				}

				// verify the required parameter 'tenantId' is set
				if (tenantId === undefined || tenantId === null) {
					throw new Error("Missing the required parameter 'tenantId' when calling submitForm_0");
				}


				var pathParams = {
					"key": key,
					"tenantId": tenantId
				};
				var queryParams = {
				};
				var collectionQueryParams = {
				};
				var headerParams = {
				};
				var formParams = {
				};

				var authNames = [];
				var contentTypes = ["application/json"];
				var accepts = ["application/json"];
				var returnType = ProcessInstanceDto;

				return this.apiClient.callApi(
					"/process-definition/key/{key}/tenant-id/{tenantId}/submit-form", "POST",
					pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
					authNames, contentTypes, accepts, returnType, callback
				);
			};

			/**
     * Callback function to receive the result of the submitForm_1 operation.
     * @callback module:api/ProcessDefinitionApi~submitForm_1Callback
     * @param {String} error Error message, if any.
     * @param {module:model/ProcessInstanceDto} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

			/**
     * Starts a process instance using a set of process variables and the business key.
     * Starts a process instance using a set of process variables and the business key. If the start event has Form Field Metadata defined, the process engine will perform backend validation for any form fields which have validators defined. See Documentation on Generated Task Forms.
     * @param {String} id Parameter processDefinitionId
     * @param {Object} opts Optional parameters
     * @param {module:model/StartProcessInstanceDto} opts.body Parameter parameters
     * @param {module:api/ProcessDefinitionApi~submitForm_1Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ProcessInstanceDto}
     */
			this.submitForm_1 = function(id, opts, callback) {
				opts = opts || {};
				var postBody = opts["body"];

				// verify the required parameter 'id' is set
				if (id === undefined || id === null) {
					throw new Error("Missing the required parameter 'id' when calling submitForm_1");
				}


				var pathParams = {
					"id": id
				};
				var queryParams = {
				};
				var collectionQueryParams = {
				};
				var headerParams = {
				};
				var formParams = {
				};

				var authNames = [];
				var contentTypes = ["application/json"];
				var accepts = ["application/json"];
				var returnType = ProcessInstanceDto;

				return this.apiClient.callApi(
					"/process-definition/{id}/submit-form", "POST",
					pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
					authNames, contentTypes, accepts, returnType, callback
				);
			};

			/**
     * Callback function to receive the result of the updateHistoryTimeToLive operation.
     * @callback module:api/ProcessDefinitionApi~updateHistoryTimeToLiveCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

			/**
     * Updates history time to live for process definition.
     * Updates history time to live for process definition. The field is used within History cleanup.
     * @param {String} key Parameter processDefinitionKey
     * @param {Object} opts Optional parameters
     * @param {module:model/HistoryTimeToLiveDto} opts.body Parameter historyTimeToLiveDto
     * @param {module:api/ProcessDefinitionApi~updateHistoryTimeToLiveCallback} callback The callback function, accepting three arguments: error, data, response
     */
			this.updateHistoryTimeToLive = function(key, opts, callback) {
				opts = opts || {};
				var postBody = opts["body"];

				// verify the required parameter 'key' is set
				if (key === undefined || key === null) {
					throw new Error("Missing the required parameter 'key' when calling updateHistoryTimeToLive");
				}


				var pathParams = {
					"key": key
				};
				var queryParams = {
				};
				var collectionQueryParams = {
				};
				var headerParams = {
				};
				var formParams = {
				};

				var authNames = [];
				var contentTypes = ["application/json"];
				var accepts = ["application/json"];
				var returnType = null;

				return this.apiClient.callApi(
					"/process-definition/key/{key}/history-time-to-live", "PUT",
					pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
					authNames, contentTypes, accepts, returnType, callback
				);
			};

			/**
     * Callback function to receive the result of the updateHistoryTimeToLive_0 operation.
     * @callback module:api/ProcessDefinitionApi~updateHistoryTimeToLive_0Callback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

			/**
     * Updates history time to live for process definition.
     * Updates history time to live for process definition. The field is used within History cleanup.
     * @param {String} key Parameter processDefinitionKey
     * @param {String} tenantId Parameter tenantId
     * @param {Object} opts Optional parameters
     * @param {module:model/HistoryTimeToLiveDto} opts.body Parameter historyTimeToLiveDto
     * @param {module:api/ProcessDefinitionApi~updateHistoryTimeToLive_0Callback} callback The callback function, accepting three arguments: error, data, response
     */
			this.updateHistoryTimeToLive_0 = function(key, tenantId, opts, callback) {
				opts = opts || {};
				var postBody = opts["body"];

				// verify the required parameter 'key' is set
				if (key === undefined || key === null) {
					throw new Error("Missing the required parameter 'key' when calling updateHistoryTimeToLive_0");
				}

				// verify the required parameter 'tenantId' is set
				if (tenantId === undefined || tenantId === null) {
					throw new Error("Missing the required parameter 'tenantId' when calling updateHistoryTimeToLive_0");
				}


				var pathParams = {
					"key": key,
					"tenantId": tenantId
				};
				var queryParams = {
				};
				var collectionQueryParams = {
				};
				var headerParams = {
				};
				var formParams = {
				};

				var authNames = [];
				var contentTypes = ["application/json"];
				var accepts = ["application/json"];
				var returnType = null;

				return this.apiClient.callApi(
					"/process-definition/key/{key}/tenant-id/{tenantId}/history-time-to-live", "PUT",
					pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
					authNames, contentTypes, accepts, returnType, callback
				);
			};

			/**
     * Callback function to receive the result of the updateHistoryTimeToLive_1 operation.
     * @callback module:api/ProcessDefinitionApi~updateHistoryTimeToLive_1Callback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

			/**
     * Updates history time to live for process definition.
     * Updates history time to live for process definition. The field is used within History cleanup.
     * @param {String} id Parameter processDefinitionId
     * @param {Object} opts Optional parameters
     * @param {module:model/HistoryTimeToLiveDto} opts.body Parameter historyTimeToLiveDto
     * @param {module:api/ProcessDefinitionApi~updateHistoryTimeToLive_1Callback} callback The callback function, accepting three arguments: error, data, response
     */
			this.updateHistoryTimeToLive_1 = function(id, opts, callback) {
				opts = opts || {};
				var postBody = opts["body"];

				// verify the required parameter 'id' is set
				if (id === undefined || id === null) {
					throw new Error("Missing the required parameter 'id' when calling updateHistoryTimeToLive_1");
				}


				var pathParams = {
					"id": id
				};
				var queryParams = {
				};
				var collectionQueryParams = {
				};
				var headerParams = {
				};
				var formParams = {
				};

				var authNames = [];
				var contentTypes = ["application/json"];
				var accepts = ["application/json"];
				var returnType = null;

				return this.apiClient.callApi(
					"/process-definition/{id}/history-time-to-live", "PUT",
					pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
					authNames, contentTypes, accepts, returnType, callback
				);
			};

			/**
     * Callback function to receive the result of the updateSuspensionState operation.
     * @callback module:api/ProcessDefinitionApi~updateSuspensionStateCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

			/**
     * Activates or suspends a given process definition by id or by latest version of process definition key.
     * Activates or suspends a given process definition by id or by latest version of process definition key.
     * @param {String} key Parameter processDefinitionKey
     * @param {Object} opts Optional parameters
     * @param {module:model/ProcessDefinitionSuspensionStateDto} opts.body Parameter dto
     * @param {module:api/ProcessDefinitionApi~updateSuspensionStateCallback} callback The callback function, accepting three arguments: error, data, response
     */
			this.updateSuspensionState = function(key, opts, callback) {
				opts = opts || {};
				var postBody = opts["body"];

				// verify the required parameter 'key' is set
				if (key === undefined || key === null) {
					throw new Error("Missing the required parameter 'key' when calling updateSuspensionState");
				}


				var pathParams = {
					"key": key
				};
				var queryParams = {
				};
				var collectionQueryParams = {
				};
				var headerParams = {
				};
				var formParams = {
				};

				var authNames = [];
				var contentTypes = ["application/json"];
				var accepts = ["application/json"];
				var returnType = null;

				return this.apiClient.callApi(
					"/process-definition/key/{key}/suspended", "PUT",
					pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
					authNames, contentTypes, accepts, returnType, callback
				);
			};

			/**
     * Callback function to receive the result of the updateSuspensionState_0 operation.
     * @callback module:api/ProcessDefinitionApi~updateSuspensionState_0Callback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

			/**
     * Activates or suspends a given process definition by id or by latest version of process definition key.
     * Activates or suspends a given process definition by id or by latest version of process definition key.
     * @param {String} key Parameter processDefinitionKey
     * @param {String} tenantId Parameter tenantId
     * @param {Object} opts Optional parameters
     * @param {module:model/ProcessDefinitionSuspensionStateDto} opts.body Parameter dto
     * @param {module:api/ProcessDefinitionApi~updateSuspensionState_0Callback} callback The callback function, accepting three arguments: error, data, response
     */
			this.updateSuspensionState_0 = function(key, tenantId, opts, callback) {
				opts = opts || {};
				var postBody = opts["body"];

				// verify the required parameter 'key' is set
				if (key === undefined || key === null) {
					throw new Error("Missing the required parameter 'key' when calling updateSuspensionState_0");
				}

				// verify the required parameter 'tenantId' is set
				if (tenantId === undefined || tenantId === null) {
					throw new Error("Missing the required parameter 'tenantId' when calling updateSuspensionState_0");
				}


				var pathParams = {
					"key": key,
					"tenantId": tenantId
				};
				var queryParams = {
				};
				var collectionQueryParams = {
				};
				var headerParams = {
				};
				var formParams = {
				};

				var authNames = [];
				var contentTypes = ["application/json"];
				var accepts = ["application/json"];
				var returnType = null;

				return this.apiClient.callApi(
					"/process-definition/key/{key}/tenant-id/{tenantId}/suspended", "PUT",
					pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
					authNames, contentTypes, accepts, returnType, callback
				);
			};

			/**
     * Callback function to receive the result of the updateSuspensionState_1 operation.
     * @callback module:api/ProcessDefinitionApi~updateSuspensionState_1Callback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

			/**
     * Activates or suspends process definitions with the given process definition key.
     * Activates or suspends process definitions with the given process definition key.
     * @param {Object} opts Optional parameters
     * @param {module:model/ProcessDefinitionSuspensionStateDto} opts.body Parameter dto
     * @param {module:api/ProcessDefinitionApi~updateSuspensionState_1Callback} callback The callback function, accepting three arguments: error, data, response
     */
			this.updateSuspensionState_1 = function(opts, callback) {
				opts = opts || {};
				var postBody = opts["body"];


				var pathParams = {
				};
				var queryParams = {
				};
				var collectionQueryParams = {
				};
				var headerParams = {
				};
				var formParams = {
				};

				var authNames = [];
				var contentTypes = ["application/json"];
				var accepts = ["application/json"];
				var returnType = null;

				return this.apiClient.callApi(
					"/process-definition/suspended", "PUT",
					pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
					authNames, contentTypes, accepts, returnType, callback
				);
			};

			/**
     * Callback function to receive the result of the updateSuspensionState_2 operation.
     * @callback module:api/ProcessDefinitionApi~updateSuspensionState_2Callback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

			/**
     * Activates or suspends a given process definition by id or by latest version of process definition key.
     * Activates or suspends a given process definition by id or by latest version of process definition key.
     * @param {String} id Parameter processDefinitionId
     * @param {Object} opts Optional parameters
     * @param {module:model/ProcessDefinitionSuspensionStateDto} opts.body Parameter dto
     * @param {module:api/ProcessDefinitionApi~updateSuspensionState_2Callback} callback The callback function, accepting three arguments: error, data, response
     */
			this.updateSuspensionState_2 = function(id, opts, callback) {
				opts = opts || {};
				var postBody = opts["body"];

				// verify the required parameter 'id' is set
				if (id === undefined || id === null) {
					throw new Error("Missing the required parameter 'id' when calling updateSuspensionState_2");
				}


				var pathParams = {
					"id": id
				};
				var queryParams = {
				};
				var collectionQueryParams = {
				};
				var headerParams = {
				};
				var formParams = {
				};

				var authNames = [];
				var contentTypes = ["application/json"];
				var accepts = ["application/json"];
				var returnType = null;

				return this.apiClient.callApi(
					"/process-definition/{id}/suspended", "PUT",
					pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
					authNames, contentTypes, accepts, returnType, callback
				);
			};
		};

		return exports;
	}));

},{"../ApiClient":16,"../model/BatchDto":50,"../model/CountResultDto":62,"../model/FormDto":81,"../model/HistoryTimeToLiveDto":85,"../model/ProcessDefinitionDiagramDto":107,"../model/ProcessDefinitionSuspensionStateDto":109,"../model/ProcessInstanceDto":110,"../model/StartProcessInstanceDto":124}],34:[function(require,module,exports){
/**
 * Camunda REST API
 * Swagger OpenApi Spec for Camunda REST API.
 *
 * OpenAPI spec version: v7.8.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.3.1
 *
 * Do not edit the class manually.
 *
 */

	(function(root, factory) {
		if (typeof define === "function" && define.amd) {
			// AMD. Register as an anonymous module.
			define(["ApiClient", "model/ActivityInstanceDto", "model/BatchDto", "model/CountResultDto", "model/DeleteProcessInstancesDto", "model/MultipartFormData", "model/PatchVariablesDto", "model/ProcessInstanceModificationDto", "model/ProcessInstanceQueryDto", "model/ProcessInstanceSuspensionStateDto", "model/SetJobRetriesByProcessDto", "model/VariableValueDto"], factory);
		} else if (typeof module === "object" && module.exports) {
			// CommonJS-like environments that support module.exports, like Node.
			module.exports = factory(require("../ApiClient"), require("../model/ActivityInstanceDto"), require("../model/BatchDto"), require("../model/CountResultDto"), require("../model/DeleteProcessInstancesDto"), require("../model/MultipartFormData"), require("../model/PatchVariablesDto"), require("../model/ProcessInstanceModificationDto"), require("../model/ProcessInstanceQueryDto"), require("../model/ProcessInstanceSuspensionStateDto"), require("../model/SetJobRetriesByProcessDto"), require("../model/VariableValueDto"));
		} else {
			// Browser globals (root is window)
			if (!root.CamundaRestApi) {
				root.CamundaRestApi = {};
			}
			root.CamundaRestApi.ProcessInstanceApi = factory(root.CamundaRestApi.ApiClient, root.CamundaRestApi.ActivityInstanceDto, root.CamundaRestApi.BatchDto, root.CamundaRestApi.CountResultDto, root.CamundaRestApi.DeleteProcessInstancesDto, root.CamundaRestApi.MultipartFormData, root.CamundaRestApi.PatchVariablesDto, root.CamundaRestApi.ProcessInstanceModificationDto, root.CamundaRestApi.ProcessInstanceQueryDto, root.CamundaRestApi.ProcessInstanceSuspensionStateDto, root.CamundaRestApi.SetJobRetriesByProcessDto, root.CamundaRestApi.VariableValueDto);
		}
	}(this, function(ApiClient, ActivityInstanceDto, BatchDto, CountResultDto, DeleteProcessInstancesDto, MultipartFormData, PatchVariablesDto, ProcessInstanceModificationDto, ProcessInstanceQueryDto, ProcessInstanceSuspensionStateDto, SetJobRetriesByProcessDto, VariableValueDto) {
		"use strict";

		/**
   * ProcessInstance service.
   * @module api/ProcessInstanceApi
   * @version v7.8.0
   */

		/**
   * Constructs a new ProcessInstanceApi.
   * @alias module:api/ProcessInstanceApi
   * @class
   * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
		var exports = function(apiClient) {
			this.apiClient = apiClient || ApiClient.instance;


			/**
     * Callback function to receive the result of the deleteAsync operation.
     * @callback module:api/ProcessInstanceApi~deleteAsyncCallback
     * @param {String} error Error message, if any.
     * @param {module:model/BatchDto} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

			/**
     * Deletes multiple process instances asynchronously (batch).
     * Deletes multiple process instances asynchronously (batch).
     * @param {Object} opts Optional parameters
     * @param {module:model/DeleteProcessInstancesDto} opts.body Parameter dto
     * @param {module:api/ProcessInstanceApi~deleteAsyncCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/BatchDto}
     */
			this.deleteAsync = function(opts, callback) {
				opts = opts || {};
				var postBody = opts["body"];


				var pathParams = {
				};
				var queryParams = {
				};
				var collectionQueryParams = {
				};
				var headerParams = {
				};
				var formParams = {
				};

				var authNames = [];
				var contentTypes = ["application/json"];
				var accepts = ["application/json"];
				var returnType = BatchDto;

				return this.apiClient.callApi(
					"/process-instance/delete", "POST",
					pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
					authNames, contentTypes, accepts, returnType, callback
				);
			};

			/**
     * Callback function to receive the result of the deleteAsyncHistoricQueryBased operation.
     * @callback module:api/ProcessInstanceApi~deleteAsyncHistoricQueryBasedCallback
     * @param {String} error Error message, if any.
     * @param {module:model/BatchDto} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

			/**
     * Deletes a set of process instances asynchronously (batch) based on a historic process instance query.
     * Deletes a set of process instances asynchronously (batch) based on a historic process instance query.
     * @param {Object} opts Optional parameters
     * @param {module:model/DeleteProcessInstancesDto} opts.body Parameter dto
     * @param {module:api/ProcessInstanceApi~deleteAsyncHistoricQueryBasedCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/BatchDto}
     */
			this.deleteAsyncHistoricQueryBased = function(opts, callback) {
				opts = opts || {};
				var postBody = opts["body"];


				var pathParams = {
				};
				var queryParams = {
				};
				var collectionQueryParams = {
				};
				var headerParams = {
				};
				var formParams = {
				};

				var authNames = [];
				var contentTypes = ["application/json"];
				var accepts = ["application/json"];
				var returnType = BatchDto;

				return this.apiClient.callApi(
					"/process-instance/delete-historic-query-based", "POST",
					pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
					authNames, contentTypes, accepts, returnType, callback
				);
			};

			/**
     * Callback function to receive the result of the deleteProcessInstance operation.
     * @callback module:api/ProcessInstanceApi~deleteProcessInstanceCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

			/**
     * Deletes a running process instance by id.
     * Deletes a running process instance by id.
     * @param {String} id Parameter processInstanceId
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.skipCustomListeners Parameter skipCustomListeners (default to false)
     * @param {Boolean} opts.skipIoMappings Parameter skipIoMappings (default to false)
     * @param {Boolean} opts.skipSubprocesses Parameter skipSubprocesses (default to false)
     * @param {module:api/ProcessInstanceApi~deleteProcessInstanceCallback} callback The callback function, accepting three arguments: error, data, response
     */
			this.deleteProcessInstance = function(id, opts, callback) {
				opts = opts || {};
				var postBody = null;

				// verify the required parameter 'id' is set
				if (id === undefined || id === null) {
					throw new Error("Missing the required parameter 'id' when calling deleteProcessInstance");
				}


				var pathParams = {
					"id": id
				};
				var queryParams = {
					"skipCustomListeners": opts["skipCustomListeners"],
					"skipIoMappings": opts["skipIoMappings"],
					"skipSubprocesses": opts["skipSubprocesses"],
				};
				var collectionQueryParams = {
				};
				var headerParams = {
				};
				var formParams = {
				};

				var authNames = [];
				var contentTypes = [];
				var accepts = ["application/json"];
				var returnType = null;

				return this.apiClient.callApi(
					"/process-instance/{id}", "DELETE",
					pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
					authNames, contentTypes, accepts, returnType, callback
				);
			};

			/**
     * Callback function to receive the result of the deleteVariable operation.
     * @callback module:api/ProcessInstanceApi~deleteVariableCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

			/**
     * Deletes a variable of a given case instance by id.
     * Deletes a variable of a given case instance by id.
     * @param {String} varId Parameter variableName
     * @param {String} id Parameter processInstanceId
     * @param {module:api/ProcessInstanceApi~deleteVariableCallback} callback The callback function, accepting three arguments: error, data, response
     */
			this.deleteVariable = function(varId, id, callback) {
				var postBody = null;

				// verify the required parameter 'varId' is set
				if (varId === undefined || varId === null) {
					throw new Error("Missing the required parameter 'varId' when calling deleteVariable");
				}

				// verify the required parameter 'id' is set
				if (id === undefined || id === null) {
					throw new Error("Missing the required parameter 'id' when calling deleteVariable");
				}


				var pathParams = {
					"varId": varId,
					"id": id
				};
				var queryParams = {
				};
				var collectionQueryParams = {
				};
				var headerParams = {
				};
				var formParams = {
				};

				var authNames = [];
				var contentTypes = [];
				var accepts = ["application/json"];
				var returnType = null;

				return this.apiClient.callApi(
					"/process-instance/{id}/variables/{varId}", "DELETE",
					pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
					authNames, contentTypes, accepts, returnType, callback
				);
			};

			/**
     * Callback function to receive the result of the getActivityInstanceTree operation.
     * @callback module:api/ProcessInstanceApi~getActivityInstanceTreeCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ActivityInstanceDto} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

			/**
     * Retrieves an Activity Instance (Tree) for a given process instance by id.
     * Retrieves an Activity Instance (Tree) for a given process instance by id.
     * @param {String} id Parameter processInstanceId
     * @param {module:api/ProcessInstanceApi~getActivityInstanceTreeCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ActivityInstanceDto}
     */
			this.getActivityInstanceTree = function(id, callback) {
				var postBody = null;

				// verify the required parameter 'id' is set
				if (id === undefined || id === null) {
					throw new Error("Missing the required parameter 'id' when calling getActivityInstanceTree");
				}


				var pathParams = {
					"id": id
				};
				var queryParams = {
				};
				var collectionQueryParams = {
				};
				var headerParams = {
				};
				var formParams = {
				};

				var authNames = [];
				var contentTypes = [];
				var accepts = ["application/json"];
				var returnType = ActivityInstanceDto;

				return this.apiClient.callApi(
					"/process-instance/{id}/activity-instances", "GET",
					pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
					authNames, contentTypes, accepts, returnType, callback
				);
			};

			/**
     * Callback function to receive the result of the getProcessInstance operation.
     * @callback module:api/ProcessInstanceApi~getProcessInstanceCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

			/**
     * Retrieves a process instance by id, according to the &#x60;ProcessInstance&#x60; interface in the engine.
     * Retrieves a process instance by id, according to the &#x60;ProcessInstance&#x60; interface in the engine.
     * @param {String} id Parameter processInstanceId
     * @param {module:api/ProcessInstanceApi~getProcessInstanceCallback} callback The callback function, accepting three arguments: error, data, response
     */
			this.getProcessInstance = function(id, callback) {
				var postBody = null;

				// verify the required parameter 'id' is set
				if (id === undefined || id === null) {
					throw new Error("Missing the required parameter 'id' when calling getProcessInstance");
				}


				var pathParams = {
					"id": id
				};
				var queryParams = {
				};
				var collectionQueryParams = {
				};
				var headerParams = {
				};
				var formParams = {
				};

				var authNames = [];
				var contentTypes = [];
				var accepts = ["application/json"];
				var returnType = null;

				return this.apiClient.callApi(
					"/process-instance/{id}", "GET",
					pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
					authNames, contentTypes, accepts, returnType, callback
				);
			};

			/**
     * Callback function to receive the result of the getProcessInstances operation.
     * @callback module:api/ProcessInstanceApi~getProcessInstancesCallback
     * @param {String} error Error message, if any.
     * @param {Array.<Object>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

			/**
     * Queries for process instances that fulfill given parameters.
     * Queries for process instances that fulfill given parameters. Parameters may be static as well as dynamic runtime properties of process instances. The size of the result set can be retrieved by using the Get Instance Count method.
     * @param {Object} opts Optional parameters
     * @param {Number} opts.firstResult Parameter firstResult
     * @param {Number} opts.maxResults Parameter maxResults
     * @param {String} opts.subProcessInstance Restrict query to all process instances that have the given process instance as a sub process instance. Takes a process instance id.
     * @param {String} opts.incidentType Filter by the incident type. See the User Guide for a list of incident types.
     * @param {String} opts.firstResult2 Pagination of results. Specifies the index of the first result to return.
     * @param {String} opts.processDefinitionKey Filter by the key of the process definition the instances run on.
     * @param {String} opts.tenantIdIn Filter by a comma-separated list of tenant ids. A process instance must have one of the given tenant ids.
     * @param {String} opts.maxResults2 Pagination of results. Specifies the maximum number of results to return. Will return less results if there are no more results left.
     * @param {String} opts.deploymentId Filter by the deployment the id belongs to.
     * @param {String} opts.sortBy Sort the results lexicographically by a given criterion. Valid values are instanceId, definitionKey, definitionId, tenantId and businessKey. Must be used in conjunction with the sortOrder parameter.
     * @param {String} opts.activityIdIn Filter by a comma-separated list of activity ids. A process instance must currently wait in a leaf activity with one of the given activity ids.
     * @param {String} opts.processDefinitionId Filter by the process definition the instances run on.
     * @param {String} opts.variables Only include process instances that have variables with certain values. Variable filtering expressions are comma-separated and are structured as follows: A valid parameter value has the form key_operator_value. key is the variable name, operator is the comparison operator to be used and value the variable value. Note: Values are always treated as String objects on server side. Valid operator values are: eq - equal to; neq - not equal to; gt - greater than; gteq - greater than or equal to; lt - lower than; lteq - lower than or equal to; like. key and value may not contain underscore or comma characters.
     * @param {String} opts.incidentMessage Filter by the incident message. Exact match.
     * @param {String} opts.businessKeyLike Filter by process instance business key that the parameter is a substring of.
     * @param {String} opts.superCaseInstance Restrict query to all process instances that are sub process instances of the given case instance. Takes a case instance id.
     * @param {String} opts.caseInstanceId Filter by case instance id.
     * @param {String} opts.active Only include active process instances. Value may only be true, as false is the default behavior.
     * @param {String} opts.processInstanceIds Filter by a comma-separated list of process instance ids.
     * @param {String} opts.suspended Only include suspended process instances. Value may only be true, as false is the default behavior.
     * @param {String} opts.subCaseInstance Restrict query to all process instances that have the given case instance as a sub case instance. Takes a case instance id.
     * @param {String} opts.superProcessInstance Restrict query to all process instances that are sub process instances of the given process instance. Takes a process instance id.
     * @param {String} opts.sortOrder Sort the results in a given order. Values may be asc for ascending order or desc for descending order. Must be used in conjunction with the sortBy parameter.
     * @param {String} opts.businessKey Filter by process instance business key.
     * @param {String} opts.withoutTenantId Only include process instances which belong to no tenant. Value may only be true, as false is the default behavior.
     * @param {String} opts.incidentId Filter by the incident id.
     * @param {String} opts.incidentMessageLike Filter by the incident message that the parameter is a substring of.
     * @param {module:api/ProcessInstanceApi~getProcessInstancesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<Object>}
     */
			this.getProcessInstances = function(opts, callback) {
				opts = opts || {};
				var postBody = null;


				var pathParams = {
				};
				var queryParams = {
					"firstResult": opts["firstResult"],
					"maxResults": opts["maxResults"],
					"subProcessInstance": opts["subProcessInstance"],
					"incidentType": opts["incidentType"],
					"firstResult2": opts["firstResult2"],
					"processDefinitionKey": opts["processDefinitionKey"],
					"tenantIdIn": opts["tenantIdIn"],
					"maxResults2": opts["maxResults2"],
					"deploymentId": opts["deploymentId"],
					"sortBy": opts["sortBy"],
					"activityIdIn": opts["activityIdIn"],
					"processDefinitionId": opts["processDefinitionId"],
					"variables": opts["variables"],
					"incidentMessage": opts["incidentMessage"],
					"businessKeyLike": opts["businessKeyLike"],
					"superCaseInstance": opts["superCaseInstance"],
					"caseInstanceId": opts["caseInstanceId"],
					"active": opts["active"],
					"processInstanceIds": opts["processInstanceIds"],
					"suspended": opts["suspended"],
					"subCaseInstance": opts["subCaseInstance"],
					"superProcessInstance": opts["superProcessInstance"],
					"sortOrder": opts["sortOrder"],
					"businessKey": opts["businessKey"],
					"withoutTenantId": opts["withoutTenantId"],
					"incidentId": opts["incidentId"],
					"incidentMessageLike": opts["incidentMessageLike"],
				};
				var collectionQueryParams = {
				};
				var headerParams = {
				};
				var formParams = {
				};

				var authNames = [];
				var contentTypes = [];
				var accepts = ["application/json"];
				var returnType = [Object];

				return this.apiClient.callApi(
					"/process-instance", "GET",
					pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
					authNames, contentTypes, accepts, returnType, callback
				);
			};

			/**
     * Callback function to receive the result of the getProcessInstancesCount operation.
     * @callback module:api/ProcessInstanceApi~getProcessInstancesCountCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CountResultDto} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

			/**
     * Queries for the number of process instances that fulfill given parameters.
     * Queries for the number of process instances that fulfill given parameters. Takes the same parameters as the Get Instances method.
     * @param {Object} opts Optional parameters
     * @param {String} opts.processDefinitionId Filter by the process definition the instances run on.
     * @param {String} opts.variables Only include process instances that have variables with certain values. Variable filtering expressions are comma-separated and are structured as follows: A valid parameter value has the form key_operator_value. key is the variable name, operator is the comparison operator to be used and value the variable value. Note: Values are always treated as String objects on server side. Valid operator values are: eq - equal to; neq - not equal to; gt - greater than; gteq - greater than or equal to; lt - lower than; lteq - lower than or equal to; like. key and value may not contain underscore or comma characters.
     * @param {String} opts.incidentMessage Filter by the incident message. Exact match.
     * @param {String} opts.businessKeyLike Filter by process instance business key that the parameter is a substring of.
     * @param {String} opts.subProcessInstance Restrict query to all process instances that have the given process instance as a sub process instance. Takes a process instance id.
     * @param {String} opts.superCaseInstance Restrict query to all process instances that are sub process instances of the given case instance. Takes a case instance id.
     * @param {String} opts.caseInstanceId Filter by case instance id.
     * @param {String} opts.incidentType Filter by the incident type. See the User Guide for a list of incident types.
     * @param {String} opts.active Only include active process instances. Value may only be true, as false is the default behavior.
     * @param {String} opts.processInstanceIds Filter by a comma-separated list of process instance ids.
     * @param {String} opts.suspended Only include suspended process instances. Value may only be true, as false is the default behavior.
     * @param {String} opts.processDefinitionKey Filter by the key of the process definition the instances run on.
     * @param {String} opts.subCaseInstance Restrict query to all process instances that have the given case instance as a sub case instance. Takes a case instance id.
     * @param {String} opts.superProcessInstance Restrict query to all process instances that are sub process instances of the given process instance. Takes a process instance id.
     * @param {String} opts.tenantIdIn Filter by a comma-separated list of tenant ids. A process instance must have one of the given tenant ids.
     * @param {String} opts.deploymentId Filter by the deployment the id belongs to.
     * @param {String} opts.businessKey Filter by process instance business key.
     * @param {String} opts.withoutTenantId Only include process instances which belong to no tenant. Value may only be true, as false is the default behavior.
     * @param {String} opts.incidentId Filter by the incident id.
     * @param {String} opts.incidentMessageLike Filter by the incident message that the parameter is a substring of.
     * @param {String} opts.activityIdIn Filter by a comma-separated list of activity ids. A process instance must currently wait in a leaf activity with one of the given activity ids.
     * @param {module:api/ProcessInstanceApi~getProcessInstancesCountCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CountResultDto}
     */
			this.getProcessInstancesCount = function(opts, callback) {
				opts = opts || {};
				var postBody = null;


				var pathParams = {
				};
				var queryParams = {
					"processDefinitionId": opts["processDefinitionId"],
					"variables": opts["variables"],
					"incidentMessage": opts["incidentMessage"],
					"businessKeyLike": opts["businessKeyLike"],
					"subProcessInstance": opts["subProcessInstance"],
					"superCaseInstance": opts["superCaseInstance"],
					"caseInstanceId": opts["caseInstanceId"],
					"incidentType": opts["incidentType"],
					"active": opts["active"],
					"processInstanceIds": opts["processInstanceIds"],
					"suspended": opts["suspended"],
					"processDefinitionKey": opts["processDefinitionKey"],
					"subCaseInstance": opts["subCaseInstance"],
					"superProcessInstance": opts["superProcessInstance"],
					"tenantIdIn": opts["tenantIdIn"],
					"deploymentId": opts["deploymentId"],
					"businessKey": opts["businessKey"],
					"withoutTenantId": opts["withoutTenantId"],
					"incidentId": opts["incidentId"],
					"incidentMessageLike": opts["incidentMessageLike"],
					"activityIdIn": opts["activityIdIn"],
				};
				var collectionQueryParams = {
				};
				var headerParams = {
				};
				var formParams = {
				};

				var authNames = [];
				var contentTypes = [];
				var accepts = ["application/json"];
				var returnType = CountResultDto;

				return this.apiClient.callApi(
					"/process-instance/count", "GET",
					pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
					authNames, contentTypes, accepts, returnType, callback
				);
			};

			/**
     * Callback function to receive the result of the getVariable operation.
     * @callback module:api/ProcessInstanceApi~getVariableCallback
     * @param {String} error Error message, if any.
     * @param {module:model/VariableValueDto} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

			/**
     * Retrieves a variable of a given case instance by id.
     * Retrieves a variable of a given case instance by id.
     * @param {String} varId Parameter variableName
     * @param {String} id Parameter processInstanceId
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.deserializeValue Parameter deserializeValue (default to true)
     * @param {module:api/ProcessInstanceApi~getVariableCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/VariableValueDto}
     */
			this.getVariable = function(varId, id, opts, callback) {
				opts = opts || {};
				var postBody = null;

				// verify the required parameter 'varId' is set
				if (varId === undefined || varId === null) {
					throw new Error("Missing the required parameter 'varId' when calling getVariable");
				}

				// verify the required parameter 'id' is set
				if (id === undefined || id === null) {
					throw new Error("Missing the required parameter 'id' when calling getVariable");
				}


				var pathParams = {
					"varId": varId,
					"id": id
				};
				var queryParams = {
					"deserializeValue": opts["deserializeValue"],
				};
				var collectionQueryParams = {
				};
				var headerParams = {
				};
				var formParams = {
				};

				var authNames = [];
				var contentTypes = [];
				var accepts = ["application/json"];
				var returnType = VariableValueDto;

				return this.apiClient.callApi(
					"/process-instance/{id}/variables/{varId}", "GET",
					pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
					authNames, contentTypes, accepts, returnType, callback
				);
			};

			/**
     * Callback function to receive the result of the getVariableBinary operation.
     * @callback module:api/ProcessInstanceApi~getVariableBinaryCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

			/**
     * Retrieves a binary variable of a given case instance by id.
     * Retrieves a binary variable of a given case instance by id. Applicable for byte array and file variables.
     * @param {String} varId Parameter variableName
     * @param {String} id Parameter processInstanceId
     * @param {module:api/ProcessInstanceApi~getVariableBinaryCallback} callback The callback function, accepting three arguments: error, data, response
     */
			this.getVariableBinary = function(varId, id, callback) {
				var postBody = null;

				// verify the required parameter 'varId' is set
				if (varId === undefined || varId === null) {
					throw new Error("Missing the required parameter 'varId' when calling getVariableBinary");
				}

				// verify the required parameter 'id' is set
				if (id === undefined || id === null) {
					throw new Error("Missing the required parameter 'id' when calling getVariableBinary");
				}


				var pathParams = {
					"varId": varId,
					"id": id
				};
				var queryParams = {
				};
				var collectionQueryParams = {
				};
				var headerParams = {
				};
				var formParams = {
				};

				var authNames = [];
				var contentTypes = [];
				var accepts = ["application/json"];
				var returnType = null;

				return this.apiClient.callApi(
					"/process-instance/{id}/variables/{varId}/data", "GET",
					pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
					authNames, contentTypes, accepts, returnType, callback
				);
			};

			/**
     * Callback function to receive the result of the getVariablesResource operation.
     * @callback module:api/ProcessInstanceApi~getVariablesResourceCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

			/**
     * Retrieves all variables of a given process instance by id.
     * Retrieves all variables of a given process instance by id.
     * @param {String} id Parameter processInstanceId
     * @param {module:api/ProcessInstanceApi~getVariablesResourceCallback} callback The callback function, accepting three arguments: error, data, response
     */
			this.getVariablesResource = function(id, callback) {
				var postBody = null;

				// verify the required parameter 'id' is set
				if (id === undefined || id === null) {
					throw new Error("Missing the required parameter 'id' when calling getVariablesResource");
				}


				var pathParams = {
					"id": id
				};
				var queryParams = {
				};
				var collectionQueryParams = {
				};
				var headerParams = {
				};
				var formParams = {
				};

				var authNames = [];
				var contentTypes = [];
				var accepts = ["application/json"];
				var returnType = null;

				return this.apiClient.callApi(
					"/process-instance/{id}/variables", "GET",
					pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
					authNames, contentTypes, accepts, returnType, callback
				);
			};

			/**
     * Callback function to receive the result of the modifyProcessInstance operation.
     * @callback module:api/ProcessInstanceApi~modifyProcessInstanceCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

			/**
     * Submits a list of modification instructions to change a process instance&#39;s execution state.
     * Submits a list of modification instructions to change a process instance&#39;s execution state. A modification instruction is one of the following: Starting execution before an activity Starting execution after an activity on its single outgoing sequence flow Starting execution on a specific sequence flow Cancelling an activity instance, transition instance, or all instances (activity or transition) for an activity Instructions are executed immediately and in the order they are provided in this request&#39;s body. Variables can be provided with every starting instruction. The exact semantics of modification can be read about in the user guide.
     * @param {String} id Parameter processInstanceId
     * @param {Object} opts Optional parameters
     * @param {module:model/ProcessInstanceModificationDto} opts.body Parameter dto
     * @param {module:api/ProcessInstanceApi~modifyProcessInstanceCallback} callback The callback function, accepting three arguments: error, data, response
     */
			this.modifyProcessInstance = function(id, opts, callback) {
				opts = opts || {};
				var postBody = opts["body"];

				// verify the required parameter 'id' is set
				if (id === undefined || id === null) {
					throw new Error("Missing the required parameter 'id' when calling modifyProcessInstance");
				}


				var pathParams = {
					"id": id
				};
				var queryParams = {
				};
				var collectionQueryParams = {
				};
				var headerParams = {
				};
				var formParams = {
				};

				var authNames = [];
				var contentTypes = ["application/json"];
				var accepts = ["application/json"];
				var returnType = null;

				return this.apiClient.callApi(
					"/process-instance/{id}/modification", "POST",
					pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
					authNames, contentTypes, accepts, returnType, callback
				);
			};

			/**
     * Callback function to receive the result of the modifyVariables operation.
     * @callback module:api/ProcessInstanceApi~modifyVariablesCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

			/**
     * Updates or deletes the variables of a case instance.
     * Updates or deletes the variables of a case instance. Please note: deletion precedes update.
     * @param {String} id Parameter processInstanceId
     * @param {Object} opts Optional parameters
     * @param {module:model/PatchVariablesDto} opts.body Parameter patch
     * @param {module:api/ProcessInstanceApi~modifyVariablesCallback} callback The callback function, accepting three arguments: error, data, response
     */
			this.modifyVariables = function(id, opts, callback) {
				opts = opts || {};
				var postBody = opts["body"];

				// verify the required parameter 'id' is set
				if (id === undefined || id === null) {
					throw new Error("Missing the required parameter 'id' when calling modifyVariables");
				}


				var pathParams = {
					"id": id
				};
				var queryParams = {
				};
				var collectionQueryParams = {
				};
				var headerParams = {
				};
				var formParams = {
				};

				var authNames = [];
				var contentTypes = ["application/json"];
				var accepts = ["application/json"];
				var returnType = null;

				return this.apiClient.callApi(
					"/process-instance/{id}/variables", "POST",
					pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
					authNames, contentTypes, accepts, returnType, callback
				);
			};

			/**
     * Callback function to receive the result of the putVariable operation.
     * @callback module:api/ProcessInstanceApi~putVariableCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

			/**
     * Sets a variable of a given case instance by id.
     * Sets a variable of a given case instance by id.
     * @param {String} varId Parameter variableName
     * @param {String} id Parameter processInstanceId
     * @param {Object} opts Optional parameters
     * @param {module:model/VariableValueDto} opts.body Parameter variable
     * @param {module:api/ProcessInstanceApi~putVariableCallback} callback The callback function, accepting three arguments: error, data, response
     */
			this.putVariable = function(varId, id, opts, callback) {
				opts = opts || {};
				var postBody = opts["body"];

				// verify the required parameter 'varId' is set
				if (varId === undefined || varId === null) {
					throw new Error("Missing the required parameter 'varId' when calling putVariable");
				}

				// verify the required parameter 'id' is set
				if (id === undefined || id === null) {
					throw new Error("Missing the required parameter 'id' when calling putVariable");
				}


				var pathParams = {
					"varId": varId,
					"id": id
				};
				var queryParams = {
				};
				var collectionQueryParams = {
				};
				var headerParams = {
				};
				var formParams = {
				};

				var authNames = [];
				var contentTypes = ["application/json"];
				var accepts = ["application/json"];
				var returnType = null;

				return this.apiClient.callApi(
					"/process-instance/{id}/variables/{varId}", "PUT",
					pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
					authNames, contentTypes, accepts, returnType, callback
				);
			};

			/**
     * Callback function to receive the result of the queryProcessInstances operation.
     * @callback module:api/ProcessInstanceApi~queryProcessInstancesCallback
     * @param {String} error Error message, if any.
     * @param {Array.<Object>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

			/**
     * Queries for process instances that fulfill given parameters through a JSON object.
     * Queries for process instances that fulfill given parameters through a JSON object. This method is slightly more powerful than the Get Instances method because it allows filtering by multiple process variables of types &#x60;String&#x60;, &#x60;Number&#x60; or &#x60;Boolean&#x60;.
     * @param {Object} opts Optional parameters
     * @param {module:model/ProcessInstanceQueryDto} opts.body Parameter query
     * @param {Number} opts.firstResult Parameter firstResult
     * @param {Number} opts.maxResults Parameter maxResults
     * @param {module:api/ProcessInstanceApi~queryProcessInstancesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<Object>}
     */
			this.queryProcessInstances = function(opts, callback) {
				opts = opts || {};
				var postBody = opts["body"];


				var pathParams = {
				};
				var queryParams = {
					"firstResult": opts["firstResult"],
					"maxResults": opts["maxResults"],
				};
				var collectionQueryParams = {
				};
				var headerParams = {
				};
				var formParams = {
				};

				var authNames = [];
				var contentTypes = ["application/json"];
				var accepts = ["application/json"];
				var returnType = [Object];

				return this.apiClient.callApi(
					"/process-instance", "POST",
					pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
					authNames, contentTypes, accepts, returnType, callback
				);
			};

			/**
     * Callback function to receive the result of the queryProcessInstancesCount operation.
     * @callback module:api/ProcessInstanceApi~queryProcessInstancesCountCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CountResultDto} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

			/**
     * Queries for the number of process instances that fulfill the given parameters.
     * Queries for the number of process instances that fulfill the given parameters. This method takes the same message body as the Get Instances (POST) and therefore it is slightly more powerful than the Get Instance Count method.
     * @param {Object} opts Optional parameters
     * @param {module:model/ProcessInstanceQueryDto} opts.body Parameter query
     * @param {module:api/ProcessInstanceApi~queryProcessInstancesCountCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CountResultDto}
     */
			this.queryProcessInstancesCount = function(opts, callback) {
				opts = opts || {};
				var postBody = opts["body"];


				var pathParams = {
				};
				var queryParams = {
				};
				var collectionQueryParams = {
				};
				var headerParams = {
				};
				var formParams = {
				};

				var authNames = [];
				var contentTypes = ["application/json"];
				var accepts = ["application/json"];
				var returnType = CountResultDto;

				return this.apiClient.callApi(
					"/process-instance/count", "POST",
					pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
					authNames, contentTypes, accepts, returnType, callback
				);
			};

			/**
     * Callback function to receive the result of the setBinaryVariable operation.
     * @callback module:api/ProcessInstanceApi~setBinaryVariableCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

			/**
     * Sets the serialized value for a binary variable or the binary value for a file variable.
     * Sets the serialized value for a binary variable or the binary value for a file variable.
     * @param {String} varId Parameter variableName
     * @param {String} id Parameter processInstanceId
     * @param {Object} opts Optional parameters
     * @param {module:model/MultipartFormData} opts.body Parameter multipartFormData
     * @param {module:api/ProcessInstanceApi~setBinaryVariableCallback} callback The callback function, accepting three arguments: error, data, response
     */
			this.setBinaryVariable = function(varId, id, opts, callback) {
				opts = opts || {};
				var postBody = opts["body"];

				// verify the required parameter 'varId' is set
				if (varId === undefined || varId === null) {
					throw new Error("Missing the required parameter 'varId' when calling setBinaryVariable");
				}

				// verify the required parameter 'id' is set
				if (id === undefined || id === null) {
					throw new Error("Missing the required parameter 'id' when calling setBinaryVariable");
				}


				var pathParams = {
					"varId": varId,
					"id": id
				};
				var queryParams = {
				};
				var collectionQueryParams = {
				};
				var headerParams = {
				};
				var formParams = {
				};

				var authNames = [];
				var contentTypes = ["multipart/form-data"];
				var accepts = ["application/json"];
				var returnType = null;

				return this.apiClient.callApi(
					"/process-instance/{id}/variables/{varId}/data", "POST",
					pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
					authNames, contentTypes, accepts, returnType, callback
				);
			};

			/**
     * Callback function to receive the result of the setRetriesByProcess operation.
     * @callback module:api/ProcessInstanceApi~setRetriesByProcessCallback
     * @param {String} error Error message, if any.
     * @param {module:model/BatchDto} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

			/**
     * Create a batch to set retries of jobs associated with given processes asynchronously.
     * Create a batch to set retries of jobs associated with given processes asynchronously.
     * @param {Object} opts Optional parameters
     * @param {module:model/SetJobRetriesByProcessDto} opts.body Parameter setJobRetriesDto
     * @param {module:api/ProcessInstanceApi~setRetriesByProcessCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/BatchDto}
     */
			this.setRetriesByProcess = function(opts, callback) {
				opts = opts || {};
				var postBody = opts["body"];


				var pathParams = {
				};
				var queryParams = {
				};
				var collectionQueryParams = {
				};
				var headerParams = {
				};
				var formParams = {
				};

				var authNames = [];
				var contentTypes = ["application/json"];
				var accepts = ["application/json"];
				var returnType = BatchDto;

				return this.apiClient.callApi(
					"/process-instance/job-retries", "POST",
					pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
					authNames, contentTypes, accepts, returnType, callback
				);
			};

			/**
     * Callback function to receive the result of the setRetriesByProcessHistoricQueryBased operation.
     * @callback module:api/ProcessInstanceApi~setRetriesByProcessHistoricQueryBasedCallback
     * @param {String} error Error message, if any.
     * @param {module:model/BatchDto} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

			/**
     * Create a batch to set retries of jobs asynchronously based on a historic process instance query.
     * Create a batch to set retries of jobs asynchronously based on a historic process instance query.
     * @param {Object} opts Optional parameters
     * @param {module:model/SetJobRetriesByProcessDto} opts.body Parameter setJobRetriesDto
     * @param {module:api/ProcessInstanceApi~setRetriesByProcessHistoricQueryBasedCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/BatchDto}
     */
			this.setRetriesByProcessHistoricQueryBased = function(opts, callback) {
				opts = opts || {};
				var postBody = opts["body"];


				var pathParams = {
				};
				var queryParams = {
				};
				var collectionQueryParams = {
				};
				var headerParams = {
				};
				var formParams = {
				};

				var authNames = [];
				var contentTypes = ["application/json"];
				var accepts = ["application/json"];
				var returnType = BatchDto;

				return this.apiClient.callApi(
					"/process-instance/job-retries-historic-query-based", "POST",
					pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
					authNames, contentTypes, accepts, returnType, callback
				);
			};

			/**
     * Callback function to receive the result of the updateSuspensionState operation.
     * @callback module:api/ProcessInstanceApi~updateSuspensionStateCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

			/**
     * Activates or suspends process instances with the given process definition id.
     * Activates or suspends process instances with the given process definition id.
     * @param {Object} opts Optional parameters
     * @param {module:model/ProcessInstanceSuspensionStateDto} opts.body Parameter dto
     * @param {module:api/ProcessInstanceApi~updateSuspensionStateCallback} callback The callback function, accepting three arguments: error, data, response
     */
			this.updateSuspensionState = function(opts, callback) {
				opts = opts || {};
				var postBody = opts["body"];


				var pathParams = {
				};
				var queryParams = {
				};
				var collectionQueryParams = {
				};
				var headerParams = {
				};
				var formParams = {
				};

				var authNames = [];
				var contentTypes = ["application/json"];
				var accepts = ["application/json"];
				var returnType = null;

				return this.apiClient.callApi(
					"/process-instance/suspended", "PUT",
					pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
					authNames, contentTypes, accepts, returnType, callback
				);
			};

			/**
     * Callback function to receive the result of the updateSuspensionStateAsync operation.
     * @callback module:api/ProcessInstanceApi~updateSuspensionStateAsyncCallback
     * @param {String} error Error message, if any.
     * @param {module:model/BatchDto} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

			/**
     * Update Suspension State Async.
     * Update Suspension State Async
     * @param {module:api/ProcessInstanceApi~updateSuspensionStateAsyncCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/BatchDto}
     */
			this.updateSuspensionStateAsync = function(callback) {
				var postBody = null;


				var pathParams = {
				};
				var queryParams = {
				};
				var collectionQueryParams = {
				};
				var headerParams = {
				};
				var formParams = {
				};

				var authNames = [];
				var contentTypes = ["application/json"];
				var accepts = ["application/json"];
				var returnType = BatchDto;

				return this.apiClient.callApi(
					"/process-instance/suspended-async", "POST",
					pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
					authNames, contentTypes, accepts, returnType, callback
				);
			};

			/**
     * Callback function to receive the result of the updateSuspensionState_0 operation.
     * @callback module:api/ProcessInstanceApi~updateSuspensionState_0Callback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

			/**
     * Activates or suspends a given process instance by id.
     * Activates or suspends a given process instance by id.
     * @param {String} id Parameter processInstanceId
     * @param {Object} opts Optional parameters
     * @param {module:model/ProcessInstanceSuspensionStateDto} opts.body Parameter dto
     * @param {module:api/ProcessInstanceApi~updateSuspensionState_0Callback} callback The callback function, accepting three arguments: error, data, response
     */
			this.updateSuspensionState_0 = function(id, opts, callback) {
				opts = opts || {};
				var postBody = opts["body"];

				// verify the required parameter 'id' is set
				if (id === undefined || id === null) {
					throw new Error("Missing the required parameter 'id' when calling updateSuspensionState_0");
				}


				var pathParams = {
					"id": id
				};
				var queryParams = {
				};
				var collectionQueryParams = {
				};
				var headerParams = {
				};
				var formParams = {
				};

				var authNames = [];
				var contentTypes = ["application/json"];
				var accepts = ["application/json"];
				var returnType = null;

				return this.apiClient.callApi(
					"/process-instance/{id}/suspended", "PUT",
					pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
					authNames, contentTypes, accepts, returnType, callback
				);
			};
		};

		return exports;
	}));

},{"../ApiClient":16,"../model/ActivityInstanceDto":42,"../model/BatchDto":50,"../model/CountResultDto":62,"../model/DeleteProcessInstancesDto":66,"../model/MultipartFormData":104,"../model/PatchVariablesDto":105,"../model/ProcessInstanceModificationDto":111,"../model/ProcessInstanceQueryDto":113,"../model/ProcessInstanceSuspensionStateDto":114,"../model/SetJobRetriesByProcessDto":118,"../model/VariableValueDto":140}],35:[function(require,module,exports){
/**
 * Camunda REST API
 * Swagger OpenApi Spec for Camunda REST API.
 *
 * OpenAPI spec version: v7.8.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.3.1
 *
 * Do not edit the class manually.
 *
 */

	(function(root, factory) {
		if (typeof define === "function" && define.amd) {
			// AMD. Register as an anonymous module.
			define(["ApiClient", "model/AttachmentDto", "model/CommentDto", "model/CompleteTaskDto", "model/CountResultDto", "model/FormDto", "model/IdentityLinkDto", "model/InputStream", "model/MultipartFormData", "model/PatchVariablesDto", "model/TaskDto", "model/TaskQueryDto", "model/UserIdDto", "model/VariableValueDto"], factory);
		} else if (typeof module === "object" && module.exports) {
			// CommonJS-like environments that support module.exports, like Node.
			module.exports = factory(require("../ApiClient"), require("../model/AttachmentDto"), require("../model/CommentDto"), require("../model/CompleteTaskDto"), require("../model/CountResultDto"), require("../model/FormDto"), require("../model/IdentityLinkDto"), require("../model/InputStream"), require("../model/MultipartFormData"), require("../model/PatchVariablesDto"), require("../model/TaskDto"), require("../model/TaskQueryDto"), require("../model/UserIdDto"), require("../model/VariableValueDto"));
		} else {
			// Browser globals (root is window)
			if (!root.CamundaRestApi) {
				root.CamundaRestApi = {};
			}
			root.CamundaRestApi.TaskApi = factory(root.CamundaRestApi.ApiClient, root.CamundaRestApi.AttachmentDto, root.CamundaRestApi.CommentDto, root.CamundaRestApi.CompleteTaskDto, root.CamundaRestApi.CountResultDto, root.CamundaRestApi.FormDto, root.CamundaRestApi.IdentityLinkDto, root.CamundaRestApi.InputStream, root.CamundaRestApi.MultipartFormData, root.CamundaRestApi.PatchVariablesDto, root.CamundaRestApi.TaskDto, root.CamundaRestApi.TaskQueryDto, root.CamundaRestApi.UserIdDto, root.CamundaRestApi.VariableValueDto);
		}
	}(this, function(ApiClient, AttachmentDto, CommentDto, CompleteTaskDto, CountResultDto, FormDto, IdentityLinkDto, InputStream, MultipartFormData, PatchVariablesDto, TaskDto, TaskQueryDto, UserIdDto, VariableValueDto) {
		"use strict";

		/**
   * Task service.
   * @module api/TaskApi
   * @version v7.8.0
   */

		/**
   * Constructs a new TaskApi.
   * @alias module:api/TaskApi
   * @class
   * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
		var exports = function(apiClient) {
			this.apiClient = apiClient || ApiClient.instance;


			/**
     * Callback function to receive the result of the addAttachment operation.
     * @callback module:api/TaskApi~addAttachmentCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AttachmentDto} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

			/**
     * Creates an attachment for a task.
     * Creates an attachment for a task.
     * @param {String} id Parameter id
     * @param {Object} opts Optional parameters
     * @param {module:model/MultipartFormData} opts.body Parameter multipartFormData
     * @param {module:api/TaskApi~addAttachmentCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AttachmentDto}
     */
			this.addAttachment = function(id, opts, callback) {
				opts = opts || {};
				var postBody = opts["body"];

				// verify the required parameter 'id' is set
				if (id === undefined || id === null) {
					throw new Error("Missing the required parameter 'id' when calling addAttachment");
				}


				var pathParams = {
					"id": id
				};
				var queryParams = {
				};
				var collectionQueryParams = {
				};
				var headerParams = {
				};
				var formParams = {
				};

				var authNames = [];
				var contentTypes = ["multipart/form-data"];
				var accepts = ["application/json"];
				var returnType = AttachmentDto;

				return this.apiClient.callApi(
					"/task/{id}/attachment/create", "POST",
					pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
					authNames, contentTypes, accepts, returnType, callback
				);
			};

			/**
     * Callback function to receive the result of the addIdentityLink operation.
     * @callback module:api/TaskApi~addIdentityLinkCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

			/**
     * Adds an identity link to a task by id.
     * Adds an identity link to a task by id. Can be used to link any user or group to a task and specify a relation.
     * @param {String} id Parameter id
     * @param {Object} opts Optional parameters
     * @param {module:model/IdentityLinkDto} opts.body Parameter identityLink
     * @param {module:api/TaskApi~addIdentityLinkCallback} callback The callback function, accepting three arguments: error, data, response
     */
			this.addIdentityLink = function(id, opts, callback) {
				opts = opts || {};
				var postBody = opts["body"];

				// verify the required parameter 'id' is set
				if (id === undefined || id === null) {
					throw new Error("Missing the required parameter 'id' when calling addIdentityLink");
				}


				var pathParams = {
					"id": id
				};
				var queryParams = {
				};
				var collectionQueryParams = {
				};
				var headerParams = {
				};
				var formParams = {
				};

				var authNames = [];
				var contentTypes = ["application/json"];
				var accepts = ["application/json"];
				var returnType = null;

				return this.apiClient.callApi(
					"/task/{id}/identity-links", "POST",
					pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
					authNames, contentTypes, accepts, returnType, callback
				);
			};

			/**
     * Callback function to receive the result of the claim operation.
     * @callback module:api/TaskApi~claimCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

			/**
     * Claims a task for a specific user.
     * Claims a task for a specific user.Note: The difference with the Set Assignee method is that here a check is performed to see if the task already has a user assigned to it.
     * @param {String} id Parameter id
     * @param {Object} opts Optional parameters
     * @param {module:model/UserIdDto} opts.body Parameter dto
     * @param {module:api/TaskApi~claimCallback} callback The callback function, accepting three arguments: error, data, response
     */
			this.claim = function(id, opts, callback) {
				opts = opts || {};
				var postBody = opts["body"];

				// verify the required parameter 'id' is set
				if (id === undefined || id === null) {
					throw new Error("Missing the required parameter 'id' when calling claim");
				}


				var pathParams = {
					"id": id
				};
				var queryParams = {
				};
				var collectionQueryParams = {
				};
				var headerParams = {
				};
				var formParams = {
				};

				var authNames = [];
				var contentTypes = ["application/json"];
				var accepts = ["application/json"];
				var returnType = null;

				return this.apiClient.callApi(
					"/task/{id}/claim", "POST",
					pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
					authNames, contentTypes, accepts, returnType, callback
				);
			};

			/**
     * Callback function to receive the result of the complete operation.
     * @callback module:api/TaskApi~completeCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

			/**
     * Completes a task and updates process variables.
     * Completes a task and updates process variables.
     * @param {String} id Parameter id
     * @param {Object} opts Optional parameters
     * @param {module:model/CompleteTaskDto} opts.body Parameter dto
     * @param {module:api/TaskApi~completeCallback} callback The callback function, accepting three arguments: error, data, response
     */
			this.complete = function(id, opts, callback) {
				opts = opts || {};
				var postBody = opts["body"];

				// verify the required parameter 'id' is set
				if (id === undefined || id === null) {
					throw new Error("Missing the required parameter 'id' when calling complete");
				}


				var pathParams = {
					"id": id
				};
				var queryParams = {
				};
				var collectionQueryParams = {
				};
				var headerParams = {
				};
				var formParams = {
				};

				var authNames = [];
				var contentTypes = ["application/json"];
				var accepts = ["application/json"];
				var returnType = null;

				return this.apiClient.callApi(
					"/task/{id}/complete", "POST",
					pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
					authNames, contentTypes, accepts, returnType, callback
				);
			};

			/**
     * Callback function to receive the result of the createComment operation.
     * @callback module:api/TaskApi~createCommentCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CommentDto} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

			/**
     * Creates a comment for a task by id.
     * Creates a comment for a task by id.
     * @param {String} id Parameter id
     * @param {Object} opts Optional parameters
     * @param {module:model/CommentDto} opts.body Parameter comment
     * @param {module:api/TaskApi~createCommentCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CommentDto}
     */
			this.createComment = function(id, opts, callback) {
				opts = opts || {};
				var postBody = opts["body"];

				// verify the required parameter 'id' is set
				if (id === undefined || id === null) {
					throw new Error("Missing the required parameter 'id' when calling createComment");
				}


				var pathParams = {
					"id": id
				};
				var queryParams = {
				};
				var collectionQueryParams = {
				};
				var headerParams = {
				};
				var formParams = {
				};

				var authNames = [];
				var contentTypes = ["application/json"];
				var accepts = ["application/json"];
				var returnType = CommentDto;

				return this.apiClient.callApi(
					"/task/{id}/comment/create", "POST",
					pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
					authNames, contentTypes, accepts, returnType, callback
				);
			};

			/**
     * Callback function to receive the result of the createTask operation.
     * @callback module:api/TaskApi~createTaskCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

			/**
     * Creates a new task.
     * Creates a new task.
     * @param {Object} opts Optional parameters
     * @param {module:model/TaskDto} opts.body Parameter taskDto
     * @param {module:api/TaskApi~createTaskCallback} callback The callback function, accepting three arguments: error, data, response
     */
			this.createTask = function(opts, callback) {
				opts = opts || {};
				var postBody = opts["body"];


				var pathParams = {
				};
				var queryParams = {
				};
				var collectionQueryParams = {
				};
				var headerParams = {
				};
				var formParams = {
				};

				var authNames = [];
				var contentTypes = ["application/json"];
				var accepts = ["application/json"];
				var returnType = null;

				return this.apiClient.callApi(
					"/task/create", "POST",
					pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
					authNames, contentTypes, accepts, returnType, callback
				);
			};

			/**
     * Callback function to receive the result of the delegate operation.
     * @callback module:api/TaskApi~delegateCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

			/**
     * Delegates a task to another user.
     * Delegates a task to another user.
     * @param {String} id Parameter id
     * @param {Object} opts Optional parameters
     * @param {module:model/UserIdDto} opts.body Parameter delegatedUser
     * @param {module:api/TaskApi~delegateCallback} callback The callback function, accepting three arguments: error, data, response
     */
			this.delegate = function(id, opts, callback) {
				opts = opts || {};
				var postBody = opts["body"];

				// verify the required parameter 'id' is set
				if (id === undefined || id === null) {
					throw new Error("Missing the required parameter 'id' when calling delegate");
				}


				var pathParams = {
					"id": id
				};
				var queryParams = {
				};
				var collectionQueryParams = {
				};
				var headerParams = {
				};
				var formParams = {
				};

				var authNames = [];
				var contentTypes = ["application/json"];
				var accepts = ["application/json"];
				var returnType = null;

				return this.apiClient.callApi(
					"/task/{id}/delegate", "POST",
					pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
					authNames, contentTypes, accepts, returnType, callback
				);
			};

			/**
     * Callback function to receive the result of the deleteAttachment operation.
     * @callback module:api/TaskApi~deleteAttachmentCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

			/**
     * Removes an attachment from a task by id.
     * Removes an attachment from a task by id.
     * @param {String} attachmentId Parameter attachmentId
     * @param {String} id Parameter id
     * @param {module:api/TaskApi~deleteAttachmentCallback} callback The callback function, accepting three arguments: error, data, response
     */
			this.deleteAttachment = function(attachmentId, id, callback) {
				var postBody = null;

				// verify the required parameter 'attachmentId' is set
				if (attachmentId === undefined || attachmentId === null) {
					throw new Error("Missing the required parameter 'attachmentId' when calling deleteAttachment");
				}

				// verify the required parameter 'id' is set
				if (id === undefined || id === null) {
					throw new Error("Missing the required parameter 'id' when calling deleteAttachment");
				}


				var pathParams = {
					"attachmentId": attachmentId,
					"id": id
				};
				var queryParams = {
				};
				var collectionQueryParams = {
				};
				var headerParams = {
				};
				var formParams = {
				};

				var authNames = [];
				var contentTypes = [];
				var accepts = ["application/json"];
				var returnType = null;

				return this.apiClient.callApi(
					"/task/{id}/attachment/{attachmentId}", "DELETE",
					pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
					authNames, contentTypes, accepts, returnType, callback
				);
			};

			/**
     * Callback function to receive the result of the deleteIdentityLink operation.
     * @callback module:api/TaskApi~deleteIdentityLinkCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

			/**
     * Removes an identity link from a task by id.
     * Removes an identity link from a task by id.
     * @param {String} id Parameter id
     * @param {Object} opts Optional parameters
     * @param {module:model/IdentityLinkDto} opts.body Parameter identityLink
     * @param {module:api/TaskApi~deleteIdentityLinkCallback} callback The callback function, accepting three arguments: error, data, response
     */
			this.deleteIdentityLink = function(id, opts, callback) {
				opts = opts || {};
				var postBody = opts["body"];

				// verify the required parameter 'id' is set
				if (id === undefined || id === null) {
					throw new Error("Missing the required parameter 'id' when calling deleteIdentityLink");
				}


				var pathParams = {
					"id": id
				};
				var queryParams = {
				};
				var collectionQueryParams = {
				};
				var headerParams = {
				};
				var formParams = {
				};

				var authNames = [];
				var contentTypes = ["application/json"];
				var accepts = ["application/json"];
				var returnType = null;

				return this.apiClient.callApi(
					"/task/{id}/identity-links/delete", "POST",
					pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
					authNames, contentTypes, accepts, returnType, callback
				);
			};

			/**
     * Callback function to receive the result of the deleteTask operation.
     * @callback module:api/TaskApi~deleteTaskCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

			/**
     * Delete Task.
     * Delete Task
     * @param {String} id
     * @param {String} id2 Parameter id
     * @param {module:api/TaskApi~deleteTaskCallback} callback The callback function, accepting three arguments: error, data, response
     */
			this.deleteTask = function(id, id2, callback) {
				var postBody = null;

				// verify the required parameter 'id' is set
				if (id === undefined || id === null) {
					throw new Error("Missing the required parameter 'id' when calling deleteTask");
				}

				// verify the required parameter 'id2' is set
				if (id2 === undefined || id2 === null) {
					throw new Error("Missing the required parameter 'id2' when calling deleteTask");
				}


				var pathParams = {
					"id": id,
					"id2": id2
				};
				var queryParams = {
				};
				var collectionQueryParams = {
				};
				var headerParams = {
				};
				var formParams = {
				};

				var authNames = [];
				var contentTypes = [];
				var accepts = ["application/json"];
				var returnType = null;

				return this.apiClient.callApi(
					"/task/{id}", "DELETE",
					pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
					authNames, contentTypes, accepts, returnType, callback
				);
			};

			/**
     * Callback function to receive the result of the deleteVariable operation.
     * @callback module:api/TaskApi~deleteVariableCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

			/**
     * Deletes a variable of a given case instance by id.
     * Deletes a variable of a given case instance by id.
     * @param {String} varId Parameter variableName
     * @param {String} id Parameter id
     * @param {module:api/TaskApi~deleteVariableCallback} callback The callback function, accepting three arguments: error, data, response
     */
			this.deleteVariable = function(varId, id, callback) {
				var postBody = null;

				// verify the required parameter 'varId' is set
				if (varId === undefined || varId === null) {
					throw new Error("Missing the required parameter 'varId' when calling deleteVariable");
				}

				// verify the required parameter 'id' is set
				if (id === undefined || id === null) {
					throw new Error("Missing the required parameter 'id' when calling deleteVariable");
				}


				var pathParams = {
					"varId": varId,
					"id": id
				};
				var queryParams = {
				};
				var collectionQueryParams = {
				};
				var headerParams = {
				};
				var formParams = {
				};

				var authNames = [];
				var contentTypes = [];
				var accepts = ["application/json"];
				var returnType = null;

				return this.apiClient.callApi(
					"/task/{id}/localVariables/{varId}", "DELETE",
					pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
					authNames, contentTypes, accepts, returnType, callback
				);
			};

			/**
     * Callback function to receive the result of the deleteVariable_0 operation.
     * @callback module:api/TaskApi~deleteVariable_0Callback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

			/**
     * Deletes a variable of a given case instance by id.
     * Deletes a variable of a given case instance by id.
     * @param {String} varId Parameter variableName
     * @param {String} id Parameter id
     * @param {module:api/TaskApi~deleteVariable_0Callback} callback The callback function, accepting three arguments: error, data, response
     */
			this.deleteVariable_0 = function(varId, id, callback) {
				var postBody = null;

				// verify the required parameter 'varId' is set
				if (varId === undefined || varId === null) {
					throw new Error("Missing the required parameter 'varId' when calling deleteVariable_0");
				}

				// verify the required parameter 'id' is set
				if (id === undefined || id === null) {
					throw new Error("Missing the required parameter 'id' when calling deleteVariable_0");
				}


				var pathParams = {
					"varId": varId,
					"id": id
				};
				var queryParams = {
				};
				var collectionQueryParams = {
				};
				var headerParams = {
				};
				var formParams = {
				};

				var authNames = [];
				var contentTypes = [];
				var accepts = ["application/json"];
				var returnType = null;

				return this.apiClient.callApi(
					"/task/{id}/variables/{varId}", "DELETE",
					pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
					authNames, contentTypes, accepts, returnType, callback
				);
			};

			/**
     * Callback function to receive the result of the getAttachment operation.
     * @callback module:api/TaskApi~getAttachmentCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AttachmentDto} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

			/**
     * Retrieves a task attachment by task id and attachment id.
     * Retrieves a task attachment by task id and attachment id.
     * @param {String} attachmentId Parameter attachmentId
     * @param {String} id Parameter id
     * @param {module:api/TaskApi~getAttachmentCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AttachmentDto}
     */
			this.getAttachment = function(attachmentId, id, callback) {
				var postBody = null;

				// verify the required parameter 'attachmentId' is set
				if (attachmentId === undefined || attachmentId === null) {
					throw new Error("Missing the required parameter 'attachmentId' when calling getAttachment");
				}

				// verify the required parameter 'id' is set
				if (id === undefined || id === null) {
					throw new Error("Missing the required parameter 'id' when calling getAttachment");
				}


				var pathParams = {
					"attachmentId": attachmentId,
					"id": id
				};
				var queryParams = {
				};
				var collectionQueryParams = {
				};
				var headerParams = {
				};
				var formParams = {
				};

				var authNames = [];
				var contentTypes = [];
				var accepts = ["application/json"];
				var returnType = AttachmentDto;

				return this.apiClient.callApi(
					"/task/{id}/attachment/{attachmentId}", "GET",
					pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
					authNames, contentTypes, accepts, returnType, callback
				);
			};

			/**
     * Callback function to receive the result of the getAttachmentData operation.
     * @callback module:api/TaskApi~getAttachmentDataCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InputStream} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

			/**
     * Retrieves the binary content of a task attachment by task id and attachment id.
     * Retrieves the binary content of a task attachment by task id and attachment id.
     * @param {String} attachmentId Parameter attachmentId
     * @param {String} id Parameter id
     * @param {module:api/TaskApi~getAttachmentDataCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InputStream}
     */
			this.getAttachmentData = function(attachmentId, id, callback) {
				var postBody = null;

				// verify the required parameter 'attachmentId' is set
				if (attachmentId === undefined || attachmentId === null) {
					throw new Error("Missing the required parameter 'attachmentId' when calling getAttachmentData");
				}

				// verify the required parameter 'id' is set
				if (id === undefined || id === null) {
					throw new Error("Missing the required parameter 'id' when calling getAttachmentData");
				}


				var pathParams = {
					"attachmentId": attachmentId,
					"id": id
				};
				var queryParams = {
				};
				var collectionQueryParams = {
				};
				var headerParams = {
				};
				var formParams = {
				};

				var authNames = [];
				var contentTypes = [];
				var accepts = ["application/octet-stream"];
				var returnType = InputStream;

				return this.apiClient.callApi(
					"/task/{id}/attachment/{attachmentId}/data", "GET",
					pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
					authNames, contentTypes, accepts, returnType, callback
				);
			};

			/**
     * Callback function to receive the result of the getAttachmentResource operation.
     * @callback module:api/TaskApi~getAttachmentResourceCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

			/**
     * Gets the attachments for a task.
     * Gets the attachments for a task.
     * @param {String} id Parameter id
     * @param {module:api/TaskApi~getAttachmentResourceCallback} callback The callback function, accepting three arguments: error, data, response
     */
			this.getAttachmentResource = function(id, callback) {
				var postBody = null;

				// verify the required parameter 'id' is set
				if (id === undefined || id === null) {
					throw new Error("Missing the required parameter 'id' when calling getAttachmentResource");
				}


				var pathParams = {
					"id": id
				};
				var queryParams = {
				};
				var collectionQueryParams = {
				};
				var headerParams = {
				};
				var formParams = {
				};

				var authNames = [];
				var contentTypes = [];
				var accepts = ["application/json"];
				var returnType = null;

				return this.apiClient.callApi(
					"/task/{id}/attachment", "GET",
					pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
					authNames, contentTypes, accepts, returnType, callback
				);
			};

			/**
     * Callback function to receive the result of the getComment operation.
     * @callback module:api/TaskApi~getCommentCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CommentDto} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

			/**
     * Retrieves a task comment by task id and comment id.
     * Retrieves a task comment by task id and comment id.
     * @param {String} commentId Parameter commentId
     * @param {String} id Parameter id
     * @param {module:api/TaskApi~getCommentCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CommentDto}
     */
			this.getComment = function(commentId, id, callback) {
				var postBody = null;

				// verify the required parameter 'commentId' is set
				if (commentId === undefined || commentId === null) {
					throw new Error("Missing the required parameter 'commentId' when calling getComment");
				}

				// verify the required parameter 'id' is set
				if (id === undefined || id === null) {
					throw new Error("Missing the required parameter 'id' when calling getComment");
				}


				var pathParams = {
					"commentId": commentId,
					"id": id
				};
				var queryParams = {
				};
				var collectionQueryParams = {
				};
				var headerParams = {
				};
				var formParams = {
				};

				var authNames = [];
				var contentTypes = [];
				var accepts = ["application/json"];
				var returnType = CommentDto;

				return this.apiClient.callApi(
					"/task/{id}/comment/{commentId}", "GET",
					pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
					authNames, contentTypes, accepts, returnType, callback
				);
			};

			/**
     * Callback function to receive the result of the getDeployedForm operation.
     * @callback module:api/TaskApi~getDeployedFormCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

			/**
     * Get Deployed Form.
     * Get Deployed Form
     * @param {String} id Parameter id
     * @param {module:api/TaskApi~getDeployedFormCallback} callback The callback function, accepting three arguments: error, data, response
     */
			this.getDeployedForm = function(id, callback) {
				var postBody = null;

				// verify the required parameter 'id' is set
				if (id === undefined || id === null) {
					throw new Error("Missing the required parameter 'id' when calling getDeployedForm");
				}


				var pathParams = {
					"id": id
				};
				var queryParams = {
				};
				var collectionQueryParams = {
				};
				var headerParams = {
				};
				var formParams = {
				};

				var authNames = [];
				var contentTypes = [];
				var accepts = ["application/json"];
				var returnType = null;

				return this.apiClient.callApi(
					"/task/{id}/deployed-form", "GET",
					pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
					authNames, contentTypes, accepts, returnType, callback
				);
			};

			/**
     * Callback function to receive the result of the getForm operation.
     * @callback module:api/TaskApi~getFormCallback
     * @param {String} error Error message, if any.
     * @param {module:model/FormDto} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

			/**
     * Retrieves the form key for a task.
     * Retrieves the form key for a task. The form key corresponds to the &#x60;FormData#formKey&#x60; property in the engine. This key can be used to do task-specific form rendering in client applications. Additionally, the context path of the containing process application is returned.
     * @param {String} id Parameter id
     * @param {module:api/TaskApi~getFormCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/FormDto}
     */
			this.getForm = function(id, callback) {
				var postBody = null;

				// verify the required parameter 'id' is set
				if (id === undefined || id === null) {
					throw new Error("Missing the required parameter 'id' when calling getForm");
				}


				var pathParams = {
					"id": id
				};
				var queryParams = {
				};
				var collectionQueryParams = {
				};
				var headerParams = {
				};
				var formParams = {
				};

				var authNames = [];
				var contentTypes = [];
				var accepts = ["application/json"];
				var returnType = FormDto;

				return this.apiClient.callApi(
					"/task/{id}/form", "GET",
					pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
					authNames, contentTypes, accepts, returnType, callback
				);
			};

			/**
     * Callback function to receive the result of the getFormVariables operation.
     * @callback module:api/TaskApi~getFormVariablesCallback
     * @param {String} error Error message, if any.
     * @param {Object.<String, {'String': Object}>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

			/**
     * Retrieves the form variables for a task (only if they are defined via the Generated Task Form approach).
     * Retrieves the form variables for a task (only if they are defined via the Generated Task Form approach). The form variables take form data specified on the task into account. If form fields are defined, the variable types and default values of the form fields are taken into account.
     * @param {String} id Parameter id
     * @param {Object} opts Optional parameters
     * @param {String} opts.variableNames Parameter variableNames
     * @param {Boolean} opts.deserializeValues Parameter deserializeValues (default to true)
     * @param {module:api/TaskApi~getFormVariablesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object.<String, {'String': Object}>}
     */
			this.getFormVariables = function(id, opts, callback) {
				opts = opts || {};
				var postBody = null;

				// verify the required parameter 'id' is set
				if (id === undefined || id === null) {
					throw new Error("Missing the required parameter 'id' when calling getFormVariables");
				}


				var pathParams = {
					"id": id
				};
				var queryParams = {
					"variableNames": opts["variableNames"],
					"deserializeValues": opts["deserializeValues"],
				};
				var collectionQueryParams = {
				};
				var headerParams = {
				};
				var formParams = {
				};

				var authNames = [];
				var contentTypes = [];
				var accepts = ["application/json"];
				var returnType = {"String": Object};

				return this.apiClient.callApi(
					"/task/{id}/form-variables", "GET",
					pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
					authNames, contentTypes, accepts, returnType, callback
				);
			};

			/**
     * Callback function to receive the result of the getIdentityLinks operation.
     * @callback module:api/TaskApi~getIdentityLinksCallback
     * @param {String} error Error message, if any.
     * @param {Array.<Object>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

			/**
     * Gets the identity links for a task by id, which are the users and groups that are in some relation to it (including assignee and owner).
     * Gets the identity links for a task by id, which are the users and groups that are in some relation to it (including assignee and owner).
     * @param {String} id Parameter id
     * @param {Object} opts Optional parameters
     * @param {String} opts.type Parameter type
     * @param {module:api/TaskApi~getIdentityLinksCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<Object>}
     */
			this.getIdentityLinks = function(id, opts, callback) {
				opts = opts || {};
				var postBody = null;

				// verify the required parameter 'id' is set
				if (id === undefined || id === null) {
					throw new Error("Missing the required parameter 'id' when calling getIdentityLinks");
				}


				var pathParams = {
					"id": id
				};
				var queryParams = {
					"type": opts["type"],
				};
				var collectionQueryParams = {
				};
				var headerParams = {
				};
				var formParams = {
				};

				var authNames = [];
				var contentTypes = [];
				var accepts = ["application/json"];
				var returnType = [Object];

				return this.apiClient.callApi(
					"/task/{id}/identity-links", "GET",
					pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
					authNames, contentTypes, accepts, returnType, callback
				);
			};

			/**
     * Callback function to receive the result of the getLocalVariables operation.
     * @callback module:api/TaskApi~getLocalVariablesCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

			/**
     * Retrieves all variables of a given task by id.
     * Retrieves all variables of a given task by id.
     * @param {String} id Parameter id
     * @param {module:api/TaskApi~getLocalVariablesCallback} callback The callback function, accepting three arguments: error, data, response
     */
			this.getLocalVariables = function(id, callback) {
				var postBody = null;

				// verify the required parameter 'id' is set
				if (id === undefined || id === null) {
					throw new Error("Missing the required parameter 'id' when calling getLocalVariables");
				}


				var pathParams = {
					"id": id
				};
				var queryParams = {
				};
				var collectionQueryParams = {
				};
				var headerParams = {
				};
				var formParams = {
				};

				var authNames = [];
				var contentTypes = [];
				var accepts = ["application/json"];
				var returnType = null;

				return this.apiClient.callApi(
					"/task/{id}/localVariables", "GET",
					pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
					authNames, contentTypes, accepts, returnType, callback
				);
			};

			/**
     * Callback function to receive the result of the getRenderedForm operation.
     * @callback module:api/TaskApi~getRenderedFormCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

			/**
     * Retrieves the rendered form for a task.
     * Retrieves the rendered form for a task. This method can be used to get the HTML rendering of a Generated Task Form.
     * @param {String} id Parameter id
     * @param {module:api/TaskApi~getRenderedFormCallback} callback The callback function, accepting three arguments: error, data, response
     */
			this.getRenderedForm = function(id, callback) {
				var postBody = null;

				// verify the required parameter 'id' is set
				if (id === undefined || id === null) {
					throw new Error("Missing the required parameter 'id' when calling getRenderedForm");
				}


				var pathParams = {
					"id": id
				};
				var queryParams = {
				};
				var collectionQueryParams = {
				};
				var headerParams = {
				};
				var formParams = {
				};

				var authNames = [];
				var contentTypes = [];
				var accepts = ["application/xhtml+xml"];
				var returnType = null;

				return this.apiClient.callApi(
					"/task/{id}/rendered-form", "GET",
					pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
					authNames, contentTypes, accepts, returnType, callback
				);
			};

			/**
     * Callback function to receive the result of the getTask operation.
     * @callback module:api/TaskApi~getTaskCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

			/**
     * Retrieves a task by id.
     * Retrieves a task by id.
     * @param {String} id Parameter id
     * @param {module:api/TaskApi~getTaskCallback} callback The callback function, accepting three arguments: error, data, response
     */
			this.getTask = function(id, callback) {
				var postBody = null;

				// verify the required parameter 'id' is set
				if (id === undefined || id === null) {
					throw new Error("Missing the required parameter 'id' when calling getTask");
				}


				var pathParams = {
					"id": id
				};
				var queryParams = {
				};
				var collectionQueryParams = {
				};
				var headerParams = {
				};
				var formParams = {
				};

				var authNames = [];
				var contentTypes = [];
				var accepts = ["application/json"];
				var returnType = null;

				return this.apiClient.callApi(
					"/task/{id}", "GET",
					pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
					authNames, contentTypes, accepts, returnType, callback
				);
			};

			/**
     * Callback function to receive the result of the getTaskCommentResource operation.
     * @callback module:api/TaskApi~getTaskCommentResourceCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

			/**
     * Gets the comments for a task by id.
     * Gets the comments for a task by id.
     * @param {String} id Parameter id
     * @param {module:api/TaskApi~getTaskCommentResourceCallback} callback The callback function, accepting three arguments: error, data, response
     */
			this.getTaskCommentResource = function(id, callback) {
				var postBody = null;

				// verify the required parameter 'id' is set
				if (id === undefined || id === null) {
					throw new Error("Missing the required parameter 'id' when calling getTaskCommentResource");
				}


				var pathParams = {
					"id": id
				};
				var queryParams = {
				};
				var collectionQueryParams = {
				};
				var headerParams = {
				};
				var formParams = {
				};

				var authNames = [];
				var contentTypes = [];
				var accepts = ["application/json"];
				var returnType = null;

				return this.apiClient.callApi(
					"/task/{id}/comment", "GET",
					pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
					authNames, contentTypes, accepts, returnType, callback
				);
			};

			/**
     * Callback function to receive the result of the getTaskCountByCandidateGroupReport operation.
     * @callback module:api/TaskApi~getTaskCountByCandidateGroupReportCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

			/**
     * Retrieves the number of tasks for each candidate group.
     * Retrieves the number of tasks for each candidate group.
     * @param {module:api/TaskApi~getTaskCountByCandidateGroupReportCallback} callback The callback function, accepting three arguments: error, data, response
     */
			this.getTaskCountByCandidateGroupReport = function(callback) {
				var postBody = null;


				var pathParams = {
				};
				var queryParams = {
				};
				var collectionQueryParams = {
				};
				var headerParams = {
				};
				var formParams = {
				};

				var authNames = [];
				var contentTypes = [];
				var accepts = ["application/json", "text/csv", "application/csv"];
				var returnType = null;

				return this.apiClient.callApi(
					"/task/report/candidate-group-count", "GET",
					pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
					authNames, contentTypes, accepts, returnType, callback
				);
			};

			/**
     * Callback function to receive the result of the getTaskReportResource operation.
     * @callback module:api/TaskApi~getTaskReportResourceCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

			/**
     * Get Task Report Resource.
     * Get Task Report Resource
     * @param {module:api/TaskApi~getTaskReportResourceCallback} callback The callback function, accepting three arguments: error, data, response
     */
			this.getTaskReportResource = function(callback) {
				var postBody = null;


				var pathParams = {
				};
				var queryParams = {
				};
				var collectionQueryParams = {
				};
				var headerParams = {
				};
				var formParams = {
				};

				var authNames = [];
				var contentTypes = [];
				var accepts = ["application/json"];
				var returnType = null;

				return this.apiClient.callApi(
					"/task/report", "GET",
					pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
					authNames, contentTypes, accepts, returnType, callback
				);
			};

			/**
     * Callback function to receive the result of the getTasks operation.
     * @callback module:api/TaskApi~getTasksCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

			/**
     * Queries for tasks that fulfill a given filter.
     * Queries for tasks that fulfill a given filter. The size of the result set can be retrieved by using the Get Task Count method.There are several query parameters (such as &#x60;assigneeExpression&#x60;) for specifying an EL expression. These are disabled by default to prevent remote code execution. See the section on security considerations for custom code in the user guide for details.
     * @param {Object} opts Optional parameters
     * @param {Number} opts.firstResult Parameter firstResult
     * @param {Number} opts.maxResults Parameter maxResults
     * @param {String} opts.assigneeExpression Restrict to tasks that the user described by the given expression is assigned to. See the user guide for more information on available functions.
     * @param {String} opts.caseDefinitionKey Restrict to tasks that belong to a case definition with the given key.
     * @param {String} opts.processDefinitionName Restrict to tasks that belong to a process definition with the given name.
     * @param {String} opts.involvedUserExpression Only include tasks that the user described by the given expression is involved in. A user is involved in a task if an identity link exists between task and user (e.g., the user is the assignee). See the user guide for more information on available functions.
     * @param {String} opts.unassigned If set to true, restricts the query to all tasks that are unassigned.
     * @param {String} opts.caseDefinitionName Restrict to tasks that belong to a case definition with the given name.
     * @param {String} opts.candidateUserExpression Only include tasks that are offered to the user described by the given expression. See the user guide for more information on available functions.
     * @param {String} opts.processDefinitionKey Restrict to tasks that belong to a process definition with the given key.
     * @param {String} opts.includeAssignedTasks Also include tasks that are assigned to users in candidate queries. Default is to only include tasks that are not assigned to any user if you query by candidate user or group(s).
     * @param {String} opts.tenantIdIn Only include tasks which belong to one of the passed and comma-separated tenant ids.
     * @param {String} opts.processInstanceBusinessKey Restrict to tasks that belong to process instances with the given business key.
     * @param {String} opts.caseInstanceBusinessKeyLike Restrict to tasks that have a case instance business key that has the parameter value as a substring.
     * @param {String} opts.caseDefinitionNameLike Restrict to tasks that have a case definition name that has the parameter value as a substring.
     * @param {String} opts.assigneeLikeExpression Restrict to tasks that have an assignee that has the parameter value described by the given expression as a substring. See the user guide for more information on available functions.
     * @param {String} opts.owner Restrict to tasks that the given user owns.
     * @param {String} opts.processInstanceId Restrict to tasks that belong to process instances with the given id.
     * @param {String} opts.processDefinitionId Restrict to tasks that belong to a process definition with the given id.
     * @param {String} opts.processDefinitionNameLike Restrict to tasks that have a process definition name that has the parameter value as a substring.
     * @param {String} opts.caseInstanceBusinessKey Restrict to tasks that belong to case instances with the given business key.
     * @param {String} opts.caseExecutionId Restrict to tasks that belong to a case execution with the given id.
     * @param {String} opts.candidateGroupExpression Only include tasks that are offered to the group described by the given expression. See the user guide for more information on available functions.
     * @param {String} opts.processDefinitionKeyIn Restrict to tasks that belong to a process definition with one of the given keys. The keys need to be in a comma-separated list.
     * @param {String} opts.caseDefinitionId Restrict to tasks that belong to a case definition with the given id.
     * @param {String} opts.caseInstanceId Restrict to tasks that belong to case instances with the given id.
     * @param {String} opts.assigneeLike Restrict to tasks that have an assignee that has the parameter value as a substring.
     * @param {String} opts.ownerExpression Restrict to tasks that the user described by the given expression owns. See the user guide for more information on available functions.
     * @param {String} opts.processInstanceBusinessKeyIn Restrict to tasks that belong to process instances with one of the give business keys. The keys need to be in a comma-separated list.
     * @param {String} opts.candidateGroup Only include tasks that are offered to the given group.
     * @param {String} opts.executionId Restrict to tasks that belong to an execution with the given id.
     * @param {String} opts.candidateUser Only include tasks that are offered to the given user or to one of his groups.
     * @param {String} opts.processInstanceBusinessKeyLike Restrict to tasks that have a process instance business key that has the parameter value as a substring.
     * @param {String} opts.activityInstanceIdIn Only include tasks which belong to one of the passed and comma-separated activity instance ids.
     * @param {String} opts.withoutTenantId Only include tasks which belong to no tenant. Value may only be true, as false is the default behavior.
     * @param {String} opts.assigned If set to true, restricts the query to all tasks that are assigned.
     * @param {String} opts.assignee Restrict to tasks that the given user is assigned to.
     * @param {String} opts.involvedUser Only include tasks that the given user is involved in. A user is involved in a task if an identity link exists between task and user (e.g., the user is the assignee).
     * @param {module:api/TaskApi~getTasksCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
			this.getTasks = function(opts, callback) {
				opts = opts || {};
				var postBody = null;


				var pathParams = {
				};
				var queryParams = {
					"firstResult": opts["firstResult"],
					"maxResults": opts["maxResults"],
					"assigneeExpression": opts["assigneeExpression"],
					"caseDefinitionKey": opts["caseDefinitionKey"],
					"processDefinitionName": opts["processDefinitionName"],
					"involvedUserExpression": opts["involvedUserExpression"],
					"unassigned": opts["unassigned"],
					"caseDefinitionName": opts["caseDefinitionName"],
					"candidateUserExpression": opts["candidateUserExpression"],
					"processDefinitionKey": opts["processDefinitionKey"],
					"includeAssignedTasks": opts["includeAssignedTasks"],
					"tenantIdIn": opts["tenantIdIn"],
					"processInstanceBusinessKey": opts["processInstanceBusinessKey"],
					"caseInstanceBusinessKeyLike": opts["caseInstanceBusinessKeyLike"],
					"caseDefinitionNameLike": opts["caseDefinitionNameLike"],
					"assigneeLikeExpression": opts["assigneeLikeExpression"],
					"owner": opts["owner"],
					"processInstanceId": opts["processInstanceId"],
					"processDefinitionId": opts["processDefinitionId"],
					"processDefinitionNameLike": opts["processDefinitionNameLike"],
					"caseInstanceBusinessKey": opts["caseInstanceBusinessKey"],
					"caseExecutionId": opts["caseExecutionId"],
					"candidateGroupExpression": opts["candidateGroupExpression"],
					"processDefinitionKeyIn": opts["processDefinitionKeyIn"],
					"caseDefinitionId": opts["caseDefinitionId"],
					"caseInstanceId": opts["caseInstanceId"],
					"assigneeLike": opts["assigneeLike"],
					"ownerExpression": opts["ownerExpression"],
					"processInstanceBusinessKeyIn": opts["processInstanceBusinessKeyIn"],
					"candidateGroup": opts["candidateGroup"],
					"executionId": opts["executionId"],
					"candidateUser": opts["candidateUser"],
					"processInstanceBusinessKeyLike": opts["processInstanceBusinessKeyLike"],
					"activityInstanceIdIn": opts["activityInstanceIdIn"],
					"withoutTenantId": opts["withoutTenantId"],
					"assigned": opts["assigned"],
					"assignee": opts["assignee"],
					"involvedUser": opts["involvedUser"],
				};
				var collectionQueryParams = {
				};
				var headerParams = {
				};
				var formParams = {
				};

				var authNames = [];
				var contentTypes = [];
				var accepts = ["application/json", "application/hal+json"];
				var returnType = Object;

				return this.apiClient.callApi(
					"/task", "GET",
					pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
					authNames, contentTypes, accepts, returnType, callback
				);
			};

			/**
     * Callback function to receive the result of the getTasksCount operation.
     * @callback module:api/TaskApi~getTasksCountCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CountResultDto} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

			/**
     * Retrieves the number of tasks that fulfill a provided filter.
     * Retrieves the number of tasks that fulfill a provided filter. Corresponds to the size of the result set when using the Get Tasks method.There are several query parameters (such as &#x60;assigneeExpression&#x60;) for specifying an EL expression. These are disabled by default to prevent remote code execution. See the section on security considerations for custom code in the user guide for details.
     * @param {Object} opts Optional parameters
     * @param {String} opts.assigneeExpression Restrict to tasks that the user described by the given expression is assigned to. See the user guide for more information on available functions.
     * @param {String} opts.caseDefinitionKey Restrict to tasks that belong to a case definition with the given key.
     * @param {String} opts.processDefinitionName Restrict to tasks that belong to a process definition with the given name.
     * @param {String} opts.involvedUserExpression Only include tasks that the user described by the given expression is involved in. A user is involved in a task if an identity link exists between task and user (e.g., the user is the assignee). See the user guide for more information on available functions.
     * @param {String} opts.unassigned If set to true, restricts the query to all tasks that are unassigned.
     * @param {String} opts.caseDefinitionName Restrict to tasks that belong to a case definition with the given name.
     * @param {String} opts.candidateUserExpression Only include tasks that are offered to the user described by the given expression. See the user guide for more information on available functions.
     * @param {String} opts.processDefinitionKey Restrict to tasks that belong to a process definition with the given key.
     * @param {String} opts.includeAssignedTasks Also include tasks that are assigned to users in candidate queries. Default is to only include tasks that are not assigned to any user if you query by candidate user or group(s).
     * @param {String} opts.tenantIdIn Only include tasks which belong to one of the passed and comma-separated tenant ids.
     * @param {String} opts.processInstanceBusinessKey Restrict to tasks that belong to process instances with the given business key.
     * @param {String} opts.caseInstanceBusinessKeyLike Restrict to tasks that have a case instance business key that has the parameter value as a substring.
     * @param {String} opts.caseDefinitionNameLike Restrict to tasks that have a case definition name that has the parameter value as a substring.
     * @param {String} opts.assigneeLikeExpression Restrict to tasks that have an assignee that has the parameter value described by the given expression as a substring. See the user guide for more information on available functions.
     * @param {String} opts.owner Restrict to tasks that the given user owns.
     * @param {String} opts.processInstanceId Restrict to tasks that belong to process instances with the given id.
     * @param {String} opts.processDefinitionId Restrict to tasks that belong to a process definition with the given id.
     * @param {String} opts.processDefinitionNameLike Restrict to tasks that have a process definition name that has the parameter value as a substring.
     * @param {String} opts.caseInstanceBusinessKey Restrict to tasks that belong to case instances with the given business key.
     * @param {String} opts.caseExecutionId Restrict to tasks that belong to a case execution with the given id.
     * @param {String} opts.candidateGroupExpression Only include tasks that are offered to the group described by the given expression. See the user guide for more information on available functions.
     * @param {String} opts.processDefinitionKeyIn Restrict to tasks that belong to a process definition with one of the given keys. The keys need to be in a comma-separated list.
     * @param {String} opts.caseDefinitionId Restrict to tasks that belong to a case definition with the given id.
     * @param {String} opts.caseInstanceId Restrict to tasks that belong to case instances with the given id.
     * @param {String} opts.assigneeLike Restrict to tasks that have an assignee that has the parameter value as a substring.
     * @param {String} opts.ownerExpression Restrict to tasks that the user described by the given expression owns. See the user guide for more information on available functions.
     * @param {String} opts.processInstanceBusinessKeyIn Restrict to tasks that belong to process instances with one of the give business keys. The keys need to be in a comma-separated list.
     * @param {String} opts.candidateGroup Only include tasks that are offered to the given group.
     * @param {String} opts.executionId Restrict to tasks that belong to an execution with the given id.
     * @param {String} opts.candidateUser Only include tasks that are offered to the given user or to one of his groups.
     * @param {String} opts.processInstanceBusinessKeyLike Restrict to tasks that have a process instance business key that has the parameter value as a substring.
     * @param {String} opts.activityInstanceIdIn Only include tasks which belong to one of the passed and comma-separated activity instance ids.
     * @param {String} opts.withoutTenantId Only include tasks which belong to no tenant. Value may only be true, as false is the default behavior.
     * @param {String} opts.assigned If set to true, restricts the query to all tasks that are assigned.
     * @param {String} opts.assignee Restrict to tasks that the given user is assigned to.
     * @param {String} opts.involvedUser Only include tasks that the given user is involved in. A user is involved in a task if an identity link exists between task and user (e.g., the user is the assignee).
     * @param {module:api/TaskApi~getTasksCountCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CountResultDto}
     */
			this.getTasksCount = function(opts, callback) {
				opts = opts || {};
				var postBody = null;


				var pathParams = {
				};
				var queryParams = {
					"assigneeExpression": opts["assigneeExpression"],
					"caseDefinitionKey": opts["caseDefinitionKey"],
					"processDefinitionName": opts["processDefinitionName"],
					"involvedUserExpression": opts["involvedUserExpression"],
					"unassigned": opts["unassigned"],
					"caseDefinitionName": opts["caseDefinitionName"],
					"candidateUserExpression": opts["candidateUserExpression"],
					"processDefinitionKey": opts["processDefinitionKey"],
					"includeAssignedTasks": opts["includeAssignedTasks"],
					"tenantIdIn": opts["tenantIdIn"],
					"processInstanceBusinessKey": opts["processInstanceBusinessKey"],
					"caseInstanceBusinessKeyLike": opts["caseInstanceBusinessKeyLike"],
					"caseDefinitionNameLike": opts["caseDefinitionNameLike"],
					"assigneeLikeExpression": opts["assigneeLikeExpression"],
					"owner": opts["owner"],
					"processInstanceId": opts["processInstanceId"],
					"processDefinitionId": opts["processDefinitionId"],
					"processDefinitionNameLike": opts["processDefinitionNameLike"],
					"caseInstanceBusinessKey": opts["caseInstanceBusinessKey"],
					"caseExecutionId": opts["caseExecutionId"],
					"candidateGroupExpression": opts["candidateGroupExpression"],
					"processDefinitionKeyIn": opts["processDefinitionKeyIn"],
					"caseDefinitionId": opts["caseDefinitionId"],
					"caseInstanceId": opts["caseInstanceId"],
					"assigneeLike": opts["assigneeLike"],
					"ownerExpression": opts["ownerExpression"],
					"processInstanceBusinessKeyIn": opts["processInstanceBusinessKeyIn"],
					"candidateGroup": opts["candidateGroup"],
					"executionId": opts["executionId"],
					"candidateUser": opts["candidateUser"],
					"processInstanceBusinessKeyLike": opts["processInstanceBusinessKeyLike"],
					"activityInstanceIdIn": opts["activityInstanceIdIn"],
					"withoutTenantId": opts["withoutTenantId"],
					"assigned": opts["assigned"],
					"assignee": opts["assignee"],
					"involvedUser": opts["involvedUser"],
				};
				var collectionQueryParams = {
				};
				var headerParams = {
				};
				var formParams = {
				};

				var authNames = [];
				var contentTypes = [];
				var accepts = ["application/json"];
				var returnType = CountResultDto;

				return this.apiClient.callApi(
					"/task/count", "GET",
					pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
					authNames, contentTypes, accepts, returnType, callback
				);
			};

			/**
     * Callback function to receive the result of the getVariable operation.
     * @callback module:api/TaskApi~getVariableCallback
     * @param {String} error Error message, if any.
     * @param {module:model/VariableValueDto} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

			/**
     * Retrieves a variable of a given case instance by id.
     * Retrieves a variable of a given case instance by id.
     * @param {String} varId Parameter variableName
     * @param {String} id Parameter id
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.deserializeValue Parameter deserializeValue (default to true)
     * @param {module:api/TaskApi~getVariableCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/VariableValueDto}
     */
			this.getVariable = function(varId, id, opts, callback) {
				opts = opts || {};
				var postBody = null;

				// verify the required parameter 'varId' is set
				if (varId === undefined || varId === null) {
					throw new Error("Missing the required parameter 'varId' when calling getVariable");
				}

				// verify the required parameter 'id' is set
				if (id === undefined || id === null) {
					throw new Error("Missing the required parameter 'id' when calling getVariable");
				}


				var pathParams = {
					"varId": varId,
					"id": id
				};
				var queryParams = {
					"deserializeValue": opts["deserializeValue"],
				};
				var collectionQueryParams = {
				};
				var headerParams = {
				};
				var formParams = {
				};

				var authNames = [];
				var contentTypes = [];
				var accepts = ["application/json"];
				var returnType = VariableValueDto;

				return this.apiClient.callApi(
					"/task/{id}/localVariables/{varId}", "GET",
					pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
					authNames, contentTypes, accepts, returnType, callback
				);
			};

			/**
     * Callback function to receive the result of the getVariableBinary operation.
     * @callback module:api/TaskApi~getVariableBinaryCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

			/**
     * Retrieves a binary variable of a given case instance by id.
     * Retrieves a binary variable of a given case instance by id. Applicable for byte array and file variables.
     * @param {String} varId Parameter variableName
     * @param {String} id Parameter id
     * @param {module:api/TaskApi~getVariableBinaryCallback} callback The callback function, accepting three arguments: error, data, response
     */
			this.getVariableBinary = function(varId, id, callback) {
				var postBody = null;

				// verify the required parameter 'varId' is set
				if (varId === undefined || varId === null) {
					throw new Error("Missing the required parameter 'varId' when calling getVariableBinary");
				}

				// verify the required parameter 'id' is set
				if (id === undefined || id === null) {
					throw new Error("Missing the required parameter 'id' when calling getVariableBinary");
				}


				var pathParams = {
					"varId": varId,
					"id": id
				};
				var queryParams = {
				};
				var collectionQueryParams = {
				};
				var headerParams = {
				};
				var formParams = {
				};

				var authNames = [];
				var contentTypes = [];
				var accepts = ["application/json"];
				var returnType = null;

				return this.apiClient.callApi(
					"/task/{id}/localVariables/{varId}/data", "GET",
					pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
					authNames, contentTypes, accepts, returnType, callback
				);
			};

			/**
     * Callback function to receive the result of the getVariableBinary_0 operation.
     * @callback module:api/TaskApi~getVariableBinary_0Callback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

			/**
     * Retrieves a binary variable of a given case instance by id.
     * Retrieves a binary variable of a given case instance by id. Applicable for byte array and file variables.
     * @param {String} varId Parameter variableName
     * @param {String} id Parameter id
     * @param {module:api/TaskApi~getVariableBinary_0Callback} callback The callback function, accepting three arguments: error, data, response
     */
			this.getVariableBinary_0 = function(varId, id, callback) {
				var postBody = null;

				// verify the required parameter 'varId' is set
				if (varId === undefined || varId === null) {
					throw new Error("Missing the required parameter 'varId' when calling getVariableBinary_0");
				}

				// verify the required parameter 'id' is set
				if (id === undefined || id === null) {
					throw new Error("Missing the required parameter 'id' when calling getVariableBinary_0");
				}


				var pathParams = {
					"varId": varId,
					"id": id
				};
				var queryParams = {
				};
				var collectionQueryParams = {
				};
				var headerParams = {
				};
				var formParams = {
				};

				var authNames = [];
				var contentTypes = [];
				var accepts = ["application/json"];
				var returnType = null;

				return this.apiClient.callApi(
					"/task/{id}/variables/{varId}/data", "GET",
					pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
					authNames, contentTypes, accepts, returnType, callback
				);
			};

			/**
     * Callback function to receive the result of the getVariable_0 operation.
     * @callback module:api/TaskApi~getVariable_0Callback
     * @param {String} error Error message, if any.
     * @param {module:model/VariableValueDto} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

			/**
     * Retrieves a variable of a given case instance by id.
     * Retrieves a variable of a given case instance by id.
     * @param {String} varId Parameter variableName
     * @param {String} id Parameter id
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.deserializeValue Parameter deserializeValue (default to true)
     * @param {module:api/TaskApi~getVariable_0Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/VariableValueDto}
     */
			this.getVariable_0 = function(varId, id, opts, callback) {
				opts = opts || {};
				var postBody = null;

				// verify the required parameter 'varId' is set
				if (varId === undefined || varId === null) {
					throw new Error("Missing the required parameter 'varId' when calling getVariable_0");
				}

				// verify the required parameter 'id' is set
				if (id === undefined || id === null) {
					throw new Error("Missing the required parameter 'id' when calling getVariable_0");
				}


				var pathParams = {
					"varId": varId,
					"id": id
				};
				var queryParams = {
					"deserializeValue": opts["deserializeValue"],
				};
				var collectionQueryParams = {
				};
				var headerParams = {
				};
				var formParams = {
				};

				var authNames = [];
				var contentTypes = [];
				var accepts = ["application/json"];
				var returnType = VariableValueDto;

				return this.apiClient.callApi(
					"/task/{id}/variables/{varId}", "GET",
					pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
					authNames, contentTypes, accepts, returnType, callback
				);
			};

			/**
     * Callback function to receive the result of the getVariables operation.
     * @callback module:api/TaskApi~getVariablesCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

			/**
     * Retrieves all variables visible from the task.
     * Retrieves all variables visible from the task. A variable is visible from the task if it is a local task variable or declared in a parent scope of the task. See documentation on visiblity of variables.
     * @param {String} id Parameter id
     * @param {module:api/TaskApi~getVariablesCallback} callback The callback function, accepting three arguments: error, data, response
     */
			this.getVariables = function(id, callback) {
				var postBody = null;

				// verify the required parameter 'id' is set
				if (id === undefined || id === null) {
					throw new Error("Missing the required parameter 'id' when calling getVariables");
				}


				var pathParams = {
					"id": id
				};
				var queryParams = {
				};
				var collectionQueryParams = {
				};
				var headerParams = {
				};
				var formParams = {
				};

				var authNames = [];
				var contentTypes = [];
				var accepts = ["application/json"];
				var returnType = null;

				return this.apiClient.callApi(
					"/task/{id}/variables", "GET",
					pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
					authNames, contentTypes, accepts, returnType, callback
				);
			};

			/**
     * Callback function to receive the result of the modifyVariables operation.
     * @callback module:api/TaskApi~modifyVariablesCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

			/**
     * Updates or deletes the variables of a case instance.
     * Updates or deletes the variables of a case instance. Please note: deletion precedes update.
     * @param {String} id Parameter id
     * @param {Object} opts Optional parameters
     * @param {module:model/PatchVariablesDto} opts.body Parameter patch
     * @param {module:api/TaskApi~modifyVariablesCallback} callback The callback function, accepting three arguments: error, data, response
     */
			this.modifyVariables = function(id, opts, callback) {
				opts = opts || {};
				var postBody = opts["body"];

				// verify the required parameter 'id' is set
				if (id === undefined || id === null) {
					throw new Error("Missing the required parameter 'id' when calling modifyVariables");
				}


				var pathParams = {
					"id": id
				};
				var queryParams = {
				};
				var collectionQueryParams = {
				};
				var headerParams = {
				};
				var formParams = {
				};

				var authNames = [];
				var contentTypes = ["application/json"];
				var accepts = ["application/json"];
				var returnType = null;

				return this.apiClient.callApi(
					"/task/{id}/localVariables", "POST",
					pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
					authNames, contentTypes, accepts, returnType, callback
				);
			};

			/**
     * Callback function to receive the result of the modifyVariables_0 operation.
     * @callback module:api/TaskApi~modifyVariables_0Callback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

			/**
     * Updates or deletes the variables of a case instance.
     * Updates or deletes the variables of a case instance. Please note: deletion precedes update.
     * @param {String} id Parameter id
     * @param {Object} opts Optional parameters
     * @param {module:model/PatchVariablesDto} opts.body Parameter patch
     * @param {module:api/TaskApi~modifyVariables_0Callback} callback The callback function, accepting three arguments: error, data, response
     */
			this.modifyVariables_0 = function(id, opts, callback) {
				opts = opts || {};
				var postBody = opts["body"];

				// verify the required parameter 'id' is set
				if (id === undefined || id === null) {
					throw new Error("Missing the required parameter 'id' when calling modifyVariables_0");
				}


				var pathParams = {
					"id": id
				};
				var queryParams = {
				};
				var collectionQueryParams = {
				};
				var headerParams = {
				};
				var formParams = {
				};

				var authNames = [];
				var contentTypes = ["application/json"];
				var accepts = ["application/json"];
				var returnType = null;

				return this.apiClient.callApi(
					"/task/{id}/variables", "POST",
					pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
					authNames, contentTypes, accepts, returnType, callback
				);
			};

			/**
     * Callback function to receive the result of the putVariable operation.
     * @callback module:api/TaskApi~putVariableCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

			/**
     * Sets a variable of a given case instance by id.
     * Sets a variable of a given case instance by id.
     * @param {String} varId Parameter variableName
     * @param {String} id Parameter id
     * @param {Object} opts Optional parameters
     * @param {module:model/VariableValueDto} opts.body Parameter variable
     * @param {module:api/TaskApi~putVariableCallback} callback The callback function, accepting three arguments: error, data, response
     */
			this.putVariable = function(varId, id, opts, callback) {
				opts = opts || {};
				var postBody = opts["body"];

				// verify the required parameter 'varId' is set
				if (varId === undefined || varId === null) {
					throw new Error("Missing the required parameter 'varId' when calling putVariable");
				}

				// verify the required parameter 'id' is set
				if (id === undefined || id === null) {
					throw new Error("Missing the required parameter 'id' when calling putVariable");
				}


				var pathParams = {
					"varId": varId,
					"id": id
				};
				var queryParams = {
				};
				var collectionQueryParams = {
				};
				var headerParams = {
				};
				var formParams = {
				};

				var authNames = [];
				var contentTypes = ["application/json"];
				var accepts = ["application/json"];
				var returnType = null;

				return this.apiClient.callApi(
					"/task/{id}/localVariables/{varId}", "PUT",
					pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
					authNames, contentTypes, accepts, returnType, callback
				);
			};

			/**
     * Callback function to receive the result of the putVariable_0 operation.
     * @callback module:api/TaskApi~putVariable_0Callback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

			/**
     * Sets a variable of a given case instance by id.
     * Sets a variable of a given case instance by id.
     * @param {String} varId Parameter variableName
     * @param {String} id Parameter id
     * @param {Object} opts Optional parameters
     * @param {module:model/VariableValueDto} opts.body Parameter variable
     * @param {module:api/TaskApi~putVariable_0Callback} callback The callback function, accepting three arguments: error, data, response
     */
			this.putVariable_0 = function(varId, id, opts, callback) {
				opts = opts || {};
				var postBody = opts["body"];

				// verify the required parameter 'varId' is set
				if (varId === undefined || varId === null) {
					throw new Error("Missing the required parameter 'varId' when calling putVariable_0");
				}

				// verify the required parameter 'id' is set
				if (id === undefined || id === null) {
					throw new Error("Missing the required parameter 'id' when calling putVariable_0");
				}


				var pathParams = {
					"varId": varId,
					"id": id
				};
				var queryParams = {
				};
				var collectionQueryParams = {
				};
				var headerParams = {
				};
				var formParams = {
				};

				var authNames = [];
				var contentTypes = ["application/json"];
				var accepts = ["application/json"];
				var returnType = null;

				return this.apiClient.callApi(
					"/task/{id}/variables/{varId}", "PUT",
					pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
					authNames, contentTypes, accepts, returnType, callback
				);
			};

			/**
     * Callback function to receive the result of the queryTasks operation.
     * @callback module:api/TaskApi~queryTasksCallback
     * @param {String} error Error message, if any.
     * @param {Array.<Object>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

			/**
     * Queries for tasks that fulfill a given filter.
     * Queries for tasks that fulfill a given filter. This method is slightly more powerful than the Get Tasks method because it allows filtering by multiple process or task variables of types &#x60;String&#x60;, &#x60;Number&#x60; or &#x60;Boolean&#x60;. The size of the result set can be retrieved by using the Get Task Count (POST) method.There are several parameters (such as &#x60;assigneeExpression&#x60;) for specifying an EL expression. These are disabled by default to prevent remote code execution. See the section on security considerations for custom code in the user guide for details.
     * @param {Object} opts Optional parameters
     * @param {module:model/TaskQueryDto} opts.body Parameter query
     * @param {Number} opts.firstResult Parameter firstResult
     * @param {Number} opts.maxResults Parameter maxResults
     * @param {module:api/TaskApi~queryTasksCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<Object>}
     */
			this.queryTasks = function(opts, callback) {
				opts = opts || {};
				var postBody = opts["body"];


				var pathParams = {
				};
				var queryParams = {
					"firstResult": opts["firstResult"],
					"maxResults": opts["maxResults"],
				};
				var collectionQueryParams = {
				};
				var headerParams = {
				};
				var formParams = {
				};

				var authNames = [];
				var contentTypes = ["application/json"];
				var accepts = ["application/json"];
				var returnType = [Object];

				return this.apiClient.callApi(
					"/task", "POST",
					pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
					authNames, contentTypes, accepts, returnType, callback
				);
			};

			/**
     * Callback function to receive the result of the queryTasksCount operation.
     * @callback module:api/TaskApi~queryTasksCountCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CountResultDto} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

			/**
     * Retrieves the number of tasks that fulfill the given filter.
     * Retrieves the number of tasks that fulfill the given filter. Corresponds to the size of the result set of the Get Tasks (POST) method and takes the same parameters.There are several query parameters (such as &#x60;assigneeExpression&#x60;) for specifying an EL expression. These are disabled by default to prevent remote code execution. See the section on security considerations for custom code in the user guide for details.
     * @param {Object} opts Optional parameters
     * @param {module:model/TaskQueryDto} opts.body Parameter query
     * @param {module:api/TaskApi~queryTasksCountCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CountResultDto}
     */
			this.queryTasksCount = function(opts, callback) {
				opts = opts || {};
				var postBody = opts["body"];


				var pathParams = {
				};
				var queryParams = {
				};
				var collectionQueryParams = {
				};
				var headerParams = {
				};
				var formParams = {
				};

				var authNames = [];
				var contentTypes = ["application/json"];
				var accepts = ["application/json"];
				var returnType = CountResultDto;

				return this.apiClient.callApi(
					"/task/count", "POST",
					pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
					authNames, contentTypes, accepts, returnType, callback
				);
			};

			/**
     * Callback function to receive the result of the resolve operation.
     * @callback module:api/TaskApi~resolveCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

			/**
     * Resolves a task and updates execution variables.
     * Resolves a task and updates execution variables.
     * @param {String} id Parameter id
     * @param {Object} opts Optional parameters
     * @param {module:model/CompleteTaskDto} opts.body Parameter dto
     * @param {module:api/TaskApi~resolveCallback} callback The callback function, accepting three arguments: error, data, response
     */
			this.resolve = function(id, opts, callback) {
				opts = opts || {};
				var postBody = opts["body"];

				// verify the required parameter 'id' is set
				if (id === undefined || id === null) {
					throw new Error("Missing the required parameter 'id' when calling resolve");
				}


				var pathParams = {
					"id": id
				};
				var queryParams = {
				};
				var collectionQueryParams = {
				};
				var headerParams = {
				};
				var formParams = {
				};

				var authNames = [];
				var contentTypes = ["application/json"];
				var accepts = ["application/json"];
				var returnType = null;

				return this.apiClient.callApi(
					"/task/{id}/resolve", "POST",
					pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
					authNames, contentTypes, accepts, returnType, callback
				);
			};

			/**
     * Callback function to receive the result of the setAssignee operation.
     * @callback module:api/TaskApi~setAssigneeCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

			/**
     * Changes the assignee of a task to a specific user.
     * Changes the assignee of a task to a specific user.Note: The difference with the Claim Task method is that this method does not check if the task already has a user assigned to it.
     * @param {String} id Parameter id
     * @param {Object} opts Optional parameters
     * @param {module:model/UserIdDto} opts.body Parameter dto
     * @param {module:api/TaskApi~setAssigneeCallback} callback The callback function, accepting three arguments: error, data, response
     */
			this.setAssignee = function(id, opts, callback) {
				opts = opts || {};
				var postBody = opts["body"];

				// verify the required parameter 'id' is set
				if (id === undefined || id === null) {
					throw new Error("Missing the required parameter 'id' when calling setAssignee");
				}


				var pathParams = {
					"id": id
				};
				var queryParams = {
				};
				var collectionQueryParams = {
				};
				var headerParams = {
				};
				var formParams = {
				};

				var authNames = [];
				var contentTypes = ["application/json"];
				var accepts = ["application/json"];
				var returnType = null;

				return this.apiClient.callApi(
					"/task/{id}/assignee", "POST",
					pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
					authNames, contentTypes, accepts, returnType, callback
				);
			};

			/**
     * Callback function to receive the result of the setBinaryVariable operation.
     * @callback module:api/TaskApi~setBinaryVariableCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

			/**
     * Sets the serialized value for a binary variable or the binary value for a file variable.
     * Sets the serialized value for a binary variable or the binary value for a file variable.
     * @param {String} varId Parameter variableName
     * @param {String} id Parameter id
     * @param {Object} opts Optional parameters
     * @param {module:model/MultipartFormData} opts.body Parameter multipartFormData
     * @param {module:api/TaskApi~setBinaryVariableCallback} callback The callback function, accepting three arguments: error, data, response
     */
			this.setBinaryVariable = function(varId, id, opts, callback) {
				opts = opts || {};
				var postBody = opts["body"];

				// verify the required parameter 'varId' is set
				if (varId === undefined || varId === null) {
					throw new Error("Missing the required parameter 'varId' when calling setBinaryVariable");
				}

				// verify the required parameter 'id' is set
				if (id === undefined || id === null) {
					throw new Error("Missing the required parameter 'id' when calling setBinaryVariable");
				}


				var pathParams = {
					"varId": varId,
					"id": id
				};
				var queryParams = {
				};
				var collectionQueryParams = {
				};
				var headerParams = {
				};
				var formParams = {
				};

				var authNames = [];
				var contentTypes = ["multipart/form-data"];
				var accepts = ["application/json"];
				var returnType = null;

				return this.apiClient.callApi(
					"/task/{id}/localVariables/{varId}/data", "POST",
					pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
					authNames, contentTypes, accepts, returnType, callback
				);
			};

			/**
     * Callback function to receive the result of the setBinaryVariable_0 operation.
     * @callback module:api/TaskApi~setBinaryVariable_0Callback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

			/**
     * Sets the serialized value for a binary variable or the binary value for a file variable.
     * Sets the serialized value for a binary variable or the binary value for a file variable.
     * @param {String} varId Parameter variableName
     * @param {String} id Parameter id
     * @param {Object} opts Optional parameters
     * @param {module:model/MultipartFormData} opts.body Parameter multipartFormData
     * @param {module:api/TaskApi~setBinaryVariable_0Callback} callback The callback function, accepting three arguments: error, data, response
     */
			this.setBinaryVariable_0 = function(varId, id, opts, callback) {
				opts = opts || {};
				var postBody = opts["body"];

				// verify the required parameter 'varId' is set
				if (varId === undefined || varId === null) {
					throw new Error("Missing the required parameter 'varId' when calling setBinaryVariable_0");
				}

				// verify the required parameter 'id' is set
				if (id === undefined || id === null) {
					throw new Error("Missing the required parameter 'id' when calling setBinaryVariable_0");
				}


				var pathParams = {
					"varId": varId,
					"id": id
				};
				var queryParams = {
				};
				var collectionQueryParams = {
				};
				var headerParams = {
				};
				var formParams = {
				};

				var authNames = [];
				var contentTypes = ["multipart/form-data"];
				var accepts = ["application/json"];
				var returnType = null;

				return this.apiClient.callApi(
					"/task/{id}/variables/{varId}/data", "POST",
					pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
					authNames, contentTypes, accepts, returnType, callback
				);
			};

			/**
     * Callback function to receive the result of the submit operation.
     * @callback module:api/TaskApi~submitCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

			/**
     * Completes a task and updates process variables using a form submit.
     * Completes a task and updates process variables using a form submit. There are two difference between this method and the &#x60;complete&#x60; method:* If the task is in state &#x60;PENDING&#x60; - i.e., has been delegated before, it is not completed but resolved. Otherwise it will be completed. * If the task has Form Field Metadata defined, the process engine will perform backend validation for any form fields which have validators defined. See the [Generated Task Forms]() section of the [User Guide]() for more information.
     * @param {String} id Parameter id
     * @param {Object} opts Optional parameters
     * @param {module:model/CompleteTaskDto} opts.body Parameter dto
     * @param {module:api/TaskApi~submitCallback} callback The callback function, accepting three arguments: error, data, response
     */
			this.submit = function(id, opts, callback) {
				opts = opts || {};
				var postBody = opts["body"];

				// verify the required parameter 'id' is set
				if (id === undefined || id === null) {
					throw new Error("Missing the required parameter 'id' when calling submit");
				}


				var pathParams = {
					"id": id
				};
				var queryParams = {
				};
				var collectionQueryParams = {
				};
				var headerParams = {
				};
				var formParams = {
				};

				var authNames = [];
				var contentTypes = ["application/json"];
				var accepts = ["application/json"];
				var returnType = null;

				return this.apiClient.callApi(
					"/task/{id}/submit-form", "POST",
					pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
					authNames, contentTypes, accepts, returnType, callback
				);
			};

			/**
     * Callback function to receive the result of the unclaim operation.
     * @callback module:api/TaskApi~unclaimCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

			/**
     * Resets a task&#39;s assignee.
     * Resets a task&#39;s assignee. If successful, the task is not assigned to a user.
     * @param {String} id Parameter id
     * @param {module:api/TaskApi~unclaimCallback} callback The callback function, accepting three arguments: error, data, response
     */
			this.unclaim = function(id, callback) {
				var postBody = null;

				// verify the required parameter 'id' is set
				if (id === undefined || id === null) {
					throw new Error("Missing the required parameter 'id' when calling unclaim");
				}


				var pathParams = {
					"id": id
				};
				var queryParams = {
				};
				var collectionQueryParams = {
				};
				var headerParams = {
				};
				var formParams = {
				};

				var authNames = [];
				var contentTypes = [];
				var accepts = ["application/json"];
				var returnType = null;

				return this.apiClient.callApi(
					"/task/{id}/unclaim", "POST",
					pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
					authNames, contentTypes, accepts, returnType, callback
				);
			};

			/**
     * Callback function to receive the result of the updateTask operation.
     * @callback module:api/TaskApi~updateTaskCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

			/**
     * Updates a task.
     * Updates a task.
     * @param {String} id Parameter id
     * @param {Object} opts Optional parameters
     * @param {module:model/TaskDto} opts.body Parameter task
     * @param {module:api/TaskApi~updateTaskCallback} callback The callback function, accepting three arguments: error, data, response
     */
			this.updateTask = function(id, opts, callback) {
				opts = opts || {};
				var postBody = opts["body"];

				// verify the required parameter 'id' is set
				if (id === undefined || id === null) {
					throw new Error("Missing the required parameter 'id' when calling updateTask");
				}


				var pathParams = {
					"id": id
				};
				var queryParams = {
				};
				var collectionQueryParams = {
				};
				var headerParams = {
				};
				var formParams = {
				};

				var authNames = [];
				var contentTypes = ["application/json"];
				var accepts = ["application/json"];
				var returnType = null;

				return this.apiClient.callApi(
					"/task/{id}", "PUT",
					pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
					authNames, contentTypes, accepts, returnType, callback
				);
			};
		};

		return exports;
	}));

},{"../ApiClient":16,"../model/AttachmentDto":44,"../model/CommentDto":58,"../model/CompleteTaskDto":60,"../model/CountResultDto":62,"../model/FormDto":81,"../model/IdentityLinkDto":86,"../model/InputStream":88,"../model/MultipartFormData":104,"../model/PatchVariablesDto":105,"../model/TaskDto":127,"../model/TaskQueryDto":128,"../model/UserIdDto":134,"../model/VariableValueDto":140}],36:[function(require,module,exports){
/**
 * Camunda REST API
 * Swagger OpenApi Spec for Camunda REST API.
 *
 * OpenAPI spec version: v7.8.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.3.1
 *
 * Do not edit the class manually.
 *
 */

	(function(root, factory) {
		if (typeof define === "function" && define.amd) {
			// AMD. Register as an anonymous module.
			define(["ApiClient", "model/CountResultDto", "model/ResourceOptionsDto", "model/TenantDto"], factory);
		} else if (typeof module === "object" && module.exports) {
			// CommonJS-like environments that support module.exports, like Node.
			module.exports = factory(require("../ApiClient"), require("../model/CountResultDto"), require("../model/ResourceOptionsDto"), require("../model/TenantDto"));
		} else {
			// Browser globals (root is window)
			if (!root.CamundaRestApi) {
				root.CamundaRestApi = {};
			}
			root.CamundaRestApi.TenantApi = factory(root.CamundaRestApi.ApiClient, root.CamundaRestApi.CountResultDto, root.CamundaRestApi.ResourceOptionsDto, root.CamundaRestApi.TenantDto);
		}
	}(this, function(ApiClient, CountResultDto, ResourceOptionsDto, TenantDto) {
		"use strict";

		/**
   * Tenant service.
   * @module api/TenantApi
   * @version v7.8.0
   */

		/**
   * Constructs a new TenantApi.
   * @alias module:api/TenantApi
   * @class
   * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
		var exports = function(apiClient) {
			this.apiClient = apiClient || ApiClient.instance;


			/**
     * Callback function to receive the result of the availableOperations operation.
     * @callback module:api/TenantApi~availableOperationsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ResourceOptionsDto} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

			/**
     * The &#x60;/tenant&#x60; resource supports two custom OPTIONS requests, one for the resource as such and one for individual tenant instances.
     * The &#x60;/tenant&#x60; resource supports two custom OPTIONS requests, one for the resource as such and one for individual tenant instances. The OPTIONS request allows checking for the set of available operations that the currently authenticated user can perform on the &#x60;/tenant&#x60; resource. If the user can perform an operation or not may depend on various things, including the users authorizations to interact with this resource and the internal context of the process engine.
     * @param {module:api/TenantApi~availableOperationsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ResourceOptionsDto}
     */
			this.availableOperations = function(callback) {
				var postBody = null;


				var pathParams = {
				};
				var queryParams = {
				};
				var collectionQueryParams = {
				};
				var headerParams = {
				};
				var formParams = {
				};

				var authNames = [];
				var contentTypes = [];
				var accepts = ["application/json"];
				var returnType = ResourceOptionsDto;

				return this.apiClient.callApi(
					"/tenant", "OPTIONS",
					pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
					authNames, contentTypes, accepts, returnType, callback
				);
			};

			/**
     * Callback function to receive the result of the availableOperations_0 operation.
     * @callback module:api/TenantApi~availableOperations_0Callback
     * @param {String} error Error message, if any.
     * @param {module:model/ResourceOptionsDto} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

			/**
     * The &#x60;/tenant&#x60; resource supports two custom OPTIONS requests, one for the resource as such and one for individual tenant instances.
     * The &#x60;/tenant&#x60; resource supports two custom OPTIONS requests, one for the resource as such and one for individual tenant instances. The OPTIONS request allows checking for the set of available operations that the currently authenticated user can perform on the &#x60;/tenant&#x60; resource. If the user can perform an operation or not may depend on various things, including the users authorizations to interact with this resource and the internal context of the process engine.
     * @param {String} id Parameter id
     * @param {module:api/TenantApi~availableOperations_0Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ResourceOptionsDto}
     */
			this.availableOperations_0 = function(id, callback) {
				var postBody = null;

				// verify the required parameter 'id' is set
				if (id === undefined || id === null) {
					throw new Error("Missing the required parameter 'id' when calling availableOperations_0");
				}


				var pathParams = {
					"id": id
				};
				var queryParams = {
				};
				var collectionQueryParams = {
				};
				var headerParams = {
				};
				var formParams = {
				};

				var authNames = [];
				var contentTypes = [];
				var accepts = ["application/json"];
				var returnType = ResourceOptionsDto;

				return this.apiClient.callApi(
					"/tenant/{id}", "OPTIONS",
					pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
					authNames, contentTypes, accepts, returnType, callback
				);
			};

			/**
     * Callback function to receive the result of the availableOperations_1 operation.
     * @callback module:api/TenantApi~availableOperations_1Callback
     * @param {String} error Error message, if any.
     * @param {module:model/ResourceOptionsDto} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

			/**
     * The OPTIONS request allows checking for the set of available operations that the currently authenticated user can perform on the resource.
     * The OPTIONS request allows checking for the set of available operations that the currently authenticated user can perform on the resource. If the user can perform an operation or not may depend on various things, including the users authorizations to interact with this resource and the internal context of the process engine.
     * @param {String} id Parameter id
     * @param {module:api/TenantApi~availableOperations_1Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ResourceOptionsDto}
     */
			this.availableOperations_1 = function(id, callback) {
				var postBody = null;

				// verify the required parameter 'id' is set
				if (id === undefined || id === null) {
					throw new Error("Missing the required parameter 'id' when calling availableOperations_1");
				}


				var pathParams = {
					"id": id
				};
				var queryParams = {
				};
				var collectionQueryParams = {
				};
				var headerParams = {
				};
				var formParams = {
				};

				var authNames = [];
				var contentTypes = [];
				var accepts = ["application/json"];
				var returnType = ResourceOptionsDto;

				return this.apiClient.callApi(
					"/tenant/{id}/group-members", "OPTIONS",
					pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
					authNames, contentTypes, accepts, returnType, callback
				);
			};

			/**
     * Callback function to receive the result of the availableOperations_2 operation.
     * @callback module:api/TenantApi~availableOperations_2Callback
     * @param {String} error Error message, if any.
     * @param {module:model/ResourceOptionsDto} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

			/**
     * The OPTIONS request allows checking for the set of available operations that the currently authenticated user can perform on the resource.
     * The OPTIONS request allows checking for the set of available operations that the currently authenticated user can perform on the resource. If the user can perform an operation or not may depend on various things, including the users authorizations to interact with this resource and the internal context of the process engine.
     * @param {String} id Parameter id
     * @param {module:api/TenantApi~availableOperations_2Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ResourceOptionsDto}
     */
			this.availableOperations_2 = function(id, callback) {
				var postBody = null;

				// verify the required parameter 'id' is set
				if (id === undefined || id === null) {
					throw new Error("Missing the required parameter 'id' when calling availableOperations_2");
				}


				var pathParams = {
					"id": id
				};
				var queryParams = {
				};
				var collectionQueryParams = {
				};
				var headerParams = {
				};
				var formParams = {
				};

				var authNames = [];
				var contentTypes = [];
				var accepts = ["application/json"];
				var returnType = ResourceOptionsDto;

				return this.apiClient.callApi(
					"/tenant/{id}/user-members", "OPTIONS",
					pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
					authNames, contentTypes, accepts, returnType, callback
				);
			};

			/**
     * Callback function to receive the result of the createMembership operation.
     * @callback module:api/TenantApi~createMembershipCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

			/**
     * Creates a membership between a tenant and a group.
     * Creates a membership between a tenant and a group.
     * @param {String} groupId Parameter groupId
     * @param {String} id Parameter id
     * @param {module:api/TenantApi~createMembershipCallback} callback The callback function, accepting three arguments: error, data, response
     */
			this.createMembership = function(groupId, id, callback) {
				var postBody = null;

				// verify the required parameter 'groupId' is set
				if (groupId === undefined || groupId === null) {
					throw new Error("Missing the required parameter 'groupId' when calling createMembership");
				}

				// verify the required parameter 'id' is set
				if (id === undefined || id === null) {
					throw new Error("Missing the required parameter 'id' when calling createMembership");
				}


				var pathParams = {
					"groupId": groupId,
					"id": id
				};
				var queryParams = {
				};
				var collectionQueryParams = {
				};
				var headerParams = {
				};
				var formParams = {
				};

				var authNames = [];
				var contentTypes = [];
				var accepts = ["application/json"];
				var returnType = null;

				return this.apiClient.callApi(
					"/tenant/{id}/group-members/{groupId}", "PUT",
					pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
					authNames, contentTypes, accepts, returnType, callback
				);
			};

			/**
     * Callback function to receive the result of the createMembership_0 operation.
     * @callback module:api/TenantApi~createMembership_0Callback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

			/**
     * Creates a membership between a tenant and an user.
     * Creates a membership between a tenant and an user.
     * @param {String} userId Parameter userId
     * @param {String} id Parameter id
     * @param {module:api/TenantApi~createMembership_0Callback} callback The callback function, accepting three arguments: error, data, response
     */
			this.createMembership_0 = function(userId, id, callback) {
				var postBody = null;

				// verify the required parameter 'userId' is set
				if (userId === undefined || userId === null) {
					throw new Error("Missing the required parameter 'userId' when calling createMembership_0");
				}

				// verify the required parameter 'id' is set
				if (id === undefined || id === null) {
					throw new Error("Missing the required parameter 'id' when calling createMembership_0");
				}


				var pathParams = {
					"userId": userId,
					"id": id
				};
				var queryParams = {
				};
				var collectionQueryParams = {
				};
				var headerParams = {
				};
				var formParams = {
				};

				var authNames = [];
				var contentTypes = [];
				var accepts = ["application/json"];
				var returnType = null;

				return this.apiClient.callApi(
					"/tenant/{id}/user-members/{userId}", "PUT",
					pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
					authNames, contentTypes, accepts, returnType, callback
				);
			};

			/**
     * Callback function to receive the result of the createTenant operation.
     * @callback module:api/TenantApi~createTenantCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

			/**
     * Create a new tenant.
     * Create a new tenant.
     * @param {Object} opts Optional parameters
     * @param {module:model/TenantDto} opts.body Parameter tenant
     * @param {module:api/TenantApi~createTenantCallback} callback The callback function, accepting three arguments: error, data, response
     */
			this.createTenant = function(opts, callback) {
				opts = opts || {};
				var postBody = opts["body"];


				var pathParams = {
				};
				var queryParams = {
				};
				var collectionQueryParams = {
				};
				var headerParams = {
				};
				var formParams = {
				};

				var authNames = [];
				var contentTypes = ["application/json"];
				var accepts = ["application/json"];
				var returnType = null;

				return this.apiClient.callApi(
					"/tenant/create", "POST",
					pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
					authNames, contentTypes, accepts, returnType, callback
				);
			};

			/**
     * Callback function to receive the result of the deleteMembership operation.
     * @callback module:api/TenantApi~deleteMembershipCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

			/**
     * Deletes a membership between a tenant and a group.
     * Deletes a membership between a tenant and a group.
     * @param {String} groupId Parameter groupId
     * @param {String} id Parameter id
     * @param {module:api/TenantApi~deleteMembershipCallback} callback The callback function, accepting three arguments: error, data, response
     */
			this.deleteMembership = function(groupId, id, callback) {
				var postBody = null;

				// verify the required parameter 'groupId' is set
				if (groupId === undefined || groupId === null) {
					throw new Error("Missing the required parameter 'groupId' when calling deleteMembership");
				}

				// verify the required parameter 'id' is set
				if (id === undefined || id === null) {
					throw new Error("Missing the required parameter 'id' when calling deleteMembership");
				}


				var pathParams = {
					"groupId": groupId,
					"id": id
				};
				var queryParams = {
				};
				var collectionQueryParams = {
				};
				var headerParams = {
				};
				var formParams = {
				};

				var authNames = [];
				var contentTypes = [];
				var accepts = ["application/json"];
				var returnType = null;

				return this.apiClient.callApi(
					"/tenant/{id}/group-members/{groupId}", "DELETE",
					pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
					authNames, contentTypes, accepts, returnType, callback
				);
			};

			/**
     * Callback function to receive the result of the deleteMembership_0 operation.
     * @callback module:api/TenantApi~deleteMembership_0Callback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

			/**
     * Deletes a membership between a tenant and an user.
     * Deletes a membership between a tenant and an user.
     * @param {String} userId Parameter userId
     * @param {String} id Parameter id
     * @param {module:api/TenantApi~deleteMembership_0Callback} callback The callback function, accepting three arguments: error, data, response
     */
			this.deleteMembership_0 = function(userId, id, callback) {
				var postBody = null;

				// verify the required parameter 'userId' is set
				if (userId === undefined || userId === null) {
					throw new Error("Missing the required parameter 'userId' when calling deleteMembership_0");
				}

				// verify the required parameter 'id' is set
				if (id === undefined || id === null) {
					throw new Error("Missing the required parameter 'id' when calling deleteMembership_0");
				}


				var pathParams = {
					"userId": userId,
					"id": id
				};
				var queryParams = {
				};
				var collectionQueryParams = {
				};
				var headerParams = {
				};
				var formParams = {
				};

				var authNames = [];
				var contentTypes = [];
				var accepts = ["application/json"];
				var returnType = null;

				return this.apiClient.callApi(
					"/tenant/{id}/user-members/{userId}", "DELETE",
					pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
					authNames, contentTypes, accepts, returnType, callback
				);
			};

			/**
     * Callback function to receive the result of the deleteTenant operation.
     * @callback module:api/TenantApi~deleteTenantCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

			/**
     * Deletes a tenant by id.
     * Deletes a tenant by id.
     * @param {String} id Parameter id
     * @param {module:api/TenantApi~deleteTenantCallback} callback The callback function, accepting three arguments: error, data, response
     */
			this.deleteTenant = function(id, callback) {
				var postBody = null;

				// verify the required parameter 'id' is set
				if (id === undefined || id === null) {
					throw new Error("Missing the required parameter 'id' when calling deleteTenant");
				}


				var pathParams = {
					"id": id
				};
				var queryParams = {
				};
				var collectionQueryParams = {
				};
				var headerParams = {
				};
				var formParams = {
				};

				var authNames = [];
				var contentTypes = [];
				var accepts = ["application/json"];
				var returnType = null;

				return this.apiClient.callApi(
					"/tenant/{id}", "DELETE",
					pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
					authNames, contentTypes, accepts, returnType, callback
				);
			};

			/**
     * Callback function to receive the result of the getTenant operation.
     * @callback module:api/TenantApi~getTenantCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

			/**
     * Retrieves a tenant.
     * Retrieves a tenant.
     * @param {String} id Parameter id
     * @param {module:api/TenantApi~getTenantCallback} callback The callback function, accepting three arguments: error, data, response
     */
			this.getTenant = function(id, callback) {
				var postBody = null;

				// verify the required parameter 'id' is set
				if (id === undefined || id === null) {
					throw new Error("Missing the required parameter 'id' when calling getTenant");
				}


				var pathParams = {
					"id": id
				};
				var queryParams = {
				};
				var collectionQueryParams = {
				};
				var headerParams = {
				};
				var formParams = {
				};

				var authNames = [];
				var contentTypes = [];
				var accepts = ["application/json"];
				var returnType = null;

				return this.apiClient.callApi(
					"/tenant/{id}", "GET",
					pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
					authNames, contentTypes, accepts, returnType, callback
				);
			};

			/**
     * Callback function to receive the result of the getTenantCount operation.
     * @callback module:api/TenantApi~getTenantCountCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CountResultDto} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

			/**
     * Query for tenants using a list of parameters and retrieves the count.
     * Query for tenants using a list of parameters and retrieves the count.
     * @param {Object} opts Optional parameters
     * @param {String} opts.nameLike Filter by the name that the parameter is a substring of.
     * @param {String} opts.userMember Select only tenants where the given user is a member of.
     * @param {String} opts.groupMember Select only tenants where the given group is a member of.
     * @param {String} opts.name Filter by the name of the tenant.
     * @param {String} opts.id Filter by the id of the tenant.
     * @param {String} opts.includingGroupsOfUser Select only tenants where the user or one of his groups is a member of. Can only be used in combination with the userMember parameter. Value may only be true, as false is the default behavior.
     * @param {module:api/TenantApi~getTenantCountCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CountResultDto}
     */
			this.getTenantCount = function(opts, callback) {
				opts = opts || {};
				var postBody = null;


				var pathParams = {
				};
				var queryParams = {
					"nameLike": opts["nameLike"],
					"userMember": opts["userMember"],
					"groupMember": opts["groupMember"],
					"name": opts["name"],
					"id": opts["id"],
					"includingGroupsOfUser": opts["includingGroupsOfUser"],
				};
				var collectionQueryParams = {
				};
				var headerParams = {
				};
				var formParams = {
				};

				var authNames = [];
				var contentTypes = [];
				var accepts = ["application/json"];
				var returnType = CountResultDto;

				return this.apiClient.callApi(
					"/tenant/count", "GET",
					pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
					authNames, contentTypes, accepts, returnType, callback
				);
			};

			/**
     * Callback function to receive the result of the getTenantGroupMembersResource operation.
     * @callback module:api/TenantApi~getTenantGroupMembersResourceCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

			/**
     * Get Tenant Group Members Resource.
     * Get Tenant Group Members Resource
     * @param {String} id Parameter id
     * @param {module:api/TenantApi~getTenantGroupMembersResourceCallback} callback The callback function, accepting three arguments: error, data, response
     */
			this.getTenantGroupMembersResource = function(id, callback) {
				var postBody = null;

				// verify the required parameter 'id' is set
				if (id === undefined || id === null) {
					throw new Error("Missing the required parameter 'id' when calling getTenantGroupMembersResource");
				}


				var pathParams = {
					"id": id
				};
				var queryParams = {
				};
				var collectionQueryParams = {
				};
				var headerParams = {
				};
				var formParams = {
				};

				var authNames = [];
				var contentTypes = [];
				var accepts = ["application/json"];
				var returnType = null;

				return this.apiClient.callApi(
					"/tenant/{id}/group-members", "GET",
					pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
					authNames, contentTypes, accepts, returnType, callback
				);
			};

			/**
     * Callback function to receive the result of the getTenantUserMembersResource operation.
     * @callback module:api/TenantApi~getTenantUserMembersResourceCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

			/**
     * Get Tenant User Members Resource.
     * Get Tenant User Members Resource
     * @param {String} id Parameter id
     * @param {module:api/TenantApi~getTenantUserMembersResourceCallback} callback The callback function, accepting three arguments: error, data, response
     */
			this.getTenantUserMembersResource = function(id, callback) {
				var postBody = null;

				// verify the required parameter 'id' is set
				if (id === undefined || id === null) {
					throw new Error("Missing the required parameter 'id' when calling getTenantUserMembersResource");
				}


				var pathParams = {
					"id": id
				};
				var queryParams = {
				};
				var collectionQueryParams = {
				};
				var headerParams = {
				};
				var formParams = {
				};

				var authNames = [];
				var contentTypes = [];
				var accepts = ["application/json"];
				var returnType = null;

				return this.apiClient.callApi(
					"/tenant/{id}/user-members", "GET",
					pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
					authNames, contentTypes, accepts, returnType, callback
				);
			};

			/**
     * Callback function to receive the result of the queryTenants operation.
     * @callback module:api/TenantApi~queryTenantsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<Object>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

			/**
     * Query for a list of tenants using a list of parameters.
     * Query for a list of tenants using a list of parameters. The size of the result set can be retrieved by using the Get Tenant Count method.
     * @param {Object} opts Optional parameters
     * @param {Number} opts.firstResult Parameter firstResult
     * @param {Number} opts.maxResults Parameter maxResults
     * @param {String} opts.nameLike Filter by the name that the parameter is a substring of.
     * @param {String} opts.userMember Select only tenants where the given user is a member of.
     * @param {String} opts.groupMember Select only tenants where the given group is a member of.
     * @param {String} opts.maxResults2 Pagination of results. Specifies the maximum number of results to return. Will return less results if there are no more results left.
     * @param {String} opts.sortOrder Sort the results in a given order. Values may be asc for ascending order or desc for descending order. Must be used in conjunction with the sortBy parameter.
     * @param {String} opts.name Filter by the name of the tenant.
     * @param {String} opts.firstResult2 Pagination of results. Specifies the index of the first result to return.
     * @param {String} opts.sortBy Sort the results lexicographically by a given criterion. Valid values are id and name. Must be used in conjunction with the sortOrder parameter.
     * @param {String} opts.id Filter by the id of the tenant.
     * @param {String} opts.includingGroupsOfUser Select only tenants where the user or one of his groups is a member of. Can only be used in combination with the userMember parameter. Value may only be true, as false is the default behavior.
     * @param {module:api/TenantApi~queryTenantsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<Object>}
     */
			this.queryTenants = function(opts, callback) {
				opts = opts || {};
				var postBody = null;


				var pathParams = {
				};
				var queryParams = {
					"firstResult": opts["firstResult"],
					"maxResults": opts["maxResults"],
					"nameLike": opts["nameLike"],
					"userMember": opts["userMember"],
					"groupMember": opts["groupMember"],
					"maxResults2": opts["maxResults2"],
					"sortOrder": opts["sortOrder"],
					"name": opts["name"],
					"firstResult2": opts["firstResult2"],
					"sortBy": opts["sortBy"],
					"id": opts["id"],
					"includingGroupsOfUser": opts["includingGroupsOfUser"],
				};
				var collectionQueryParams = {
				};
				var headerParams = {
				};
				var formParams = {
				};

				var authNames = [];
				var contentTypes = [];
				var accepts = ["application/json"];
				var returnType = [Object];

				return this.apiClient.callApi(
					"/tenant", "GET",
					pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
					authNames, contentTypes, accepts, returnType, callback
				);
			};

			/**
     * Callback function to receive the result of the updateTenant operation.
     * @callback module:api/TenantApi~updateTenantCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

			/**
     * Updates a given tenant.
     * Updates a given tenant.
     * @param {String} id Parameter id
     * @param {Object} opts Optional parameters
     * @param {module:model/TenantDto} opts.body Parameter tenant
     * @param {module:api/TenantApi~updateTenantCallback} callback The callback function, accepting three arguments: error, data, response
     */
			this.updateTenant = function(id, opts, callback) {
				opts = opts || {};
				var postBody = opts["body"];

				// verify the required parameter 'id' is set
				if (id === undefined || id === null) {
					throw new Error("Missing the required parameter 'id' when calling updateTenant");
				}


				var pathParams = {
					"id": id
				};
				var queryParams = {
				};
				var collectionQueryParams = {
				};
				var headerParams = {
				};
				var formParams = {
				};

				var authNames = [];
				var contentTypes = ["application/json"];
				var accepts = ["application/json"];
				var returnType = null;

				return this.apiClient.callApi(
					"/tenant/{id}", "PUT",
					pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
					authNames, contentTypes, accepts, returnType, callback
				);
			};
		};

		return exports;
	}));

},{"../ApiClient":16,"../model/CountResultDto":62,"../model/ResourceOptionsDto":116,"../model/TenantDto":129}],37:[function(require,module,exports){
/**
 * Camunda REST API
 * Swagger OpenApi Spec for Camunda REST API.
 *
 * OpenAPI spec version: v7.8.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.3.1
 *
 * Do not edit the class manually.
 *
 */

	(function(root, factory) {
		if (typeof define === "function" && define.amd) {
			// AMD. Register as an anonymous module.
			define(["ApiClient", "model/CountResultDto", "model/ResourceOptionsDto", "model/UserCredentialsDto", "model/UserDto", "model/UserProfileDto"], factory);
		} else if (typeof module === "object" && module.exports) {
			// CommonJS-like environments that support module.exports, like Node.
			module.exports = factory(require("../ApiClient"), require("../model/CountResultDto"), require("../model/ResourceOptionsDto"), require("../model/UserCredentialsDto"), require("../model/UserDto"), require("../model/UserProfileDto"));
		} else {
			// Browser globals (root is window)
			if (!root.CamundaRestApi) {
				root.CamundaRestApi = {};
			}
			root.CamundaRestApi.UserApi = factory(root.CamundaRestApi.ApiClient, root.CamundaRestApi.CountResultDto, root.CamundaRestApi.ResourceOptionsDto, root.CamundaRestApi.UserCredentialsDto, root.CamundaRestApi.UserDto, root.CamundaRestApi.UserProfileDto);
		}
	}(this, function(ApiClient, CountResultDto, ResourceOptionsDto, UserCredentialsDto, UserDto, UserProfileDto) {
		"use strict";

		/**
   * User service.
   * @module api/UserApi
   * @version v7.8.0
   */

		/**
   * Constructs a new UserApi.
   * @alias module:api/UserApi
   * @class
   * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
		var exports = function(apiClient) {
			this.apiClient = apiClient || ApiClient.instance;


			/**
     * Callback function to receive the result of the availableOperations operation.
     * @callback module:api/UserApi~availableOperationsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ResourceOptionsDto} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

			/**
     * The &#x60;/user&#x60; resource supports two custom OPTIONS requests, one for the resource as such and one for individual user instances.
     * The &#x60;/user&#x60; resource supports two custom OPTIONS requests, one for the resource as such and one for individual user instances. The OPTIONS request allows checking for the set of available operations that the currently authenticated user can perform on the &#x60;/user&#x60; resource. If the user can perform an operation or not may depend on various things, including the user&#39;s authorizations to interact with this resource and the internal context of the process engine.
     * @param {module:api/UserApi~availableOperationsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ResourceOptionsDto}
     */
			this.availableOperations = function(callback) {
				var postBody = null;


				var pathParams = {
				};
				var queryParams = {
				};
				var collectionQueryParams = {
				};
				var headerParams = {
				};
				var formParams = {
				};

				var authNames = [];
				var contentTypes = [];
				var accepts = ["application/json"];
				var returnType = ResourceOptionsDto;

				return this.apiClient.callApi(
					"/user", "OPTIONS",
					pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
					authNames, contentTypes, accepts, returnType, callback
				);
			};

			/**
     * Callback function to receive the result of the availableOperations_0 operation.
     * @callback module:api/UserApi~availableOperations_0Callback
     * @param {String} error Error message, if any.
     * @param {module:model/ResourceOptionsDto} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

			/**
     * The &#x60;/user&#x60; resource supports two custom OPTIONS requests, one for the resource as such and one for individual user instances.
     * The &#x60;/user&#x60; resource supports two custom OPTIONS requests, one for the resource as such and one for individual user instances. The OPTIONS request allows checking for the set of available operations that the currently authenticated user can perform on the &#x60;/user&#x60; resource. If the user can perform an operation or not may depend on various things, including the user&#39;s authorizations to interact with this resource and the internal context of the process engine.
     * @param {String} id
     * @param {module:api/UserApi~availableOperations_0Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ResourceOptionsDto}
     */
			this.availableOperations_0 = function(id, callback) {
				var postBody = null;

				// verify the required parameter 'id' is set
				if (id === undefined || id === null) {
					throw new Error("Missing the required parameter 'id' when calling availableOperations_0");
				}


				var pathParams = {
					"id": id
				};
				var queryParams = {
				};
				var collectionQueryParams = {
				};
				var headerParams = {
				};
				var formParams = {
				};

				var authNames = [];
				var contentTypes = [];
				var accepts = ["application/json"];
				var returnType = ResourceOptionsDto;

				return this.apiClient.callApi(
					"/user/{id}", "OPTIONS",
					pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
					authNames, contentTypes, accepts, returnType, callback
				);
			};

			/**
     * Callback function to receive the result of the createUser operation.
     * @callback module:api/UserApi~createUserCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

			/**
     * Create a new user.
     * Create a new user.
     * @param {Object} opts Optional parameters
     * @param {module:model/UserDto} opts.body Parameter userDto
     * @param {module:api/UserApi~createUserCallback} callback The callback function, accepting three arguments: error, data, response
     */
			this.createUser = function(opts, callback) {
				opts = opts || {};
				var postBody = opts["body"];


				var pathParams = {
				};
				var queryParams = {
				};
				var collectionQueryParams = {
				};
				var headerParams = {
				};
				var formParams = {
				};

				var authNames = [];
				var contentTypes = ["*/*"];
				var accepts = ["application/json"];
				var returnType = null;

				return this.apiClient.callApi(
					"/user/create", "POST",
					pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
					authNames, contentTypes, accepts, returnType, callback
				);
			};

			/**
     * Callback function to receive the result of the deleteUser operation.
     * @callback module:api/UserApi~deleteUserCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

			/**
     * Deletes a user by id.
     * Deletes a user by id.
     * @param {String} id
     * @param {module:api/UserApi~deleteUserCallback} callback The callback function, accepting three arguments: error, data, response
     */
			this.deleteUser = function(id, callback) {
				var postBody = null;

				// verify the required parameter 'id' is set
				if (id === undefined || id === null) {
					throw new Error("Missing the required parameter 'id' when calling deleteUser");
				}


				var pathParams = {
					"id": id
				};
				var queryParams = {
				};
				var collectionQueryParams = {
				};
				var headerParams = {
				};
				var formParams = {
				};

				var authNames = [];
				var contentTypes = [];
				var accepts = ["application/json"];
				var returnType = null;

				return this.apiClient.callApi(
					"/user/{id}", "DELETE",
					pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
					authNames, contentTypes, accepts, returnType, callback
				);
			};

			/**
     * Callback function to receive the result of the getUser operation.
     * @callback module:api/UserApi~getUserCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

			/**
     * Get User.
     * Get User
     * @param {String} id
     * @param {module:api/UserApi~getUserCallback} callback The callback function, accepting three arguments: error, data, response
     */
			this.getUser = function(id, callback) {
				var postBody = null;

				// verify the required parameter 'id' is set
				if (id === undefined || id === null) {
					throw new Error("Missing the required parameter 'id' when calling getUser");
				}


				var pathParams = {
					"id": id
				};
				var queryParams = {
				};
				var collectionQueryParams = {
				};
				var headerParams = {
				};
				var formParams = {
				};

				var authNames = [];
				var contentTypes = [];
				var accepts = ["application/json"];
				var returnType = null;

				return this.apiClient.callApi(
					"/user/{id}", "GET",
					pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
					authNames, contentTypes, accepts, returnType, callback
				);
			};

			/**
     * Callback function to receive the result of the getUserCount operation.
     * @callback module:api/UserApi~getUserCountCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CountResultDto} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

			/**
     * Query for users using a list of parameters and retrieves the count.
     * Query for users using a list of parameters and retrieves the count.
     * @param {Object} opts Optional parameters
     * @param {String} opts.firstName Filter by the firstname of the user.
     * @param {String} opts.lastName Filter by the lastname of the user.
     * @param {String} opts.memberOfGroup Filter for users which are members of the given group.
     * @param {String} opts.firstNameLike Filter by the firstname that the parameter is a substring of.
     * @param {String} opts.id Filter by the id of the user.
     * @param {String} opts.emailLike Filter by the email that the parameter is a substring of.
     * @param {String} opts.lastNameLike Filter by the lastname that the parameter is a substring of.
     * @param {String} opts.email Filter by the email of the user.
     * @param {String} opts.memberOfTenant Filter for users which are members of the given tenant.
     * @param {module:api/UserApi~getUserCountCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CountResultDto}
     */
			this.getUserCount = function(opts, callback) {
				opts = opts || {};
				var postBody = null;


				var pathParams = {
				};
				var queryParams = {
					"firstName": opts["firstName"],
					"lastName": opts["lastName"],
					"memberOfGroup": opts["memberOfGroup"],
					"firstNameLike": opts["firstNameLike"],
					"id": opts["id"],
					"emailLike": opts["emailLike"],
					"lastNameLike": opts["lastNameLike"],
					"email": opts["email"],
					"memberOfTenant": opts["memberOfTenant"],
				};
				var collectionQueryParams = {
				};
				var headerParams = {
				};
				var formParams = {
				};

				var authNames = [];
				var contentTypes = [];
				var accepts = ["application/json"];
				var returnType = CountResultDto;

				return this.apiClient.callApi(
					"/user/count", "GET",
					pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
					authNames, contentTypes, accepts, returnType, callback
				);
			};

			/**
     * Callback function to receive the result of the getUserProfile operation.
     * @callback module:api/UserApi~getUserProfileCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UserProfileDto} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

			/**
     * Retrieves a user&#39;s profile.
     * Retrieves a user&#39;s profile.
     * @param {String} id
     * @param {module:api/UserApi~getUserProfileCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UserProfileDto}
     */
			this.getUserProfile = function(id, callback) {
				var postBody = null;

				// verify the required parameter 'id' is set
				if (id === undefined || id === null) {
					throw new Error("Missing the required parameter 'id' when calling getUserProfile");
				}


				var pathParams = {
					"id": id
				};
				var queryParams = {
				};
				var collectionQueryParams = {
				};
				var headerParams = {
				};
				var formParams = {
				};

				var authNames = [];
				var contentTypes = [];
				var accepts = ["application/json"];
				var returnType = UserProfileDto;

				return this.apiClient.callApi(
					"/user/{id}/profile", "GET",
					pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
					authNames, contentTypes, accepts, returnType, callback
				);
			};

			/**
     * Callback function to receive the result of the queryUsers operation.
     * @callback module:api/UserApi~queryUsersCallback
     * @param {String} error Error message, if any.
     * @param {Array.<Object>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

			/**
     * Query for a list of users using a list of parameters.
     * Query for a list of users using a list of parameters. The size of the result set can be retrieved by using the Get User Count method.
     * @param {Object} opts Optional parameters
     * @param {Number} opts.firstResult Parameter firstResult
     * @param {Number} opts.maxResults Parameter maxResults
     * @param {String} opts.lastName Filter by the lastname of the user.
     * @param {String} opts.firstNameLike Filter by the firstname that the parameter is a substring of.
     * @param {String} opts.firstResult2 Pagination of results. Specifies the index of the first result to return.
     * @param {String} opts.emailLike Filter by the email that the parameter is a substring of.
     * @param {String} opts.memberOfTenant Filter for users which are members of the given tenant.
     * @param {String} opts.firstName Filter by the firstname of the user.
     * @param {String} opts.memberOfGroup Filter for users which are members of a group.
     * @param {String} opts.maxResults2 Pagination of results. Specifies the maximum number of results to return. Will return less results if there are no more results left.
     * @param {String} opts.sortOrder Sort the results in a given order. Values may be asc for ascending order or desc for descending order. Must be used in conjunction with the sortBy parameter.
     * @param {String} opts.sortBy Sort the results lexicographically by a given criterion. Valid values are userId, firstName, lastName and email. Must be used in conjunction with the sortOrder parameter.
     * @param {String} opts.id Filter by the id of the user.
     * @param {String} opts.lastNameLike Filter by the lastname that the parameter is a substring of.
     * @param {String} opts.email Filter by the email of the user.
     * @param {module:api/UserApi~queryUsersCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<Object>}
     */
			this.queryUsers = function(opts, callback) {
				opts = opts || {};
				var postBody = null;


				var pathParams = {
				};
				var queryParams = {
					"firstResult": opts["firstResult"],
					"maxResults": opts["maxResults"],
					"lastName": opts["lastName"],
					"firstNameLike": opts["firstNameLike"],
					"firstResult2": opts["firstResult2"],
					"emailLike": opts["emailLike"],
					"memberOfTenant": opts["memberOfTenant"],
					"firstName": opts["firstName"],
					"memberOfGroup": opts["memberOfGroup"],
					"maxResults2": opts["maxResults2"],
					"sortOrder": opts["sortOrder"],
					"sortBy": opts["sortBy"],
					"id": opts["id"],
					"lastNameLike": opts["lastNameLike"],
					"email": opts["email"],
				};
				var collectionQueryParams = {
				};
				var headerParams = {
				};
				var formParams = {
				};

				var authNames = [];
				var contentTypes = [];
				var accepts = ["application/json"];
				var returnType = [Object];

				return this.apiClient.callApi(
					"/user", "GET",
					pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
					authNames, contentTypes, accepts, returnType, callback
				);
			};

			/**
     * Callback function to receive the result of the updateCredentials operation.
     * @callback module:api/UserApi~updateCredentialsCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

			/**
     * Updates a user&#39;s credentials (password).
     * Updates a user&#39;s credentials (password).
     * @param {String} id
     * @param {Object} opts Optional parameters
     * @param {module:model/UserCredentialsDto} opts.body Parameter account
     * @param {module:api/UserApi~updateCredentialsCallback} callback The callback function, accepting three arguments: error, data, response
     */
			this.updateCredentials = function(id, opts, callback) {
				opts = opts || {};
				var postBody = opts["body"];

				// verify the required parameter 'id' is set
				if (id === undefined || id === null) {
					throw new Error("Missing the required parameter 'id' when calling updateCredentials");
				}


				var pathParams = {
					"id": id
				};
				var queryParams = {
				};
				var collectionQueryParams = {
				};
				var headerParams = {
				};
				var formParams = {
				};

				var authNames = [];
				var contentTypes = ["application/json"];
				var accepts = ["application/json"];
				var returnType = null;

				return this.apiClient.callApi(
					"/user/{id}/credentials", "PUT",
					pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
					authNames, contentTypes, accepts, returnType, callback
				);
			};

			/**
     * Callback function to receive the result of the updateProfile operation.
     * @callback module:api/UserApi~updateProfileCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

			/**
     * Updates the profile information of an already existing user.
     * Updates the profile information of an already existing user.
     * @param {String} id
     * @param {Object} opts Optional parameters
     * @param {module:model/UserProfileDto} opts.body Parameter profile
     * @param {module:api/UserApi~updateProfileCallback} callback The callback function, accepting three arguments: error, data, response
     */
			this.updateProfile = function(id, opts, callback) {
				opts = opts || {};
				var postBody = opts["body"];

				// verify the required parameter 'id' is set
				if (id === undefined || id === null) {
					throw new Error("Missing the required parameter 'id' when calling updateProfile");
				}


				var pathParams = {
					"id": id
				};
				var queryParams = {
				};
				var collectionQueryParams = {
				};
				var headerParams = {
				};
				var formParams = {
				};

				var authNames = [];
				var contentTypes = ["application/json"];
				var accepts = ["application/json"];
				var returnType = null;

				return this.apiClient.callApi(
					"/user/{id}/profile", "PUT",
					pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
					authNames, contentTypes, accepts, returnType, callback
				);
			};
		};

		return exports;
	}));

},{"../ApiClient":16,"../model/CountResultDto":62,"../model/ResourceOptionsDto":116,"../model/UserCredentialsDto":132,"../model/UserDto":133,"../model/UserProfileDto":135}],38:[function(require,module,exports){
/**
 * Camunda REST API
 * Swagger OpenApi Spec for Camunda REST API.
 *
 * OpenAPI spec version: v7.8.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.3.1
 *
 * Do not edit the class manually.
 *
 */

	(function(root, factory) {
		if (typeof define === "function" && define.amd) {
			// AMD. Register as an anonymous module.
			define(["ApiClient", "model/CountResultDto", "model/VariableInstanceQueryDto"], factory);
		} else if (typeof module === "object" && module.exports) {
			// CommonJS-like environments that support module.exports, like Node.
			module.exports = factory(require("../ApiClient"), require("../model/CountResultDto"), require("../model/VariableInstanceQueryDto"));
		} else {
			// Browser globals (root is window)
			if (!root.CamundaRestApi) {
				root.CamundaRestApi = {};
			}
			root.CamundaRestApi.VariableApi = factory(root.CamundaRestApi.ApiClient, root.CamundaRestApi.CountResultDto, root.CamundaRestApi.VariableInstanceQueryDto);
		}
	}(this, function(ApiClient, CountResultDto, VariableInstanceQueryDto) {
		"use strict";

		/**
   * Variable service.
   * @module api/VariableApi
   * @version v7.8.0
   */

		/**
   * Constructs a new VariableApi.
   * @alias module:api/VariableApi
   * @class
   * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
		var exports = function(apiClient) {
			this.apiClient = apiClient || ApiClient.instance;


			/**
     * Callback function to receive the result of the getResourceBinary operation.
     * @callback module:api/VariableApi~getResourceBinaryCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

			/**
     * Retrieves the content of a variable by id.
     * Retrieves the content of a variable by id. Applicable for byte array and file variables.
     * @param {String} id Parameter id
     * @param {module:api/VariableApi~getResourceBinaryCallback} callback The callback function, accepting three arguments: error, data, response
     */
			this.getResourceBinary = function(id, callback) {
				var postBody = null;

				// verify the required parameter 'id' is set
				if (id === undefined || id === null) {
					throw new Error("Missing the required parameter 'id' when calling getResourceBinary");
				}


				var pathParams = {
					"id": id
				};
				var queryParams = {
				};
				var collectionQueryParams = {
				};
				var headerParams = {
				};
				var formParams = {
				};

				var authNames = [];
				var contentTypes = [];
				var accepts = ["application/json"];
				var returnType = null;

				return this.apiClient.callApi(
					"/variable-instance/{id}/data", "GET",
					pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
					authNames, contentTypes, accepts, returnType, callback
				);
			};

			/**
     * Callback function to receive the result of the getVariableInstance operation.
     * @callback module:api/VariableApi~getVariableInstanceCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

			/**
     * Retrieves a variable by id.
     * Retrieves a variable by id.
     * @param {String} id Parameter id
     * @param {module:api/VariableApi~getVariableInstanceCallback} callback The callback function, accepting three arguments: error, data, response
     */
			this.getVariableInstance = function(id, callback) {
				var postBody = null;

				// verify the required parameter 'id' is set
				if (id === undefined || id === null) {
					throw new Error("Missing the required parameter 'id' when calling getVariableInstance");
				}


				var pathParams = {
					"id": id
				};
				var queryParams = {
				};
				var collectionQueryParams = {
				};
				var headerParams = {
				};
				var formParams = {
				};

				var authNames = [];
				var contentTypes = [];
				var accepts = ["application/json"];
				var returnType = null;

				return this.apiClient.callApi(
					"/variable-instance/{id}", "GET",
					pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
					authNames, contentTypes, accepts, returnType, callback
				);
			};

			/**
     * Callback function to receive the result of the getVariableInstances operation.
     * @callback module:api/VariableApi~getVariableInstancesCallback
     * @param {String} error Error message, if any.
     * @param {Array.<Object>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

			/**
     * Query for variable instances that fulfill given parameters.
     * Query for variable instances that fulfill given parameters. Parameters may be the properties of variable instances, such as the name or type. The size of the result set can be retrieved by using the Get Variable Instance Count method.
     * @param {Object} opts Optional parameters
     * @param {Number} opts.firstResult Parameter firstResult
     * @param {Number} opts.maxResults Parameter maxResults
     * @param {Boolean} opts.deserializeValues Parameter deserializeObjectValues (default to true)
     * @param {String} opts.variableName Filter by variable instance name.
     * @param {String} opts.executionIdIn Only include variable instances which belong to one of the passed and comma-separated execution ids.
     * @param {String} opts.caseInstanceIdIn Only include variable instances which belong to one of the passed case instance ids.
     * @param {String} opts.firstResult2 Pagination of results. Specifies the index of the first result to return.
     * @param {String} opts.processInstanceIdIn Only include variable instances which belong to one of the passed and comma-separated process instance ids.
     * @param {String} opts.taskIdIn Only include variable instances which belong to one of the passed and comma-separated task ids.
     * @param {String} opts.variableValues Only include variable instances that have the certain values. Value filtering expressions are comma-separated and are structured as follows: A valid parameter value has the form key_operator_value. key is the variable name, operator is the comparison operator to be used and value the variable value. Note: Values are always treated as String objects on server side. Valid operator values are: eq - equal to; neq - not equal to; gt - greater than; gteq - greater than or equal to; lt - lower than; lteq - lower than or equal to; like. key and value may not contain underscore or comma characters.
     * @param {String} opts.deserializeValues2
     * @param {String} opts.tenantIdIn Only include variable instances which belong to one of the passed and comma-separated tenant ids.
     * @param {String} opts.maxResults2 Pagination of results. Specifies the maximum number of results to return. Will return less results if there are no more results left.
     * @param {String} opts.activityInstanceIdIn Only include variable instances which belong to one of the passed and comma-separated activity instance ids.
     * @param {String} opts.sortOrder Sort the results in a given order. Values may be asc for ascending order or desc for descending order. Must be used in conjunction with the sortBy parameter.
     * @param {String} opts.variableNameLike Filter by the variable instance name. The parameter can include the wildcard % to express like-strategy such as: starts with (%name), ends with (name%) or contains (%name%).
     * @param {String} opts.sortBy Sort the results lexicographically by a given criterion. Valid values are variableName, variableType, activityInstanceId and tenantId. Must be used in conjunction with the sortOrder parameter.
     * @param {String} opts.caseExecutionIdIn Only include variable instances which belong to one of the passed case execution ids.
     * @param {module:api/VariableApi~getVariableInstancesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<Object>}
     */
			this.getVariableInstances = function(opts, callback) {
				opts = opts || {};
				var postBody = null;


				var pathParams = {
				};
				var queryParams = {
					"firstResult": opts["firstResult"],
					"maxResults": opts["maxResults"],
					"deserializeValues": opts["deserializeValues"],
					"variableName": opts["variableName"],
					"executionIdIn": opts["executionIdIn"],
					"caseInstanceIdIn": opts["caseInstanceIdIn"],
					"firstResult2": opts["firstResult2"],
					"processInstanceIdIn": opts["processInstanceIdIn"],
					"taskIdIn": opts["taskIdIn"],
					"variableValues": opts["variableValues"],
					"deserializeValues2": opts["deserializeValues2"],
					"tenantIdIn": opts["tenantIdIn"],
					"maxResults2": opts["maxResults2"],
					"activityInstanceIdIn": opts["activityInstanceIdIn"],
					"sortOrder": opts["sortOrder"],
					"variableNameLike": opts["variableNameLike"],
					"sortBy": opts["sortBy"],
					"caseExecutionIdIn": opts["caseExecutionIdIn"],
				};
				var collectionQueryParams = {
				};
				var headerParams = {
				};
				var formParams = {
				};

				var authNames = [];
				var contentTypes = [];
				var accepts = ["application/json"];
				var returnType = [Object];

				return this.apiClient.callApi(
					"/variable-instance", "GET",
					pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
					authNames, contentTypes, accepts, returnType, callback
				);
			};

			/**
     * Callback function to receive the result of the getVariableInstancesCount operation.
     * @callback module:api/VariableApi~getVariableInstancesCountCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CountResultDto} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

			/**
     * Query for the number of variable instances that fulfill given parameters.
     * Query for the number of variable instances that fulfill given parameters. Takes the same parameters as the Get Variable Instances method.
     * @param {Object} opts Optional parameters
     * @param {String} opts.variableName Filter by variable instance name.
     * @param {String} opts.executionIdIn Only include variable instances which belong to one of the passed and comma-separated execution ids.
     * @param {String} opts.caseInstanceIdIn Only include variable instances which belong to one of the passed case instance ids.
     * @param {String} opts.firstResult Pagination of results. Specifies the index of the first result to return.
     * @param {String} opts.processInstanceIdIn Only include variable instances which belong to one of the passed and comma-separated process instance ids.
     * @param {String} opts.taskIdIn Only include variable instances which belong to one of the passed and comma-separated task ids.
     * @param {String} opts.variableValues Only include variable instances that have the certain values. Value filtering expressions are comma-separated and are structured as follows: A valid parameter value has the form key_operator_value. key is the variable name, operator is the comparison operator to be used and value the variable value. Note: Values are always treated as String objects on server side. Valid operator values are: eq - equal to; neq - not equal to; gt - greater than; gteq - greater than or equal to; lt - lower than; lteq - lower than or equal to; like. key and value may not contain underscore or comma characters.
     * @param {String} opts.tenantIdIn Only include variable instances which belong to one of the passed and comma-separated tenant ids.
     * @param {String} opts.maxResults Pagination of results. Specifies the maximum number of results to return. Will return less results if there are no more results left.
     * @param {String} opts.activityInstanceIdIn Only include variable instances which belong to one of the passed and comma-separated activity instance ids.
     * @param {String} opts.sortOrder Sort the results in a given order. Values may be asc for ascending order or desc for descending order. Must be used in conjunction with the sortBy parameter.
     * @param {String} opts.variableNameLike Filter by the variable instance name. The parameter can include the wildcard % to express like-strategy such as: starts with (%name), ends with (name%) or contains (%name%).
     * @param {String} opts.sortBy Sort the results lexicographically by a given criterion. Valid values are variableName, variableType, activityInstanceId and tenantId. Must be used in conjunction with the sortOrder parameter.
     * @param {String} opts.caseExecutionIdIn Only include variable instances which belong to one of the passed case execution ids.
     * @param {module:api/VariableApi~getVariableInstancesCountCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CountResultDto}
     */
			this.getVariableInstancesCount = function(opts, callback) {
				opts = opts || {};
				var postBody = null;


				var pathParams = {
				};
				var queryParams = {
					"variableName": opts["variableName"],
					"executionIdIn": opts["executionIdIn"],
					"caseInstanceIdIn": opts["caseInstanceIdIn"],
					"firstResult": opts["firstResult"],
					"processInstanceIdIn": opts["processInstanceIdIn"],
					"taskIdIn": opts["taskIdIn"],
					"variableValues": opts["variableValues"],
					"tenantIdIn": opts["tenantIdIn"],
					"maxResults": opts["maxResults"],
					"activityInstanceIdIn": opts["activityInstanceIdIn"],
					"sortOrder": opts["sortOrder"],
					"variableNameLike": opts["variableNameLike"],
					"sortBy": opts["sortBy"],
					"caseExecutionIdIn": opts["caseExecutionIdIn"],
				};
				var collectionQueryParams = {
				};
				var headerParams = {
				};
				var formParams = {
				};

				var authNames = [];
				var contentTypes = [];
				var accepts = ["application/json"];
				var returnType = CountResultDto;

				return this.apiClient.callApi(
					"/variable-instance/count", "GET",
					pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
					authNames, contentTypes, accepts, returnType, callback
				);
			};

			/**
     * Callback function to receive the result of the queryVariableInstances operation.
     * @callback module:api/VariableApi~queryVariableInstancesCallback
     * @param {String} error Error message, if any.
     * @param {Array.<Object>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

			/**
     * Query for variable instances that fulfill given parameters through a JSON object.
     * Query for variable instances that fulfill given parameters through a JSON object. This method is slightly more powerful than the Get Variable Instances method because it allows filtering by multiple variable instances of types &#x60;String&#x60;, &#x60;Number&#x60; or &#x60;Boolean&#x60;.
     * @param {Object} opts Optional parameters
     * @param {module:model/VariableInstanceQueryDto} opts.body Parameter queryDto
     * @param {Number} opts.firstResult Parameter firstResult
     * @param {Number} opts.maxResults Parameter maxResults
     * @param {Boolean} opts.deserializeValues Parameter deserializeObjectValues (default to true)
     * @param {module:api/VariableApi~queryVariableInstancesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<Object>}
     */
			this.queryVariableInstances = function(opts, callback) {
				opts = opts || {};
				var postBody = opts["body"];


				var pathParams = {
				};
				var queryParams = {
					"firstResult": opts["firstResult"],
					"maxResults": opts["maxResults"],
					"deserializeValues": opts["deserializeValues"],
				};
				var collectionQueryParams = {
				};
				var headerParams = {
				};
				var formParams = {
				};

				var authNames = [];
				var contentTypes = ["application/json"];
				var accepts = ["application/json"];
				var returnType = [Object];

				return this.apiClient.callApi(
					"/variable-instance", "POST",
					pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
					authNames, contentTypes, accepts, returnType, callback
				);
			};

			/**
     * Callback function to receive the result of the queryVariableInstancesCount operation.
     * @callback module:api/VariableApi~queryVariableInstancesCountCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CountResultDto} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

			/**
     * Query for the number of variable instances that fulfill given parameters.
     * Query for the number of variable instances that fulfill given parameters. This method takes the same message body as the Get Variable Instances (POST) method and therefore it is slightly more powerful than the Get Variable Instance Count method.
     * @param {Object} opts Optional parameters
     * @param {module:model/VariableInstanceQueryDto} opts.body Parameter queryDto
     * @param {module:api/VariableApi~queryVariableInstancesCountCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CountResultDto}
     */
			this.queryVariableInstancesCount = function(opts, callback) {
				opts = opts || {};
				var postBody = opts["body"];


				var pathParams = {
				};
				var queryParams = {
				};
				var collectionQueryParams = {
				};
				var headerParams = {
				};
				var formParams = {
				};

				var authNames = [];
				var contentTypes = ["application/json"];
				var accepts = ["application/json"];
				var returnType = CountResultDto;

				return this.apiClient.callApi(
					"/variable-instance/count", "POST",
					pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
					authNames, contentTypes, accepts, returnType, callback
				);
			};
		};

		return exports;
	}));

},{"../ApiClient":16,"../model/CountResultDto":62,"../model/VariableInstanceQueryDto":137}],39:[function(require,module,exports){
/**
 * Camunda REST API
 * Swagger OpenApi Spec for Camunda REST API.
 *
 * OpenAPI spec version: v7.8.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.3.1
 *
 * Do not edit the class manually.
 *
 */

	(function(factory) {
		if (typeof define === "function" && define.amd) {
			// AMD. Register as an anonymous module.
			define(["ApiClient", "model/AbstractQueryDto", "model/AbstractQueryDtoObject", "model/ActivityInstanceDto", "model/AtomLink", "model/AttachmentDto", "model/AuthenticationResult", "model/AuthorizationCheckResultDto", "model/AuthorizationCreateDto", "model/AuthorizationDto", "model/BasicUserCredentialsDto", "model/BatchDto", "model/CancellationInstructionDto", "model/CaseDefinitionDiagramDto", "model/CaseDefinitionDto", "model/CaseExecutionDto", "model/CaseExecutionQueryDto", "model/CaseExecutionTriggerDto", "model/CaseInstanceDto", "model/CommentDto", "model/CompleteExternalTaskDto", "model/CompleteTaskDto", "model/CorrelationMessageDto", "model/CountResultDto", "model/CreateCaseInstanceDto", "model/DecisionDefinitionDiagramDto", "model/DecisionDefinitionDto", "model/DeleteProcessInstancesDto", "model/DeploymentDto", "model/DeploymentResourceDto", "model/EvaluateDecisionDto", "model/EventSubscriptionDto", "model/ExecutionDto", "model/ExecutionQueryDto", "model/ExecutionTriggerDto", "model/ExternalTaskBpmnError", "model/ExternalTaskDto", "model/ExternalTaskFailureDto", "model/ExternalTaskQueryDto", "model/FetchExternalTaskTopicDto", "model/FetchExternalTasksDto", "model/FilterDto", "model/FormDto", "model/GroupDto", "model/GroupInfoDto", "model/HistoricProcessInstanceQueryDto", "model/HistoryTimeToLiveDto", "model/IdentityLinkDto", "model/IncidentDto", "model/InputStream", "model/JobDefinitionDto", "model/JobDefinitionPriorityDto", "model/JobDefinitionQueryDto", "model/JobDefinitionSuspensionStateDto", "model/JobDto", "model/JobDuedateDto", "model/JobQueryDto", "model/JobSuspensionStateDto", "model/MigrationExecutionDto", "model/MigrationInstructionDto", "model/MigrationInstructionValidationReportDto", "model/MigrationPlanDto", "model/MigrationPlanGenerationDto", "model/MigrationPlanReportDto", "model/ModificationDto", "model/MultipartFormData", "model/PatchVariablesDto", "model/PriorityDto", "model/ProcessDefinitionDiagramDto", "model/ProcessDefinitionDto", "model/ProcessDefinitionSuspensionStateDto", "model/ProcessInstanceDto", "model/ProcessInstanceModificationDto", "model/ProcessInstanceModificationInstructionDto", "model/ProcessInstanceQueryDto", "model/ProcessInstanceSuspensionStateDto", "model/RedeploymentDto", "model/ResourceOptionsDto", "model/RetriesDto", "model/SetJobRetriesByProcessDto", "model/SetJobRetriesDto", "model/SetRetriesForExternalTasksDto", "model/SortingDto", "model/StartAfterInstructionDto", "model/StartBeforeInstructionDto", "model/StartProcessInstanceDto", "model/StartTransitionInstructionDto", "model/SuspensionStateDto", "model/TaskDto", "model/TaskQueryDto", "model/TenantDto", "model/TransitionInstanceDto", "model/TriggerVariableValueDto", "model/UserCredentialsDto", "model/UserDto", "model/UserIdDto", "model/UserProfileDto", "model/VariableInstanceDto", "model/VariableInstanceQueryDto", "model/VariableNameDto", "model/VariableQueryParameterDto", "model/VariableValueDto", "api/AuthorizationApi", "api/BatchApi", "api/CaseDefinitionApi", "api/CaseExecutionApi", "api/DecisionDefinitionApi", "api/DeploymentApi", "api/ExecutionApi", "api/ExternalApi", "api/FilterApi", "api/GroupApi", "api/IdentityApi", "api/JobDefinitionApi", "api/JobExecutionApi", "api/MessageApi", "api/MigrationApi", "api/ModificationApi", "api/ProcessDefinitionApi", "api/ProcessInstanceApi", "api/TaskApi", "api/TenantApi", "api/UserApi", "api/VariableApi"], factory);
		} else if (typeof module === "object" && module.exports) {
			// CommonJS-like environments that support module.exports, like Node.
			module.exports = factory(require("./ApiClient"), require("./model/AbstractQueryDto"), require("./model/AbstractQueryDtoObject"), require("./model/ActivityInstanceDto"), require("./model/AtomLink"), require("./model/AttachmentDto"), require("./model/AuthenticationResult"), require("./model/AuthorizationCheckResultDto"), require("./model/AuthorizationCreateDto"), require("./model/AuthorizationDto"), require("./model/BasicUserCredentialsDto"), require("./model/BatchDto"), require("./model/CancellationInstructionDto"), require("./model/CaseDefinitionDiagramDto"), require("./model/CaseDefinitionDto"), require("./model/CaseExecutionDto"), require("./model/CaseExecutionQueryDto"), require("./model/CaseExecutionTriggerDto"), require("./model/CaseInstanceDto"), require("./model/CommentDto"), require("./model/CompleteExternalTaskDto"), require("./model/CompleteTaskDto"), require("./model/CorrelationMessageDto"), require("./model/CountResultDto"), require("./model/CreateCaseInstanceDto"), require("./model/DecisionDefinitionDiagramDto"), require("./model/DecisionDefinitionDto"), require("./model/DeleteProcessInstancesDto"), require("./model/DeploymentDto"), require("./model/DeploymentResourceDto"), require("./model/EvaluateDecisionDto"), require("./model/EventSubscriptionDto"), require("./model/ExecutionDto"), require("./model/ExecutionQueryDto"), require("./model/ExecutionTriggerDto"), require("./model/ExternalTaskBpmnError"), require("./model/ExternalTaskDto"), require("./model/ExternalTaskFailureDto"), require("./model/ExternalTaskQueryDto"), require("./model/FetchExternalTaskTopicDto"), require("./model/FetchExternalTasksDto"), require("./model/FilterDto"), require("./model/FormDto"), require("./model/GroupDto"), require("./model/GroupInfoDto"), require("./model/HistoricProcessInstanceQueryDto"), require("./model/HistoryTimeToLiveDto"), require("./model/IdentityLinkDto"), require("./model/IncidentDto"), require("./model/InputStream"), require("./model/JobDefinitionDto"), require("./model/JobDefinitionPriorityDto"), require("./model/JobDefinitionQueryDto"), require("./model/JobDefinitionSuspensionStateDto"), require("./model/JobDto"), require("./model/JobDuedateDto"), require("./model/JobQueryDto"), require("./model/JobSuspensionStateDto"), require("./model/MigrationExecutionDto"), require("./model/MigrationInstructionDto"), require("./model/MigrationInstructionValidationReportDto"), require("./model/MigrationPlanDto"), require("./model/MigrationPlanGenerationDto"), require("./model/MigrationPlanReportDto"), require("./model/ModificationDto"), require("./model/MultipartFormData"), require("./model/PatchVariablesDto"), require("./model/PriorityDto"), require("./model/ProcessDefinitionDiagramDto"), require("./model/ProcessDefinitionDto"), require("./model/ProcessDefinitionSuspensionStateDto"), require("./model/ProcessInstanceDto"), require("./model/ProcessInstanceModificationDto"), require("./model/ProcessInstanceModificationInstructionDto"), require("./model/ProcessInstanceQueryDto"), require("./model/ProcessInstanceSuspensionStateDto"), require("./model/RedeploymentDto"), require("./model/ResourceOptionsDto"), require("./model/RetriesDto"), require("./model/SetJobRetriesByProcessDto"), require("./model/SetJobRetriesDto"), require("./model/SetRetriesForExternalTasksDto"), require("./model/SortingDto"), require("./model/StartAfterInstructionDto"), require("./model/StartBeforeInstructionDto"), require("./model/StartProcessInstanceDto"), require("./model/StartTransitionInstructionDto"), require("./model/SuspensionStateDto"), require("./model/TaskDto"), require("./model/TaskQueryDto"), require("./model/TenantDto"), require("./model/TransitionInstanceDto"), require("./model/TriggerVariableValueDto"), require("./model/UserCredentialsDto"), require("./model/UserDto"), require("./model/UserIdDto"), require("./model/UserProfileDto"), require("./model/VariableInstanceDto"), require("./model/VariableInstanceQueryDto"), require("./model/VariableNameDto"), require("./model/VariableQueryParameterDto"), require("./model/VariableValueDto"), require("./api/AuthorizationApi"), require("./api/BatchApi"), require("./api/CaseDefinitionApi"), require("./api/CaseExecutionApi"), require("./api/DecisionDefinitionApi"), require("./api/DeploymentApi"), require("./api/ExecutionApi"), require("./api/ExternalApi"), require("./api/FilterApi"), require("./api/GroupApi"), require("./api/IdentityApi"), require("./api/JobDefinitionApi"), require("./api/JobExecutionApi"), require("./api/MessageApi"), require("./api/MigrationApi"), require("./api/ModificationApi"), require("./api/ProcessDefinitionApi"), require("./api/ProcessInstanceApi"), require("./api/TaskApi"), require("./api/TenantApi"), require("./api/UserApi"), require("./api/VariableApi"));
		}
	}(function(ApiClient, AbstractQueryDto, AbstractQueryDtoObject, ActivityInstanceDto, AtomLink, AttachmentDto, AuthenticationResult, AuthorizationCheckResultDto, AuthorizationCreateDto, AuthorizationDto, BasicUserCredentialsDto, BatchDto, CancellationInstructionDto, CaseDefinitionDiagramDto, CaseDefinitionDto, CaseExecutionDto, CaseExecutionQueryDto, CaseExecutionTriggerDto, CaseInstanceDto, CommentDto, CompleteExternalTaskDto, CompleteTaskDto, CorrelationMessageDto, CountResultDto, CreateCaseInstanceDto, DecisionDefinitionDiagramDto, DecisionDefinitionDto, DeleteProcessInstancesDto, DeploymentDto, DeploymentResourceDto, EvaluateDecisionDto, EventSubscriptionDto, ExecutionDto, ExecutionQueryDto, ExecutionTriggerDto, ExternalTaskBpmnError, ExternalTaskDto, ExternalTaskFailureDto, ExternalTaskQueryDto, FetchExternalTaskTopicDto, FetchExternalTasksDto, FilterDto, FormDto, GroupDto, GroupInfoDto, HistoricProcessInstanceQueryDto, HistoryTimeToLiveDto, IdentityLinkDto, IncidentDto, InputStream, JobDefinitionDto, JobDefinitionPriorityDto, JobDefinitionQueryDto, JobDefinitionSuspensionStateDto, JobDto, JobDuedateDto, JobQueryDto, JobSuspensionStateDto, MigrationExecutionDto, MigrationInstructionDto, MigrationInstructionValidationReportDto, MigrationPlanDto, MigrationPlanGenerationDto, MigrationPlanReportDto, ModificationDto, MultipartFormData, PatchVariablesDto, PriorityDto, ProcessDefinitionDiagramDto, ProcessDefinitionDto, ProcessDefinitionSuspensionStateDto, ProcessInstanceDto, ProcessInstanceModificationDto, ProcessInstanceModificationInstructionDto, ProcessInstanceQueryDto, ProcessInstanceSuspensionStateDto, RedeploymentDto, ResourceOptionsDto, RetriesDto, SetJobRetriesByProcessDto, SetJobRetriesDto, SetRetriesForExternalTasksDto, SortingDto, StartAfterInstructionDto, StartBeforeInstructionDto, StartProcessInstanceDto, StartTransitionInstructionDto, SuspensionStateDto, TaskDto, TaskQueryDto, TenantDto, TransitionInstanceDto, TriggerVariableValueDto, UserCredentialsDto, UserDto, UserIdDto, UserProfileDto, VariableInstanceDto, VariableInstanceQueryDto, VariableNameDto, VariableQueryParameterDto, VariableValueDto, AuthorizationApi, BatchApi, CaseDefinitionApi, CaseExecutionApi, DecisionDefinitionApi, DeploymentApi, ExecutionApi, ExternalApi, FilterApi, GroupApi, IdentityApi, JobDefinitionApi, JobExecutionApi, MessageApi, MigrationApi, ModificationApi, ProcessDefinitionApi, ProcessInstanceApi, TaskApi, TenantApi, UserApi, VariableApi) {
		"use strict";

		/**
   * Swagger_OpenApi_Spec_for_Camunda_REST_API_.<br>
   * The <code>index</code> module provides access to constructors for all the classes which comprise the public API.
   * <p>
   * An AMD (recommended!) or CommonJS application will generally do something equivalent to the following:
   * <pre>
   * var CamundaRestApi = require('index'); // See note below*.
   * var xxxSvc = new CamundaRestApi.XxxApi(); // Allocate the API class we're going to use.
   * var yyyModel = new CamundaRestApi.Yyy(); // Construct a model instance.
   * yyyModel.someProperty = 'someValue';
   * ...
   * var zzz = xxxSvc.doSomething(yyyModel); // Invoke the service.
   * ...
   * </pre>
   * <em>*NOTE: For a top-level AMD script, use require(['index'], function(){...})
   * and put the application logic within the callback function.</em>
   * </p>
   * <p>
   * A non-AMD browser application (discouraged) might do something like this:
   * <pre>
   * var xxxSvc = new CamundaRestApi.XxxApi(); // Allocate the API class we're going to use.
   * var yyy = new CamundaRestApi.Yyy(); // Construct a model instance.
   * yyyModel.someProperty = 'someValue';
   * ...
   * var zzz = xxxSvc.doSomething(yyyModel); // Invoke the service.
   * ...
   * </pre>
   * </p>
   * @module index
   * @version v7.8.0
   */
		var exports = {
			/**
     * The ApiClient constructor.
     * @property {module:ApiClient}
     */
			ApiClient: ApiClient,
			/**
     * The AbstractQueryDto model constructor.
     * @property {module:model/AbstractQueryDto}
     */
			AbstractQueryDto: AbstractQueryDto,
			/**
     * The AbstractQueryDtoObject model constructor.
     * @property {module:model/AbstractQueryDtoObject}
     */
			AbstractQueryDtoObject: AbstractQueryDtoObject,
			/**
     * The ActivityInstanceDto model constructor.
     * @property {module:model/ActivityInstanceDto}
     */
			ActivityInstanceDto: ActivityInstanceDto,
			/**
     * The AtomLink model constructor.
     * @property {module:model/AtomLink}
     */
			AtomLink: AtomLink,
			/**
     * The AttachmentDto model constructor.
     * @property {module:model/AttachmentDto}
     */
			AttachmentDto: AttachmentDto,
			/**
     * The AuthenticationResult model constructor.
     * @property {module:model/AuthenticationResult}
     */
			AuthenticationResult: AuthenticationResult,
			/**
     * The AuthorizationCheckResultDto model constructor.
     * @property {module:model/AuthorizationCheckResultDto}
     */
			AuthorizationCheckResultDto: AuthorizationCheckResultDto,
			/**
     * The AuthorizationCreateDto model constructor.
     * @property {module:model/AuthorizationCreateDto}
     */
			AuthorizationCreateDto: AuthorizationCreateDto,
			/**
     * The AuthorizationDto model constructor.
     * @property {module:model/AuthorizationDto}
     */
			AuthorizationDto: AuthorizationDto,
			/**
     * The BasicUserCredentialsDto model constructor.
     * @property {module:model/BasicUserCredentialsDto}
     */
			BasicUserCredentialsDto: BasicUserCredentialsDto,
			/**
     * The BatchDto model constructor.
     * @property {module:model/BatchDto}
     */
			BatchDto: BatchDto,
			/**
     * The CancellationInstructionDto model constructor.
     * @property {module:model/CancellationInstructionDto}
     */
			CancellationInstructionDto: CancellationInstructionDto,
			/**
     * The CaseDefinitionDiagramDto model constructor.
     * @property {module:model/CaseDefinitionDiagramDto}
     */
			CaseDefinitionDiagramDto: CaseDefinitionDiagramDto,
			/**
     * The CaseDefinitionDto model constructor.
     * @property {module:model/CaseDefinitionDto}
     */
			CaseDefinitionDto: CaseDefinitionDto,
			/**
     * The CaseExecutionDto model constructor.
     * @property {module:model/CaseExecutionDto}
     */
			CaseExecutionDto: CaseExecutionDto,
			/**
     * The CaseExecutionQueryDto model constructor.
     * @property {module:model/CaseExecutionQueryDto}
     */
			CaseExecutionQueryDto: CaseExecutionQueryDto,
			/**
     * The CaseExecutionTriggerDto model constructor.
     * @property {module:model/CaseExecutionTriggerDto}
     */
			CaseExecutionTriggerDto: CaseExecutionTriggerDto,
			/**
     * The CaseInstanceDto model constructor.
     * @property {module:model/CaseInstanceDto}
     */
			CaseInstanceDto: CaseInstanceDto,
			/**
     * The CommentDto model constructor.
     * @property {module:model/CommentDto}
     */
			CommentDto: CommentDto,
			/**
     * The CompleteExternalTaskDto model constructor.
     * @property {module:model/CompleteExternalTaskDto}
     */
			CompleteExternalTaskDto: CompleteExternalTaskDto,
			/**
     * The CompleteTaskDto model constructor.
     * @property {module:model/CompleteTaskDto}
     */
			CompleteTaskDto: CompleteTaskDto,
			/**
     * The CorrelationMessageDto model constructor.
     * @property {module:model/CorrelationMessageDto}
     */
			CorrelationMessageDto: CorrelationMessageDto,
			/**
     * The CountResultDto model constructor.
     * @property {module:model/CountResultDto}
     */
			CountResultDto: CountResultDto,
			/**
     * The CreateCaseInstanceDto model constructor.
     * @property {module:model/CreateCaseInstanceDto}
     */
			CreateCaseInstanceDto: CreateCaseInstanceDto,
			/**
     * The DecisionDefinitionDiagramDto model constructor.
     * @property {module:model/DecisionDefinitionDiagramDto}
     */
			DecisionDefinitionDiagramDto: DecisionDefinitionDiagramDto,
			/**
     * The DecisionDefinitionDto model constructor.
     * @property {module:model/DecisionDefinitionDto}
     */
			DecisionDefinitionDto: DecisionDefinitionDto,
			/**
     * The DeleteProcessInstancesDto model constructor.
     * @property {module:model/DeleteProcessInstancesDto}
     */
			DeleteProcessInstancesDto: DeleteProcessInstancesDto,
			/**
     * The DeploymentDto model constructor.
     * @property {module:model/DeploymentDto}
     */
			DeploymentDto: DeploymentDto,
			/**
     * The DeploymentResourceDto model constructor.
     * @property {module:model/DeploymentResourceDto}
     */
			DeploymentResourceDto: DeploymentResourceDto,
			/**
     * The EvaluateDecisionDto model constructor.
     * @property {module:model/EvaluateDecisionDto}
     */
			EvaluateDecisionDto: EvaluateDecisionDto,
			/**
     * The EventSubscriptionDto model constructor.
     * @property {module:model/EventSubscriptionDto}
     */
			EventSubscriptionDto: EventSubscriptionDto,
			/**
     * The ExecutionDto model constructor.
     * @property {module:model/ExecutionDto}
     */
			ExecutionDto: ExecutionDto,
			/**
     * The ExecutionQueryDto model constructor.
     * @property {module:model/ExecutionQueryDto}
     */
			ExecutionQueryDto: ExecutionQueryDto,
			/**
     * The ExecutionTriggerDto model constructor.
     * @property {module:model/ExecutionTriggerDto}
     */
			ExecutionTriggerDto: ExecutionTriggerDto,
			/**
     * The ExternalTaskBpmnError model constructor.
     * @property {module:model/ExternalTaskBpmnError}
     */
			ExternalTaskBpmnError: ExternalTaskBpmnError,
			/**
     * The ExternalTaskDto model constructor.
     * @property {module:model/ExternalTaskDto}
     */
			ExternalTaskDto: ExternalTaskDto,
			/**
     * The ExternalTaskFailureDto model constructor.
     * @property {module:model/ExternalTaskFailureDto}
     */
			ExternalTaskFailureDto: ExternalTaskFailureDto,
			/**
     * The ExternalTaskQueryDto model constructor.
     * @property {module:model/ExternalTaskQueryDto}
     */
			ExternalTaskQueryDto: ExternalTaskQueryDto,
			/**
     * The FetchExternalTaskTopicDto model constructor.
     * @property {module:model/FetchExternalTaskTopicDto}
     */
			FetchExternalTaskTopicDto: FetchExternalTaskTopicDto,
			/**
     * The FetchExternalTasksDto model constructor.
     * @property {module:model/FetchExternalTasksDto}
     */
			FetchExternalTasksDto: FetchExternalTasksDto,
			/**
     * The FilterDto model constructor.
     * @property {module:model/FilterDto}
     */
			FilterDto: FilterDto,
			/**
     * The FormDto model constructor.
     * @property {module:model/FormDto}
     */
			FormDto: FormDto,
			/**
     * The GroupDto model constructor.
     * @property {module:model/GroupDto}
     */
			GroupDto: GroupDto,
			/**
     * The GroupInfoDto model constructor.
     * @property {module:model/GroupInfoDto}
     */
			GroupInfoDto: GroupInfoDto,
			/**
     * The HistoricProcessInstanceQueryDto model constructor.
     * @property {module:model/HistoricProcessInstanceQueryDto}
     */
			HistoricProcessInstanceQueryDto: HistoricProcessInstanceQueryDto,
			/**
     * The HistoryTimeToLiveDto model constructor.
     * @property {module:model/HistoryTimeToLiveDto}
     */
			HistoryTimeToLiveDto: HistoryTimeToLiveDto,
			/**
     * The IdentityLinkDto model constructor.
     * @property {module:model/IdentityLinkDto}
     */
			IdentityLinkDto: IdentityLinkDto,
			/**
     * The IncidentDto model constructor.
     * @property {module:model/IncidentDto}
     */
			IncidentDto: IncidentDto,
			/**
     * The InputStream model constructor.
     * @property {module:model/InputStream}
     */
			InputStream: InputStream,
			/**
     * The JobDefinitionDto model constructor.
     * @property {module:model/JobDefinitionDto}
     */
			JobDefinitionDto: JobDefinitionDto,
			/**
     * The JobDefinitionPriorityDto model constructor.
     * @property {module:model/JobDefinitionPriorityDto}
     */
			JobDefinitionPriorityDto: JobDefinitionPriorityDto,
			/**
     * The JobDefinitionQueryDto model constructor.
     * @property {module:model/JobDefinitionQueryDto}
     */
			JobDefinitionQueryDto: JobDefinitionQueryDto,
			/**
     * The JobDefinitionSuspensionStateDto model constructor.
     * @property {module:model/JobDefinitionSuspensionStateDto}
     */
			JobDefinitionSuspensionStateDto: JobDefinitionSuspensionStateDto,
			/**
     * The JobDto model constructor.
     * @property {module:model/JobDto}
     */
			JobDto: JobDto,
			/**
     * The JobDuedateDto model constructor.
     * @property {module:model/JobDuedateDto}
     */
			JobDuedateDto: JobDuedateDto,
			/**
     * The JobQueryDto model constructor.
     * @property {module:model/JobQueryDto}
     */
			JobQueryDto: JobQueryDto,
			/**
     * The JobSuspensionStateDto model constructor.
     * @property {module:model/JobSuspensionStateDto}
     */
			JobSuspensionStateDto: JobSuspensionStateDto,
			/**
     * The MigrationExecutionDto model constructor.
     * @property {module:model/MigrationExecutionDto}
     */
			MigrationExecutionDto: MigrationExecutionDto,
			/**
     * The MigrationInstructionDto model constructor.
     * @property {module:model/MigrationInstructionDto}
     */
			MigrationInstructionDto: MigrationInstructionDto,
			/**
     * The MigrationInstructionValidationReportDto model constructor.
     * @property {module:model/MigrationInstructionValidationReportDto}
     */
			MigrationInstructionValidationReportDto: MigrationInstructionValidationReportDto,
			/**
     * The MigrationPlanDto model constructor.
     * @property {module:model/MigrationPlanDto}
     */
			MigrationPlanDto: MigrationPlanDto,
			/**
     * The MigrationPlanGenerationDto model constructor.
     * @property {module:model/MigrationPlanGenerationDto}
     */
			MigrationPlanGenerationDto: MigrationPlanGenerationDto,
			/**
     * The MigrationPlanReportDto model constructor.
     * @property {module:model/MigrationPlanReportDto}
     */
			MigrationPlanReportDto: MigrationPlanReportDto,
			/**
     * The ModificationDto model constructor.
     * @property {module:model/ModificationDto}
     */
			ModificationDto: ModificationDto,
			/**
     * The MultipartFormData model constructor.
     * @property {module:model/MultipartFormData}
     */
			MultipartFormData: MultipartFormData,
			/**
     * The PatchVariablesDto model constructor.
     * @property {module:model/PatchVariablesDto}
     */
			PatchVariablesDto: PatchVariablesDto,
			/**
     * The PriorityDto model constructor.
     * @property {module:model/PriorityDto}
     */
			PriorityDto: PriorityDto,
			/**
     * The ProcessDefinitionDiagramDto model constructor.
     * @property {module:model/ProcessDefinitionDiagramDto}
     */
			ProcessDefinitionDiagramDto: ProcessDefinitionDiagramDto,
			/**
     * The ProcessDefinitionDto model constructor.
     * @property {module:model/ProcessDefinitionDto}
     */
			ProcessDefinitionDto: ProcessDefinitionDto,
			/**
     * The ProcessDefinitionSuspensionStateDto model constructor.
     * @property {module:model/ProcessDefinitionSuspensionStateDto}
     */
			ProcessDefinitionSuspensionStateDto: ProcessDefinitionSuspensionStateDto,
			/**
     * The ProcessInstanceDto model constructor.
     * @property {module:model/ProcessInstanceDto}
     */
			ProcessInstanceDto: ProcessInstanceDto,
			/**
     * The ProcessInstanceModificationDto model constructor.
     * @property {module:model/ProcessInstanceModificationDto}
     */
			ProcessInstanceModificationDto: ProcessInstanceModificationDto,
			/**
     * The ProcessInstanceModificationInstructionDto model constructor.
     * @property {module:model/ProcessInstanceModificationInstructionDto}
     */
			ProcessInstanceModificationInstructionDto: ProcessInstanceModificationInstructionDto,
			/**
     * The ProcessInstanceQueryDto model constructor.
     * @property {module:model/ProcessInstanceQueryDto}
     */
			ProcessInstanceQueryDto: ProcessInstanceQueryDto,
			/**
     * The ProcessInstanceSuspensionStateDto model constructor.
     * @property {module:model/ProcessInstanceSuspensionStateDto}
     */
			ProcessInstanceSuspensionStateDto: ProcessInstanceSuspensionStateDto,
			/**
     * The RedeploymentDto model constructor.
     * @property {module:model/RedeploymentDto}
     */
			RedeploymentDto: RedeploymentDto,
			/**
     * The ResourceOptionsDto model constructor.
     * @property {module:model/ResourceOptionsDto}
     */
			ResourceOptionsDto: ResourceOptionsDto,
			/**
     * The RetriesDto model constructor.
     * @property {module:model/RetriesDto}
     */
			RetriesDto: RetriesDto,
			/**
     * The SetJobRetriesByProcessDto model constructor.
     * @property {module:model/SetJobRetriesByProcessDto}
     */
			SetJobRetriesByProcessDto: SetJobRetriesByProcessDto,
			/**
     * The SetJobRetriesDto model constructor.
     * @property {module:model/SetJobRetriesDto}
     */
			SetJobRetriesDto: SetJobRetriesDto,
			/**
     * The SetRetriesForExternalTasksDto model constructor.
     * @property {module:model/SetRetriesForExternalTasksDto}
     */
			SetRetriesForExternalTasksDto: SetRetriesForExternalTasksDto,
			/**
     * The SortingDto model constructor.
     * @property {module:model/SortingDto}
     */
			SortingDto: SortingDto,
			/**
     * The StartAfterInstructionDto model constructor.
     * @property {module:model/StartAfterInstructionDto}
     */
			StartAfterInstructionDto: StartAfterInstructionDto,
			/**
     * The StartBeforeInstructionDto model constructor.
     * @property {module:model/StartBeforeInstructionDto}
     */
			StartBeforeInstructionDto: StartBeforeInstructionDto,
			/**
     * The StartProcessInstanceDto model constructor.
     * @property {module:model/StartProcessInstanceDto}
     */
			StartProcessInstanceDto: StartProcessInstanceDto,
			/**
     * The StartTransitionInstructionDto model constructor.
     * @property {module:model/StartTransitionInstructionDto}
     */
			StartTransitionInstructionDto: StartTransitionInstructionDto,
			/**
     * The SuspensionStateDto model constructor.
     * @property {module:model/SuspensionStateDto}
     */
			SuspensionStateDto: SuspensionStateDto,
			/**
     * The TaskDto model constructor.
     * @property {module:model/TaskDto}
     */
			TaskDto: TaskDto,
			/**
     * The TaskQueryDto model constructor.
     * @property {module:model/TaskQueryDto}
     */
			TaskQueryDto: TaskQueryDto,
			/**
     * The TenantDto model constructor.
     * @property {module:model/TenantDto}
     */
			TenantDto: TenantDto,
			/**
     * The TransitionInstanceDto model constructor.
     * @property {module:model/TransitionInstanceDto}
     */
			TransitionInstanceDto: TransitionInstanceDto,
			/**
     * The TriggerVariableValueDto model constructor.
     * @property {module:model/TriggerVariableValueDto}
     */
			TriggerVariableValueDto: TriggerVariableValueDto,
			/**
     * The UserCredentialsDto model constructor.
     * @property {module:model/UserCredentialsDto}
     */
			UserCredentialsDto: UserCredentialsDto,
			/**
     * The UserDto model constructor.
     * @property {module:model/UserDto}
     */
			UserDto: UserDto,
			/**
     * The UserIdDto model constructor.
     * @property {module:model/UserIdDto}
     */
			UserIdDto: UserIdDto,
			/**
     * The UserProfileDto model constructor.
     * @property {module:model/UserProfileDto}
     */
			UserProfileDto: UserProfileDto,
			/**
     * The VariableInstanceDto model constructor.
     * @property {module:model/VariableInstanceDto}
     */
			VariableInstanceDto: VariableInstanceDto,
			/**
     * The VariableInstanceQueryDto model constructor.
     * @property {module:model/VariableInstanceQueryDto}
     */
			VariableInstanceQueryDto: VariableInstanceQueryDto,
			/**
     * The VariableNameDto model constructor.
     * @property {module:model/VariableNameDto}
     */
			VariableNameDto: VariableNameDto,
			/**
     * The VariableQueryParameterDto model constructor.
     * @property {module:model/VariableQueryParameterDto}
     */
			VariableQueryParameterDto: VariableQueryParameterDto,
			/**
     * The VariableValueDto model constructor.
     * @property {module:model/VariableValueDto}
     */
			VariableValueDto: VariableValueDto,
			/**
     * The AuthorizationApi service constructor.
     * @property {module:api/AuthorizationApi}
     */
			AuthorizationApi: AuthorizationApi,
			/**
     * The BatchApi service constructor.
     * @property {module:api/BatchApi}
     */
			BatchApi: BatchApi,
			/**
     * The CaseDefinitionApi service constructor.
     * @property {module:api/CaseDefinitionApi}
     */
			CaseDefinitionApi: CaseDefinitionApi,
			/**
     * The CaseExecutionApi service constructor.
     * @property {module:api/CaseExecutionApi}
     */
			CaseExecutionApi: CaseExecutionApi,
			/**
     * The DecisionDefinitionApi service constructor.
     * @property {module:api/DecisionDefinitionApi}
     */
			DecisionDefinitionApi: DecisionDefinitionApi,
			/**
     * The DeploymentApi service constructor.
     * @property {module:api/DeploymentApi}
     */
			DeploymentApi: DeploymentApi,
			/**
     * The ExecutionApi service constructor.
     * @property {module:api/ExecutionApi}
     */
			ExecutionApi: ExecutionApi,
			/**
     * The ExternalApi service constructor.
     * @property {module:api/ExternalApi}
     */
			ExternalApi: ExternalApi,
			/**
     * The FilterApi service constructor.
     * @property {module:api/FilterApi}
     */
			FilterApi: FilterApi,
			/**
     * The GroupApi service constructor.
     * @property {module:api/GroupApi}
     */
			GroupApi: GroupApi,
			/**
     * The IdentityApi service constructor.
     * @property {module:api/IdentityApi}
     */
			IdentityApi: IdentityApi,
			/**
     * The JobDefinitionApi service constructor.
     * @property {module:api/JobDefinitionApi}
     */
			JobDefinitionApi: JobDefinitionApi,
			/**
     * The JobExecutionApi service constructor.
     * @property {module:api/JobExecutionApi}
     */
			JobExecutionApi: JobExecutionApi,
			/**
     * The MessageApi service constructor.
     * @property {module:api/MessageApi}
     */
			MessageApi: MessageApi,
			/**
     * The MigrationApi service constructor.
     * @property {module:api/MigrationApi}
     */
			MigrationApi: MigrationApi,
			/**
     * The ModificationApi service constructor.
     * @property {module:api/ModificationApi}
     */
			ModificationApi: ModificationApi,
			/**
     * The ProcessDefinitionApi service constructor.
     * @property {module:api/ProcessDefinitionApi}
     */
			ProcessDefinitionApi: ProcessDefinitionApi,
			/**
     * The ProcessInstanceApi service constructor.
     * @property {module:api/ProcessInstanceApi}
     */
			ProcessInstanceApi: ProcessInstanceApi,
			/**
     * The TaskApi service constructor.
     * @property {module:api/TaskApi}
     */
			TaskApi: TaskApi,
			/**
     * The TenantApi service constructor.
     * @property {module:api/TenantApi}
     */
			TenantApi: TenantApi,
			/**
     * The UserApi service constructor.
     * @property {module:api/UserApi}
     */
			UserApi: UserApi,
			/**
     * The VariableApi service constructor.
     * @property {module:api/VariableApi}
     */
			VariableApi: VariableApi
		};

		return exports;
	}));

},{"./ApiClient":16,"./api/AuthorizationApi":17,"./api/BatchApi":18,"./api/CaseDefinitionApi":19,"./api/CaseExecutionApi":20,"./api/DecisionDefinitionApi":21,"./api/DeploymentApi":22,"./api/ExecutionApi":23,"./api/ExternalApi":24,"./api/FilterApi":25,"./api/GroupApi":26,"./api/IdentityApi":27,"./api/JobDefinitionApi":28,"./api/JobExecutionApi":29,"./api/MessageApi":30,"./api/MigrationApi":31,"./api/ModificationApi":32,"./api/ProcessDefinitionApi":33,"./api/ProcessInstanceApi":34,"./api/TaskApi":35,"./api/TenantApi":36,"./api/UserApi":37,"./api/VariableApi":38,"./model/AbstractQueryDto":40,"./model/AbstractQueryDtoObject":41,"./model/ActivityInstanceDto":42,"./model/AtomLink":43,"./model/AttachmentDto":44,"./model/AuthenticationResult":45,"./model/AuthorizationCheckResultDto":46,"./model/AuthorizationCreateDto":47,"./model/AuthorizationDto":48,"./model/BasicUserCredentialsDto":49,"./model/BatchDto":50,"./model/CancellationInstructionDto":51,"./model/CaseDefinitionDiagramDto":52,"./model/CaseDefinitionDto":53,"./model/CaseExecutionDto":54,"./model/CaseExecutionQueryDto":55,"./model/CaseExecutionTriggerDto":56,"./model/CaseInstanceDto":57,"./model/CommentDto":58,"./model/CompleteExternalTaskDto":59,"./model/CompleteTaskDto":60,"./model/CorrelationMessageDto":61,"./model/CountResultDto":62,"./model/CreateCaseInstanceDto":63,"./model/DecisionDefinitionDiagramDto":64,"./model/DecisionDefinitionDto":65,"./model/DeleteProcessInstancesDto":66,"./model/DeploymentDto":67,"./model/DeploymentResourceDto":68,"./model/EvaluateDecisionDto":69,"./model/EventSubscriptionDto":70,"./model/ExecutionDto":71,"./model/ExecutionQueryDto":72,"./model/ExecutionTriggerDto":73,"./model/ExternalTaskBpmnError":74,"./model/ExternalTaskDto":75,"./model/ExternalTaskFailureDto":76,"./model/ExternalTaskQueryDto":77,"./model/FetchExternalTaskTopicDto":78,"./model/FetchExternalTasksDto":79,"./model/FilterDto":80,"./model/FormDto":81,"./model/GroupDto":82,"./model/GroupInfoDto":83,"./model/HistoricProcessInstanceQueryDto":84,"./model/HistoryTimeToLiveDto":85,"./model/IdentityLinkDto":86,"./model/IncidentDto":87,"./model/InputStream":88,"./model/JobDefinitionDto":89,"./model/JobDefinitionPriorityDto":90,"./model/JobDefinitionQueryDto":91,"./model/JobDefinitionSuspensionStateDto":92,"./model/JobDto":93,"./model/JobDuedateDto":94,"./model/JobQueryDto":95,"./model/JobSuspensionStateDto":96,"./model/MigrationExecutionDto":97,"./model/MigrationInstructionDto":98,"./model/MigrationInstructionValidationReportDto":99,"./model/MigrationPlanDto":100,"./model/MigrationPlanGenerationDto":101,"./model/MigrationPlanReportDto":102,"./model/ModificationDto":103,"./model/MultipartFormData":104,"./model/PatchVariablesDto":105,"./model/PriorityDto":106,"./model/ProcessDefinitionDiagramDto":107,"./model/ProcessDefinitionDto":108,"./model/ProcessDefinitionSuspensionStateDto":109,"./model/ProcessInstanceDto":110,"./model/ProcessInstanceModificationDto":111,"./model/ProcessInstanceModificationInstructionDto":112,"./model/ProcessInstanceQueryDto":113,"./model/ProcessInstanceSuspensionStateDto":114,"./model/RedeploymentDto":115,"./model/ResourceOptionsDto":116,"./model/RetriesDto":117,"./model/SetJobRetriesByProcessDto":118,"./model/SetJobRetriesDto":119,"./model/SetRetriesForExternalTasksDto":120,"./model/SortingDto":121,"./model/StartAfterInstructionDto":122,"./model/StartBeforeInstructionDto":123,"./model/StartProcessInstanceDto":124,"./model/StartTransitionInstructionDto":125,"./model/SuspensionStateDto":126,"./model/TaskDto":127,"./model/TaskQueryDto":128,"./model/TenantDto":129,"./model/TransitionInstanceDto":130,"./model/TriggerVariableValueDto":131,"./model/UserCredentialsDto":132,"./model/UserDto":133,"./model/UserIdDto":134,"./model/UserProfileDto":135,"./model/VariableInstanceDto":136,"./model/VariableInstanceQueryDto":137,"./model/VariableNameDto":138,"./model/VariableQueryParameterDto":139,"./model/VariableValueDto":140}],40:[function(require,module,exports){
/**
 * Camunda REST API
 * Swagger OpenApi Spec for Camunda REST API.
 *
 * OpenAPI spec version: v7.8.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.3.1
 *
 * Do not edit the class manually.
 *
 */

	(function(root, factory) {
		if (typeof define === "function" && define.amd) {
			// AMD. Register as an anonymous module.
			define(["ApiClient", "model/SortingDto"], factory);
		} else if (typeof module === "object" && module.exports) {
			// CommonJS-like environments that support module.exports, like Node.
			module.exports = factory(require("../ApiClient"), require("./SortingDto"));
		} else {
			// Browser globals (root is window)
			if (!root.CamundaRestApi) {
				root.CamundaRestApi = {};
			}
			root.CamundaRestApi.AbstractQueryDto = factory(root.CamundaRestApi.ApiClient, root.CamundaRestApi.SortingDto);
		}
	}(this, function(ApiClient, SortingDto) {
		"use strict";




		/**
   * The AbstractQueryDto model module.
   * @module model/AbstractQueryDto
   * @version v7.8.0
   */

		/**
   * Constructs a new <code>AbstractQueryDto</code>.
   * @alias module:model/AbstractQueryDto
   * @class
   */
		var exports = function() {
			var _this = this;


		};

		/**
   * Constructs a <code>AbstractQueryDto</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:model/AbstractQueryDto} obj Optional instance to populate.
   * @return {module:model/AbstractQueryDto} The populated <code>AbstractQueryDto</code> instance.
   */
		exports.constructFromObject = function(data, obj) {
			if (data) {
				obj = obj || new exports();

				if (data.hasOwnProperty("sorting")) {
					obj["sorting"] = ApiClient.convertToType(data["sorting"], [SortingDto]);
				}
			}
			return obj;
		};

		/**
   * @member {Array.<module:model/SortingDto>} sorting
   */
		exports.prototype["sorting"] = undefined;



		return exports;
	}));



},{"../ApiClient":16,"./SortingDto":121}],41:[function(require,module,exports){
/**
 * Camunda REST API
 * Swagger OpenApi Spec for Camunda REST API.
 *
 * OpenAPI spec version: v7.8.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.3.1
 *
 * Do not edit the class manually.
 *
 */

	(function(root, factory) {
		if (typeof define === "function" && define.amd) {
			// AMD. Register as an anonymous module.
			define(["ApiClient", "model/SortingDto"], factory);
		} else if (typeof module === "object" && module.exports) {
			// CommonJS-like environments that support module.exports, like Node.
			module.exports = factory(require("../ApiClient"), require("./SortingDto"));
		} else {
			// Browser globals (root is window)
			if (!root.CamundaRestApi) {
				root.CamundaRestApi = {};
			}
			root.CamundaRestApi.AbstractQueryDtoObject = factory(root.CamundaRestApi.ApiClient, root.CamundaRestApi.SortingDto);
		}
	}(this, function(ApiClient, SortingDto) {
		"use strict";




		/**
   * The AbstractQueryDtoObject model module.
   * @module model/AbstractQueryDtoObject
   * @version v7.8.0
   */

		/**
   * Constructs a new <code>AbstractQueryDtoObject</code>.
   * @alias module:model/AbstractQueryDtoObject
   * @class
   */
		var exports = function() {
			var _this = this;


		};

		/**
   * Constructs a <code>AbstractQueryDtoObject</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:model/AbstractQueryDtoObject} obj Optional instance to populate.
   * @return {module:model/AbstractQueryDtoObject} The populated <code>AbstractQueryDtoObject</code> instance.
   */
		exports.constructFromObject = function(data, obj) {
			if (data) {
				obj = obj || new exports();

				if (data.hasOwnProperty("sorting")) {
					obj["sorting"] = ApiClient.convertToType(data["sorting"], [SortingDto]);
				}
			}
			return obj;
		};

		/**
   * @member {Array.<module:model/SortingDto>} sorting
   */
		exports.prototype["sorting"] = undefined;



		return exports;
	}));



},{"../ApiClient":16,"./SortingDto":121}],42:[function(require,module,exports){
/**
 * Camunda REST API
 * Swagger OpenApi Spec for Camunda REST API.
 *
 * OpenAPI spec version: v7.8.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.3.1
 *
 * Do not edit the class manually.
 *
 */

	(function(root, factory) {
		if (typeof define === "function" && define.amd) {
			// AMD. Register as an anonymous module.
			define(["ApiClient", "model/ActivityInstanceDto", "model/TransitionInstanceDto"], factory);
		} else if (typeof module === "object" && module.exports) {
			// CommonJS-like environments that support module.exports, like Node.
			module.exports = factory(require("../ApiClient"), require("./ActivityInstanceDto"), require("./TransitionInstanceDto"));
		} else {
			// Browser globals (root is window)
			if (!root.CamundaRestApi) {
				root.CamundaRestApi = {};
			}
			root.CamundaRestApi.ActivityInstanceDto = factory(root.CamundaRestApi.ApiClient, root.CamundaRestApi.ActivityInstanceDto, root.CamundaRestApi.TransitionInstanceDto);
		}
	}(this, function(ApiClient, ActivityInstanceDto, TransitionInstanceDto) {
		"use strict";




		/**
   * The ActivityInstanceDto model module.
   * @module model/ActivityInstanceDto
   * @version v7.8.0
   */

		/**
   * Constructs a new <code>ActivityInstanceDto</code>.
   * @alias module:model/ActivityInstanceDto
   * @class
   */
		var exports = function() {
			var _this = this;












		};

		/**
   * Constructs a <code>ActivityInstanceDto</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:model/ActivityInstanceDto} obj Optional instance to populate.
   * @return {module:model/ActivityInstanceDto} The populated <code>ActivityInstanceDto</code> instance.
   */
		exports.constructFromObject = function(data, obj) {
			if (data) {
				obj = obj || new exports();

				if (data.hasOwnProperty("id")) {
					obj["id"] = ApiClient.convertToType(data["id"], "String");
				}
				if (data.hasOwnProperty("parentActivityInstanceId")) {
					obj["parentActivityInstanceId"] = ApiClient.convertToType(data["parentActivityInstanceId"], "String");
				}
				if (data.hasOwnProperty("activityId")) {
					obj["activityId"] = ApiClient.convertToType(data["activityId"], "String");
				}
				if (data.hasOwnProperty("activityType")) {
					obj["activityType"] = ApiClient.convertToType(data["activityType"], "String");
				}
				if (data.hasOwnProperty("processInstanceId")) {
					obj["processInstanceId"] = ApiClient.convertToType(data["processInstanceId"], "String");
				}
				if (data.hasOwnProperty("processDefinitionId")) {
					obj["processDefinitionId"] = ApiClient.convertToType(data["processDefinitionId"], "String");
				}
				if (data.hasOwnProperty("childActivityInstances")) {
					obj["childActivityInstances"] = ApiClient.convertToType(data["childActivityInstances"], [ActivityInstanceDto]);
				}
				if (data.hasOwnProperty("childTransitionInstances")) {
					obj["childTransitionInstances"] = ApiClient.convertToType(data["childTransitionInstances"], [TransitionInstanceDto]);
				}
				if (data.hasOwnProperty("executionIds")) {
					obj["executionIds"] = ApiClient.convertToType(data["executionIds"], ["String"]);
				}
				if (data.hasOwnProperty("activityName")) {
					obj["activityName"] = ApiClient.convertToType(data["activityName"], "String");
				}
				if (data.hasOwnProperty("name")) {
					obj["name"] = ApiClient.convertToType(data["name"], "String");
				}
			}
			return obj;
		};

		/**
   * The id of the activity instance.
   * @member {String} id
   */
		exports.prototype["id"] = undefined;
		/**
   * @member {String} parentActivityInstanceId
   */
		exports.prototype["parentActivityInstanceId"] = undefined;
		/**
   * The id of the activity.
   * @member {String} activityId
   */
		exports.prototype["activityId"] = undefined;
		/**
   * The type of activity (corresponds to the XML element name in the BPMN 2.0, e.g., 'userTask').
   * @member {String} activityType
   */
		exports.prototype["activityType"] = undefined;
		/**
   * The id of the process instance this activity instance is part of.
   * @member {String} processInstanceId
   */
		exports.prototype["processInstanceId"] = undefined;
		/**
   * The id of the process definition.
   * @member {String} processDefinitionId
   */
		exports.prototype["processDefinitionId"] = undefined;
		/**
   * A list of child activity instances.
   * @member {Array.<module:model/ActivityInstanceDto>} childActivityInstances
   */
		exports.prototype["childActivityInstances"] = undefined;
		/**
   * A list of child transition instances. A transition instance represents an execution waiting in an asynchronous continuation.
   * @member {Array.<module:model/TransitionInstanceDto>} childTransitionInstances
   */
		exports.prototype["childTransitionInstances"] = undefined;
		/**
   * A list of execution ids.
   * @member {Array.<String>} executionIds
   */
		exports.prototype["executionIds"] = undefined;
		/**
   * The name of the activity.
   * @member {String} activityName
   */
		exports.prototype["activityName"] = undefined;
		/**
   * @member {String} name
   */
		exports.prototype["name"] = undefined;



		return exports;
	}));



},{"../ApiClient":16,"./ActivityInstanceDto":42,"./TransitionInstanceDto":130}],43:[function(require,module,exports){
/**
 * Camunda REST API
 * Swagger OpenApi Spec for Camunda REST API.
 *
 * OpenAPI spec version: v7.8.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.3.1
 *
 * Do not edit the class manually.
 *
 */

	(function(root, factory) {
		if (typeof define === "function" && define.amd) {
			// AMD. Register as an anonymous module.
			define(["ApiClient"], factory);
		} else if (typeof module === "object" && module.exports) {
			// CommonJS-like environments that support module.exports, like Node.
			module.exports = factory(require("../ApiClient"));
		} else {
			// Browser globals (root is window)
			if (!root.CamundaRestApi) {
				root.CamundaRestApi = {};
			}
			root.CamundaRestApi.AtomLink = factory(root.CamundaRestApi.ApiClient);
		}
	}(this, function(ApiClient) {
		"use strict";




		/**
   * The AtomLink model module.
   * @module model/AtomLink
   * @version v7.8.0
   */

		/**
   * Constructs a new <code>AtomLink</code>.
   * @alias module:model/AtomLink
   * @class
   */
		var exports = function() {
			var _this = this;




		};

		/**
   * Constructs a <code>AtomLink</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:model/AtomLink} obj Optional instance to populate.
   * @return {module:model/AtomLink} The populated <code>AtomLink</code> instance.
   */
		exports.constructFromObject = function(data, obj) {
			if (data) {
				obj = obj || new exports();

				if (data.hasOwnProperty("method")) {
					obj["method"] = ApiClient.convertToType(data["method"], "String");
				}
				if (data.hasOwnProperty("href")) {
					obj["href"] = ApiClient.convertToType(data["href"], "String");
				}
				if (data.hasOwnProperty("rel")) {
					obj["rel"] = ApiClient.convertToType(data["rel"], "String");
				}
			}
			return obj;
		};

		/**
   * @member {String} method
   */
		exports.prototype["method"] = undefined;
		/**
   * @member {String} href
   */
		exports.prototype["href"] = undefined;
		/**
   * @member {String} rel
   */
		exports.prototype["rel"] = undefined;



		return exports;
	}));



},{"../ApiClient":16}],44:[function(require,module,exports){
/**
 * Camunda REST API
 * Swagger OpenApi Spec for Camunda REST API.
 *
 * OpenAPI spec version: v7.8.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.3.1
 *
 * Do not edit the class manually.
 *
 */

	(function(root, factory) {
		if (typeof define === "function" && define.amd) {
			// AMD. Register as an anonymous module.
			define(["ApiClient", "model/AtomLink"], factory);
		} else if (typeof module === "object" && module.exports) {
			// CommonJS-like environments that support module.exports, like Node.
			module.exports = factory(require("../ApiClient"), require("./AtomLink"));
		} else {
			// Browser globals (root is window)
			if (!root.CamundaRestApi) {
				root.CamundaRestApi = {};
			}
			root.CamundaRestApi.AttachmentDto = factory(root.CamundaRestApi.ApiClient, root.CamundaRestApi.AtomLink);
		}
	}(this, function(ApiClient, AtomLink) {
		"use strict";




		/**
   * The AttachmentDto model module.
   * @module model/AttachmentDto
   * @version v7.8.0
   */

		/**
   * Constructs a new <code>AttachmentDto</code>.
   * @alias module:model/AttachmentDto
   * @class
   */
		var exports = function() {
			var _this = this;








		};

		/**
   * Constructs a <code>AttachmentDto</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:model/AttachmentDto} obj Optional instance to populate.
   * @return {module:model/AttachmentDto} The populated <code>AttachmentDto</code> instance.
   */
		exports.constructFromObject = function(data, obj) {
			if (data) {
				obj = obj || new exports();

				if (data.hasOwnProperty("links")) {
					obj["links"] = ApiClient.convertToType(data["links"], [AtomLink]);
				}
				if (data.hasOwnProperty("id")) {
					obj["id"] = ApiClient.convertToType(data["id"], "String");
				}
				if (data.hasOwnProperty("name")) {
					obj["name"] = ApiClient.convertToType(data["name"], "String");
				}
				if (data.hasOwnProperty("description")) {
					obj["description"] = ApiClient.convertToType(data["description"], "String");
				}
				if (data.hasOwnProperty("taskId")) {
					obj["taskId"] = ApiClient.convertToType(data["taskId"], "String");
				}
				if (data.hasOwnProperty("type")) {
					obj["type"] = ApiClient.convertToType(data["type"], "String");
				}
				if (data.hasOwnProperty("url")) {
					obj["url"] = ApiClient.convertToType(data["url"], "String");
				}
			}
			return obj;
		};

		/**
   * @member {Array.<module:model/AtomLink>} links
   */
		exports.prototype["links"] = undefined;
		/**
   * The id of the task attachment.
   * @member {String} id
   */
		exports.prototype["id"] = undefined;
		/**
   * The name of the task attachment.
   * @member {String} name
   */
		exports.prototype["name"] = undefined;
		/**
   * The description of the task attachment.
   * @member {String} description
   */
		exports.prototype["description"] = undefined;
		/**
   * The id of the task to which the attachment belongs.
   * @member {String} taskId
   */
		exports.prototype["taskId"] = undefined;
		/**
   * Indication of the type of content that this attachment refers to. Can be MIME type or any other indication.
   * @member {String} type
   */
		exports.prototype["type"] = undefined;
		/**
   * The url to the remote content of the task attachment.
   * @member {String} url
   */
		exports.prototype["url"] = undefined;



		return exports;
	}));



},{"../ApiClient":16,"./AtomLink":43}],45:[function(require,module,exports){
/**
 * Camunda REST API
 * Swagger OpenApi Spec for Camunda REST API.
 *
 * OpenAPI spec version: v7.8.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.3.1
 *
 * Do not edit the class manually.
 *
 */

	(function(root, factory) {
		if (typeof define === "function" && define.amd) {
			// AMD. Register as an anonymous module.
			define(["ApiClient"], factory);
		} else if (typeof module === "object" && module.exports) {
			// CommonJS-like environments that support module.exports, like Node.
			module.exports = factory(require("../ApiClient"));
		} else {
			// Browser globals (root is window)
			if (!root.CamundaRestApi) {
				root.CamundaRestApi = {};
			}
			root.CamundaRestApi.AuthenticationResult = factory(root.CamundaRestApi.ApiClient);
		}
	}(this, function(ApiClient) {
		"use strict";




		/**
   * The AuthenticationResult model module.
   * @module model/AuthenticationResult
   * @version v7.8.0
   */

		/**
   * Constructs a new <code>AuthenticationResult</code>.
   * @alias module:model/AuthenticationResult
   * @class
   */
		var exports = function() {
			var _this = this;



		};

		/**
   * Constructs a <code>AuthenticationResult</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:model/AuthenticationResult} obj Optional instance to populate.
   * @return {module:model/AuthenticationResult} The populated <code>AuthenticationResult</code> instance.
   */
		exports.constructFromObject = function(data, obj) {
			if (data) {
				obj = obj || new exports();

				if (data.hasOwnProperty("authenticatedUser")) {
					obj["authenticatedUser"] = ApiClient.convertToType(data["authenticatedUser"], "String");
				}
				if (data.hasOwnProperty("authenticated")) {
					obj["authenticated"] = ApiClient.convertToType(data["authenticated"], "Boolean");
				}
			}
			return obj;
		};

		/**
   * @member {String} authenticatedUser
   */
		exports.prototype["authenticatedUser"] = undefined;
		/**
   * @member {Boolean} authenticated
   */
		exports.prototype["authenticated"] = undefined;



		return exports;
	}));



},{"../ApiClient":16}],46:[function(require,module,exports){
/**
 * Camunda REST API
 * Swagger OpenApi Spec for Camunda REST API.
 *
 * OpenAPI spec version: v7.8.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.3.1
 *
 * Do not edit the class manually.
 *
 */

	(function(root, factory) {
		if (typeof define === "function" && define.amd) {
			// AMD. Register as an anonymous module.
			define(["ApiClient"], factory);
		} else if (typeof module === "object" && module.exports) {
			// CommonJS-like environments that support module.exports, like Node.
			module.exports = factory(require("../ApiClient"));
		} else {
			// Browser globals (root is window)
			if (!root.CamundaRestApi) {
				root.CamundaRestApi = {};
			}
			root.CamundaRestApi.AuthorizationCheckResultDto = factory(root.CamundaRestApi.ApiClient);
		}
	}(this, function(ApiClient) {
		"use strict";




		/**
   * The AuthorizationCheckResultDto model module.
   * @module model/AuthorizationCheckResultDto
   * @version v7.8.0
   */

		/**
   * Constructs a new <code>AuthorizationCheckResultDto</code>.
   * @alias module:model/AuthorizationCheckResultDto
   * @class
   */
		var exports = function() {
			var _this = this;





		};

		/**
   * Constructs a <code>AuthorizationCheckResultDto</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:model/AuthorizationCheckResultDto} obj Optional instance to populate.
   * @return {module:model/AuthorizationCheckResultDto} The populated <code>AuthorizationCheckResultDto</code> instance.
   */
		exports.constructFromObject = function(data, obj) {
			if (data) {
				obj = obj || new exports();

				if (data.hasOwnProperty("permissionName")) {
					obj["permissionName"] = ApiClient.convertToType(data["permissionName"], "String");
				}
				if (data.hasOwnProperty("resourceName")) {
					obj["resourceName"] = ApiClient.convertToType(data["resourceName"], "String");
				}
				if (data.hasOwnProperty("resourceId")) {
					obj["resourceId"] = ApiClient.convertToType(data["resourceId"], "String");
				}
				if (data.hasOwnProperty("authorized")) {
					obj["authorized"] = ApiClient.convertToType(data["authorized"], "Boolean");
				}
			}
			return obj;
		};

		/**
   * Name of the permission which was checked.
   * @member {String} permissionName
   */
		exports.prototype["permissionName"] = undefined;
		/**
   * The name of the resource for which the permission check was performed.
   * @member {String} resourceName
   */
		exports.prototype["resourceName"] = undefined;
		/**
   * The id of the resource for which the permission check was performed.
   * @member {String} resourceId
   */
		exports.prototype["resourceId"] = undefined;
		/**
   * @member {Boolean} authorized
   */
		exports.prototype["authorized"] = undefined;



		return exports;
	}));



},{"../ApiClient":16}],47:[function(require,module,exports){
/**
 * Camunda REST API
 * Swagger OpenApi Spec for Camunda REST API.
 *
 * OpenAPI spec version: v7.8.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.3.1
 *
 * Do not edit the class manually.
 *
 */

	(function(root, factory) {
		if (typeof define === "function" && define.amd) {
			// AMD. Register as an anonymous module.
			define(["ApiClient"], factory);
		} else if (typeof module === "object" && module.exports) {
			// CommonJS-like environments that support module.exports, like Node.
			module.exports = factory(require("../ApiClient"));
		} else {
			// Browser globals (root is window)
			if (!root.CamundaRestApi) {
				root.CamundaRestApi = {};
			}
			root.CamundaRestApi.AuthorizationCreateDto = factory(root.CamundaRestApi.ApiClient);
		}
	}(this, function(ApiClient) {
		"use strict";




		/**
   * The AuthorizationCreateDto model module.
   * @module model/AuthorizationCreateDto
   * @version v7.8.0
   */

		/**
   * Constructs a new <code>AuthorizationCreateDto</code>.
   * @alias module:model/AuthorizationCreateDto
   * @class
   */
		var exports = function() {
			var _this = this;







		};

		/**
   * Constructs a <code>AuthorizationCreateDto</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:model/AuthorizationCreateDto} obj Optional instance to populate.
   * @return {module:model/AuthorizationCreateDto} The populated <code>AuthorizationCreateDto</code> instance.
   */
		exports.constructFromObject = function(data, obj) {
			if (data) {
				obj = obj || new exports();

				if (data.hasOwnProperty("type")) {
					obj["type"] = ApiClient.convertToType(data["type"], "Number");
				}
				if (data.hasOwnProperty("permissions")) {
					obj["permissions"] = ApiClient.convertToType(data["permissions"], ["String"]);
				}
				if (data.hasOwnProperty("userId")) {
					obj["userId"] = ApiClient.convertToType(data["userId"], "String");
				}
				if (data.hasOwnProperty("groupId")) {
					obj["groupId"] = ApiClient.convertToType(data["groupId"], "String");
				}
				if (data.hasOwnProperty("resourceType")) {
					obj["resourceType"] = ApiClient.convertToType(data["resourceType"], "Number");
				}
				if (data.hasOwnProperty("resourceId")) {
					obj["resourceId"] = ApiClient.convertToType(data["resourceId"], "String");
				}
			}
			return obj;
		};

		/**
   * The type of the authorization. (0=global, 1=grant, 2=revoke). See the User Guide for more information about authorization types.
   * @member {Number} type
   */
		exports.prototype["type"] = undefined;
		/**
   * An array of Strings holding the permissions provided by this authorization.
   * @member {Array.<String>} permissions
   */
		exports.prototype["permissions"] = undefined;
		/**
   * The id of the user this authorization has been created for. The value \"*\" represents a global authorization ranging over all users.
   * @member {String} userId
   */
		exports.prototype["userId"] = undefined;
		/**
   * The id of the group this authorization has been created for.
   * @member {String} groupId
   */
		exports.prototype["groupId"] = undefined;
		/**
   * An integer representing the resource type. See the User Guide for a list of integer representations of resource types.
   * @member {Number} resourceType
   */
		exports.prototype["resourceType"] = undefined;
		/**
   * The resource Id. The value \"*\" represents an authorization ranging over all instances of a resource.
   * @member {String} resourceId
   */
		exports.prototype["resourceId"] = undefined;



		return exports;
	}));



},{"../ApiClient":16}],48:[function(require,module,exports){
/**
 * Camunda REST API
 * Swagger OpenApi Spec for Camunda REST API.
 *
 * OpenAPI spec version: v7.8.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.3.1
 *
 * Do not edit the class manually.
 *
 */

	(function(root, factory) {
		if (typeof define === "function" && define.amd) {
			// AMD. Register as an anonymous module.
			define(["ApiClient"], factory);
		} else if (typeof module === "object" && module.exports) {
			// CommonJS-like environments that support module.exports, like Node.
			module.exports = factory(require("../ApiClient"));
		} else {
			// Browser globals (root is window)
			if (!root.CamundaRestApi) {
				root.CamundaRestApi = {};
			}
			root.CamundaRestApi.AuthorizationDto = factory(root.CamundaRestApi.ApiClient);
		}
	}(this, function(ApiClient) {
		"use strict";




		/**
   * The AuthorizationDto model module.
   * @module model/AuthorizationDto
   * @version v7.8.0
   */

		/**
   * Constructs a new <code>AuthorizationDto</code>.
   * @alias module:model/AuthorizationDto
   * @class
   */
		var exports = function() {
			var _this = this;








		};

		/**
   * Constructs a <code>AuthorizationDto</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:model/AuthorizationDto} obj Optional instance to populate.
   * @return {module:model/AuthorizationDto} The populated <code>AuthorizationDto</code> instance.
   */
		exports.constructFromObject = function(data, obj) {
			if (data) {
				obj = obj || new exports();

				if (data.hasOwnProperty("id")) {
					obj["id"] = ApiClient.convertToType(data["id"], "String");
				}
				if (data.hasOwnProperty("type")) {
					obj["type"] = ApiClient.convertToType(data["type"], "Number");
				}
				if (data.hasOwnProperty("permissions")) {
					obj["permissions"] = ApiClient.convertToType(data["permissions"], ["String"]);
				}
				if (data.hasOwnProperty("userId")) {
					obj["userId"] = ApiClient.convertToType(data["userId"], "String");
				}
				if (data.hasOwnProperty("groupId")) {
					obj["groupId"] = ApiClient.convertToType(data["groupId"], "String");
				}
				if (data.hasOwnProperty("resourceType")) {
					obj["resourceType"] = ApiClient.convertToType(data["resourceType"], "Number");
				}
				if (data.hasOwnProperty("resourceId")) {
					obj["resourceId"] = ApiClient.convertToType(data["resourceId"], "String");
				}
			}
			return obj;
		};

		/**
   * The id of the authorization.
   * @member {String} id
   */
		exports.prototype["id"] = undefined;
		/**
   * The type of the authorization (0=global, 1=grant, 2=revoke).
   * @member {Number} type
   */
		exports.prototype["type"] = undefined;
		/**
   * An array of Strings holding the permissions provided by this authorization.
   * @member {Array.<String>} permissions
   */
		exports.prototype["permissions"] = undefined;
		/**
   * The id of the user this authorization has been created for. The value \"*\" represents a global authorization ranging over all users.
   * @member {String} userId
   */
		exports.prototype["userId"] = undefined;
		/**
   * The id of the group this authorization has been created for.
   * @member {String} groupId
   */
		exports.prototype["groupId"] = undefined;
		/**
   * An integer representing the resource type. See the User Guide for a list of integer representations of resource types.
   * @member {Number} resourceType
   */
		exports.prototype["resourceType"] = undefined;
		/**
   * The resource Id. The value \"*\" represents an authorization ranging over all instances of a resource.
   * @member {String} resourceId
   */
		exports.prototype["resourceId"] = undefined;



		return exports;
	}));



},{"../ApiClient":16}],49:[function(require,module,exports){
/**
 * Camunda REST API
 * Swagger OpenApi Spec for Camunda REST API.
 *
 * OpenAPI spec version: v7.8.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.3.1
 *
 * Do not edit the class manually.
 *
 */

	(function(root, factory) {
		if (typeof define === "function" && define.amd) {
			// AMD. Register as an anonymous module.
			define(["ApiClient"], factory);
		} else if (typeof module === "object" && module.exports) {
			// CommonJS-like environments that support module.exports, like Node.
			module.exports = factory(require("../ApiClient"));
		} else {
			// Browser globals (root is window)
			if (!root.CamundaRestApi) {
				root.CamundaRestApi = {};
			}
			root.CamundaRestApi.BasicUserCredentialsDto = factory(root.CamundaRestApi.ApiClient);
		}
	}(this, function(ApiClient) {
		"use strict";




		/**
   * The BasicUserCredentialsDto model module.
   * @module model/BasicUserCredentialsDto
   * @version v7.8.0
   */

		/**
   * Constructs a new <code>BasicUserCredentialsDto</code>.
   * @alias module:model/BasicUserCredentialsDto
   * @class
   */
		var exports = function() {
			var _this = this;




		};

		/**
   * Constructs a <code>BasicUserCredentialsDto</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:model/BasicUserCredentialsDto} obj Optional instance to populate.
   * @return {module:model/BasicUserCredentialsDto} The populated <code>BasicUserCredentialsDto</code> instance.
   */
		exports.constructFromObject = function(data, obj) {
			if (data) {
				obj = obj || new exports();

				if (data.hasOwnProperty("password")) {
					obj["password"] = ApiClient.convertToType(data["password"], "String");
				}
				if (data.hasOwnProperty("authenticatedUserPassword")) {
					obj["authenticatedUserPassword"] = ApiClient.convertToType(data["authenticatedUserPassword"], "String");
				}
				if (data.hasOwnProperty("username")) {
					obj["username"] = ApiClient.convertToType(data["username"], "String");
				}
			}
			return obj;
		};

		/**
   * The user's new password.
   * @member {String} password
   */
		exports.prototype["password"] = undefined;
		/**
   * The password of the authenticated user who changes the password of the user (i.e., the user with passed id as path parameter).
   * @member {String} authenticatedUserPassword
   */
		exports.prototype["authenticatedUserPassword"] = undefined;
		/**
   * The username of a user.
   * @member {String} username
   */
		exports.prototype["username"] = undefined;



		return exports;
	}));



},{"../ApiClient":16}],50:[function(require,module,exports){
/**
 * Camunda REST API
 * Swagger OpenApi Spec for Camunda REST API.
 *
 * OpenAPI spec version: v7.8.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.3.1
 *
 * Do not edit the class manually.
 *
 */

	(function(root, factory) {
		if (typeof define === "function" && define.amd) {
			// AMD. Register as an anonymous module.
			define(["ApiClient"], factory);
		} else if (typeof module === "object" && module.exports) {
			// CommonJS-like environments that support module.exports, like Node.
			module.exports = factory(require("../ApiClient"));
		} else {
			// Browser globals (root is window)
			if (!root.CamundaRestApi) {
				root.CamundaRestApi = {};
			}
			root.CamundaRestApi.BatchDto = factory(root.CamundaRestApi.ApiClient);
		}
	}(this, function(ApiClient) {
		"use strict";




		/**
   * The BatchDto model module.
   * @module model/BatchDto
   * @version v7.8.0
   */

		/**
   * Constructs a new <code>BatchDto</code>.
   * @alias module:model/BatchDto
   * @class
   */
		var exports = function() {
			var _this = this;












		};

		/**
   * Constructs a <code>BatchDto</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:model/BatchDto} obj Optional instance to populate.
   * @return {module:model/BatchDto} The populated <code>BatchDto</code> instance.
   */
		exports.constructFromObject = function(data, obj) {
			if (data) {
				obj = obj || new exports();

				if (data.hasOwnProperty("id")) {
					obj["id"] = ApiClient.convertToType(data["id"], "String");
				}
				if (data.hasOwnProperty("type")) {
					obj["type"] = ApiClient.convertToType(data["type"], "String");
				}
				if (data.hasOwnProperty("totalJobs")) {
					obj["totalJobs"] = ApiClient.convertToType(data["totalJobs"], "Number");
				}
				if (data.hasOwnProperty("jobsCreated")) {
					obj["jobsCreated"] = ApiClient.convertToType(data["jobsCreated"], "Number");
				}
				if (data.hasOwnProperty("batchJobsPerSeed")) {
					obj["batchJobsPerSeed"] = ApiClient.convertToType(data["batchJobsPerSeed"], "Number");
				}
				if (data.hasOwnProperty("invocationsPerBatchJob")) {
					obj["invocationsPerBatchJob"] = ApiClient.convertToType(data["invocationsPerBatchJob"], "Number");
				}
				if (data.hasOwnProperty("seedJobDefinitionId")) {
					obj["seedJobDefinitionId"] = ApiClient.convertToType(data["seedJobDefinitionId"], "String");
				}
				if (data.hasOwnProperty("monitorJobDefinitionId")) {
					obj["monitorJobDefinitionId"] = ApiClient.convertToType(data["monitorJobDefinitionId"], "String");
				}
				if (data.hasOwnProperty("batchJobDefinitionId")) {
					obj["batchJobDefinitionId"] = ApiClient.convertToType(data["batchJobDefinitionId"], "String");
				}
				if (data.hasOwnProperty("suspended")) {
					obj["suspended"] = ApiClient.convertToType(data["suspended"], "Boolean");
				}
				if (data.hasOwnProperty("tenantId")) {
					obj["tenantId"] = ApiClient.convertToType(data["tenantId"], "String");
				}
			}
			return obj;
		};

		/**
   * The id of the created batch.
   * @member {String} id
   */
		exports.prototype["id"] = undefined;
		/**
   * The type of the created batch.
   * @member {String} type
   */
		exports.prototype["type"] = undefined;
		/**
   * The total jobs of a batch is the number of batch execution jobs required to complete the batch.
   * @member {Number} totalJobs
   */
		exports.prototype["totalJobs"] = undefined;
		/**
   * The number of batch execution jobs already created by the seed job.
   * @member {Number} jobsCreated
   */
		exports.prototype["jobsCreated"] = undefined;
		/**
   * The number of batch execution jobs created per seed job invocation. The batch seed job is invoked until it has created all batch execution jobs required by the batch (see totalJobs property).
   * @member {Number} batchJobsPerSeed
   */
		exports.prototype["batchJobsPerSeed"] = undefined;
		/**
   * Every batch execution job invokes the command executed by the batch invocationsPerBatchJob times. E.g., for a process instance modification batch this specifies the number of process instances which are modified per batch execution job.
   * @member {Number} invocationsPerBatchJob
   */
		exports.prototype["invocationsPerBatchJob"] = undefined;
		/**
   * The job definition id for the seed jobs of this batch.
   * @member {String} seedJobDefinitionId
   */
		exports.prototype["seedJobDefinitionId"] = undefined;
		/**
   * The job definition id for the monitor jobs of this batch.
   * @member {String} monitorJobDefinitionId
   */
		exports.prototype["monitorJobDefinitionId"] = undefined;
		/**
   * The job definition id for the batch execution jobs of this batch.
   * @member {String} batchJobDefinitionId
   */
		exports.prototype["batchJobDefinitionId"] = undefined;
		/**
   * @member {Boolean} suspended
   */
		exports.prototype["suspended"] = undefined;
		/**
   * The tenant id of the batch.
   * @member {String} tenantId
   */
		exports.prototype["tenantId"] = undefined;



		return exports;
	}));



},{"../ApiClient":16}],51:[function(require,module,exports){
/**
 * Camunda REST API
 * Swagger OpenApi Spec for Camunda REST API.
 *
 * OpenAPI spec version: v7.8.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.3.1
 *
 * Do not edit the class manually.
 *
 */

	(function(root, factory) {
		if (typeof define === "function" && define.amd) {
			// AMD. Register as an anonymous module.
			define(["ApiClient", "model/ProcessInstanceModificationInstructionDto", "model/TriggerVariableValueDto"], factory);
		} else if (typeof module === "object" && module.exports) {
			// CommonJS-like environments that support module.exports, like Node.
			module.exports = factory(require("../ApiClient"), require("./ProcessInstanceModificationInstructionDto"), require("./TriggerVariableValueDto"));
		} else {
			// Browser globals (root is window)
			if (!root.CamundaRestApi) {
				root.CamundaRestApi = {};
			}
			root.CamundaRestApi.CancellationInstructionDto = factory(root.CamundaRestApi.ApiClient, root.CamundaRestApi.ProcessInstanceModificationInstructionDto, root.CamundaRestApi.TriggerVariableValueDto);
		}
	}(this, function(ApiClient, ProcessInstanceModificationInstructionDto, TriggerVariableValueDto) {
		"use strict";




		/**
   * The CancellationInstructionDto model module.
   * @module model/CancellationInstructionDto
   * @version v7.8.0
   */

		/**
   * Constructs a new <code>CancellationInstructionDto</code>.
   * @alias module:model/CancellationInstructionDto
   * @class
   * @extends module:model/ProcessInstanceModificationInstructionDto
   */
		var exports = function() {
			var _this = this;
			ProcessInstanceModificationInstructionDto.call(_this);
		};

		/**
   * Constructs a <code>CancellationInstructionDto</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:model/CancellationInstructionDto} obj Optional instance to populate.
   * @return {module:model/CancellationInstructionDto} The populated <code>CancellationInstructionDto</code> instance.
   */
		exports.constructFromObject = function(data, obj) {
			if (data) {
				obj = obj || new exports();
				ProcessInstanceModificationInstructionDto.constructFromObject(data, obj);
			}
			return obj;
		};

		exports.prototype = Object.create(ProcessInstanceModificationInstructionDto.prototype);
		exports.prototype.constructor = exports;




		return exports;
	}));



},{"../ApiClient":16,"./ProcessInstanceModificationInstructionDto":112,"./TriggerVariableValueDto":131}],52:[function(require,module,exports){
/**
 * Camunda REST API
 * Swagger OpenApi Spec for Camunda REST API.
 *
 * OpenAPI spec version: v7.8.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.3.1
 *
 * Do not edit the class manually.
 *
 */

	(function(root, factory) {
		if (typeof define === "function" && define.amd) {
			// AMD. Register as an anonymous module.
			define(["ApiClient"], factory);
		} else if (typeof module === "object" && module.exports) {
			// CommonJS-like environments that support module.exports, like Node.
			module.exports = factory(require("../ApiClient"));
		} else {
			// Browser globals (root is window)
			if (!root.CamundaRestApi) {
				root.CamundaRestApi = {};
			}
			root.CamundaRestApi.CaseDefinitionDiagramDto = factory(root.CamundaRestApi.ApiClient);
		}
	}(this, function(ApiClient) {
		"use strict";




		/**
   * The CaseDefinitionDiagramDto model module.
   * @module model/CaseDefinitionDiagramDto
   * @version v7.8.0
   */

		/**
   * Constructs a new <code>CaseDefinitionDiagramDto</code>.
   * @alias module:model/CaseDefinitionDiagramDto
   * @class
   */
		var exports = function() {
			var _this = this;



		};

		/**
   * Constructs a <code>CaseDefinitionDiagramDto</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:model/CaseDefinitionDiagramDto} obj Optional instance to populate.
   * @return {module:model/CaseDefinitionDiagramDto} The populated <code>CaseDefinitionDiagramDto</code> instance.
   */
		exports.constructFromObject = function(data, obj) {
			if (data) {
				obj = obj || new exports();

				if (data.hasOwnProperty("id")) {
					obj["id"] = ApiClient.convertToType(data["id"], "String");
				}
				if (data.hasOwnProperty("cmmnXml")) {
					obj["cmmnXml"] = ApiClient.convertToType(data["cmmnXml"], "String");
				}
			}
			return obj;
		};

		/**
   * The id of the case definition.
   * @member {String} id
   */
		exports.prototype["id"] = undefined;
		/**
   * An escaped XML string containing the XML that this case definition was deployed with. Carriage returns, line feeds and quotation marks are escaped.
   * @member {String} cmmnXml
   */
		exports.prototype["cmmnXml"] = undefined;



		return exports;
	}));



},{"../ApiClient":16}],53:[function(require,module,exports){
/**
 * Camunda REST API
 * Swagger OpenApi Spec for Camunda REST API.
 *
 * OpenAPI spec version: v7.8.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.3.1
 *
 * Do not edit the class manually.
 *
 */

	(function(root, factory) {
		if (typeof define === "function" && define.amd) {
			// AMD. Register as an anonymous module.
			define(["ApiClient"], factory);
		} else if (typeof module === "object" && module.exports) {
			// CommonJS-like environments that support module.exports, like Node.
			module.exports = factory(require("../ApiClient"));
		} else {
			// Browser globals (root is window)
			if (!root.CamundaRestApi) {
				root.CamundaRestApi = {};
			}
			root.CamundaRestApi.CaseDefinitionDto = factory(root.CamundaRestApi.ApiClient);
		}
	}(this, function(ApiClient) {
		"use strict";




		/**
   * The CaseDefinitionDto model module.
   * @module model/CaseDefinitionDto
   * @version v7.8.0
   */

		/**
   * Constructs a new <code>CaseDefinitionDto</code>.
   * @alias module:model/CaseDefinitionDto
   * @class
   */
		var exports = function() {
			var _this = this;










		};

		/**
   * Constructs a <code>CaseDefinitionDto</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:model/CaseDefinitionDto} obj Optional instance to populate.
   * @return {module:model/CaseDefinitionDto} The populated <code>CaseDefinitionDto</code> instance.
   */
		exports.constructFromObject = function(data, obj) {
			if (data) {
				obj = obj || new exports();

				if (data.hasOwnProperty("id")) {
					obj["id"] = ApiClient.convertToType(data["id"], "String");
				}
				if (data.hasOwnProperty("key")) {
					obj["key"] = ApiClient.convertToType(data["key"], "String");
				}
				if (data.hasOwnProperty("category")) {
					obj["category"] = ApiClient.convertToType(data["category"], "String");
				}
				if (data.hasOwnProperty("name")) {
					obj["name"] = ApiClient.convertToType(data["name"], "String");
				}
				if (data.hasOwnProperty("version")) {
					obj["version"] = ApiClient.convertToType(data["version"], "Number");
				}
				if (data.hasOwnProperty("resource")) {
					obj["resource"] = ApiClient.convertToType(data["resource"], "String");
				}
				if (data.hasOwnProperty("deploymentId")) {
					obj["deploymentId"] = ApiClient.convertToType(data["deploymentId"], "String");
				}
				if (data.hasOwnProperty("tenantId")) {
					obj["tenantId"] = ApiClient.convertToType(data["tenantId"], "String");
				}
				if (data.hasOwnProperty("historyTimeToLive")) {
					obj["historyTimeToLive"] = ApiClient.convertToType(data["historyTimeToLive"], "Number");
				}
			}
			return obj;
		};

		/**
   * The id of the case definition.
   * @member {String} id
   */
		exports.prototype["id"] = undefined;
		/**
   * The key of the case definition, i.e., the id of the CMMN 2.0 XML case definition.
   * @member {String} key
   */
		exports.prototype["key"] = undefined;
		/**
   * The category of the case definition.
   * @member {String} category
   */
		exports.prototype["category"] = undefined;
		/**
   * The name of the case definition.
   * @member {String} name
   */
		exports.prototype["name"] = undefined;
		/**
   * The version of the case definition that the engine assigned to it.
   * @member {Number} version
   */
		exports.prototype["version"] = undefined;
		/**
   * The file name of the case definition.
   * @member {String} resource
   */
		exports.prototype["resource"] = undefined;
		/**
   * The deployment id of the case definition.
   * @member {String} deploymentId
   */
		exports.prototype["deploymentId"] = undefined;
		/**
   * The tenant id of the case definition.
   * @member {String} tenantId
   */
		exports.prototype["tenantId"] = undefined;
		/**
   * History time to live value of the case definition. Is used within History cleanup.
   * @member {Number} historyTimeToLive
   */
		exports.prototype["historyTimeToLive"] = undefined;



		return exports;
	}));



},{"../ApiClient":16}],54:[function(require,module,exports){
/**
 * Camunda REST API
 * Swagger OpenApi Spec for Camunda REST API.
 *
 * OpenAPI spec version: v7.8.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.3.1
 *
 * Do not edit the class manually.
 *
 */

	(function(root, factory) {
		if (typeof define === "function" && define.amd) {
			// AMD. Register as an anonymous module.
			define(["ApiClient"], factory);
		} else if (typeof module === "object" && module.exports) {
			// CommonJS-like environments that support module.exports, like Node.
			module.exports = factory(require("../ApiClient"));
		} else {
			// Browser globals (root is window)
			if (!root.CamundaRestApi) {
				root.CamundaRestApi = {};
			}
			root.CamundaRestApi.CaseExecutionDto = factory(root.CamundaRestApi.ApiClient);
		}
	}(this, function(ApiClient) {
		"use strict";




		/**
   * The CaseExecutionDto model module.
   * @module model/CaseExecutionDto
   * @version v7.8.0
   */

		/**
   * Constructs a new <code>CaseExecutionDto</code>.
   * @alias module:model/CaseExecutionDto
   * @class
   */
		var exports = function() {
			var _this = this;














		};

		/**
   * Constructs a <code>CaseExecutionDto</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:model/CaseExecutionDto} obj Optional instance to populate.
   * @return {module:model/CaseExecutionDto} The populated <code>CaseExecutionDto</code> instance.
   */
		exports.constructFromObject = function(data, obj) {
			if (data) {
				obj = obj || new exports();

				if (data.hasOwnProperty("id")) {
					obj["id"] = ApiClient.convertToType(data["id"], "String");
				}
				if (data.hasOwnProperty("caseInstanceId")) {
					obj["caseInstanceId"] = ApiClient.convertToType(data["caseInstanceId"], "String");
				}
				if (data.hasOwnProperty("caseDefinitionId")) {
					obj["caseDefinitionId"] = ApiClient.convertToType(data["caseDefinitionId"], "String");
				}
				if (data.hasOwnProperty("activityId")) {
					obj["activityId"] = ApiClient.convertToType(data["activityId"], "String");
				}
				if (data.hasOwnProperty("activityName")) {
					obj["activityName"] = ApiClient.convertToType(data["activityName"], "String");
				}
				if (data.hasOwnProperty("activityType")) {
					obj["activityType"] = ApiClient.convertToType(data["activityType"], "String");
				}
				if (data.hasOwnProperty("activityDescription")) {
					obj["activityDescription"] = ApiClient.convertToType(data["activityDescription"], "String");
				}
				if (data.hasOwnProperty("parentId")) {
					obj["parentId"] = ApiClient.convertToType(data["parentId"], "String");
				}
				if (data.hasOwnProperty("tenantId")) {
					obj["tenantId"] = ApiClient.convertToType(data["tenantId"], "String");
				}
				if (data.hasOwnProperty("required")) {
					obj["required"] = ApiClient.convertToType(data["required"], "Boolean");
				}
				if (data.hasOwnProperty("enabled")) {
					obj["enabled"] = ApiClient.convertToType(data["enabled"], "Boolean");
				}
				if (data.hasOwnProperty("active")) {
					obj["active"] = ApiClient.convertToType(data["active"], "Boolean");
				}
				if (data.hasOwnProperty("disabled")) {
					obj["disabled"] = ApiClient.convertToType(data["disabled"], "Boolean");
				}
			}
			return obj;
		};

		/**
   * The id of the case execution.
   * @member {String} id
   */
		exports.prototype["id"] = undefined;
		/**
   * The id of the case instance this case execution belongs to.
   * @member {String} caseInstanceId
   */
		exports.prototype["caseInstanceId"] = undefined;
		/**
   * The id of the case definition this case execution belongs to.
   * @member {String} caseDefinitionId
   */
		exports.prototype["caseDefinitionId"] = undefined;
		/**
   * The id of the activity this case execution belongs to.
   * @member {String} activityId
   */
		exports.prototype["activityId"] = undefined;
		/**
   * The name of the activity this case execution belongs to.
   * @member {String} activityName
   */
		exports.prototype["activityName"] = undefined;
		/**
   * The type of the activity this case execution belongs to.
   * @member {String} activityType
   */
		exports.prototype["activityType"] = undefined;
		/**
   * The description of the activity this case execution belongs to.
   * @member {String} activityDescription
   */
		exports.prototype["activityDescription"] = undefined;
		/**
   * The id of the parent of this case execution belongs to.
   * @member {String} parentId
   */
		exports.prototype["parentId"] = undefined;
		/**
   * The tenant id of the case execution.
   * @member {String} tenantId
   */
		exports.prototype["tenantId"] = undefined;
		/**
   * @member {Boolean} required
   */
		exports.prototype["required"] = undefined;
		/**
   * @member {Boolean} enabled
   */
		exports.prototype["enabled"] = undefined;
		/**
   * @member {Boolean} active
   */
		exports.prototype["active"] = undefined;
		/**
   * @member {Boolean} disabled
   */
		exports.prototype["disabled"] = undefined;



		return exports;
	}));



},{"../ApiClient":16}],55:[function(require,module,exports){
/**
 * Camunda REST API
 * Swagger OpenApi Spec for Camunda REST API.
 *
 * OpenAPI spec version: v7.8.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.3.1
 *
 * Do not edit the class manually.
 *
 */

	(function(root, factory) {
		if (typeof define === "function" && define.amd) {
			// AMD. Register as an anonymous module.
			define(["ApiClient", "model/SortingDto"], factory);
		} else if (typeof module === "object" && module.exports) {
			// CommonJS-like environments that support module.exports, like Node.
			module.exports = factory(require("../ApiClient"), require("./SortingDto"));
		} else {
			// Browser globals (root is window)
			if (!root.CamundaRestApi) {
				root.CamundaRestApi = {};
			}
			root.CamundaRestApi.CaseExecutionQueryDto = factory(root.CamundaRestApi.ApiClient, root.CamundaRestApi.SortingDto);
		}
	}(this, function(ApiClient, SortingDto) {
		"use strict";




		/**
   * The CaseExecutionQueryDto model module.
   * @module model/CaseExecutionQueryDto
   * @version v7.8.0
   */

		/**
   * Constructs a new <code>CaseExecutionQueryDto</code>.
   * @alias module:model/CaseExecutionQueryDto
   * @class
   */
		var exports = function() {
			var _this = this;


		};

		/**
   * Constructs a <code>CaseExecutionQueryDto</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:model/CaseExecutionQueryDto} obj Optional instance to populate.
   * @return {module:model/CaseExecutionQueryDto} The populated <code>CaseExecutionQueryDto</code> instance.
   */
		exports.constructFromObject = function(data, obj) {
			if (data) {
				obj = obj || new exports();

				if (data.hasOwnProperty("sorting")) {
					obj["sorting"] = ApiClient.convertToType(data["sorting"], [SortingDto]);
				}
			}
			return obj;
		};

		/**
   * @member {Array.<module:model/SortingDto>} sorting
   */
		exports.prototype["sorting"] = undefined;



		return exports;
	}));



},{"../ApiClient":16,"./SortingDto":121}],56:[function(require,module,exports){
/**
 * Camunda REST API
 * Swagger OpenApi Spec for Camunda REST API.
 *
 * OpenAPI spec version: v7.8.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.3.1
 *
 * Do not edit the class manually.
 *
 */

	(function(root, factory) {
		if (typeof define === "function" && define.amd) {
			// AMD. Register as an anonymous module.
			define(["ApiClient", "model/TriggerVariableValueDto", "model/VariableNameDto"], factory);
		} else if (typeof module === "object" && module.exports) {
			// CommonJS-like environments that support module.exports, like Node.
			module.exports = factory(require("../ApiClient"), require("./TriggerVariableValueDto"), require("./VariableNameDto"));
		} else {
			// Browser globals (root is window)
			if (!root.CamundaRestApi) {
				root.CamundaRestApi = {};
			}
			root.CamundaRestApi.CaseExecutionTriggerDto = factory(root.CamundaRestApi.ApiClient, root.CamundaRestApi.TriggerVariableValueDto, root.CamundaRestApi.VariableNameDto);
		}
	}(this, function(ApiClient, TriggerVariableValueDto, VariableNameDto) {
		"use strict";




		/**
   * The CaseExecutionTriggerDto model module.
   * @module model/CaseExecutionTriggerDto
   * @version v7.8.0
   */

		/**
   * Constructs a new <code>CaseExecutionTriggerDto</code>.
   * @alias module:model/CaseExecutionTriggerDto
   * @class
   */
		var exports = function() {
			var _this = this;



		};

		/**
   * Constructs a <code>CaseExecutionTriggerDto</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:model/CaseExecutionTriggerDto} obj Optional instance to populate.
   * @return {module:model/CaseExecutionTriggerDto} The populated <code>CaseExecutionTriggerDto</code> instance.
   */
		exports.constructFromObject = function(data, obj) {
			if (data) {
				obj = obj || new exports();

				if (data.hasOwnProperty("variables")) {
					obj["variables"] = ApiClient.convertToType(data["variables"], {"String": TriggerVariableValueDto});
				}
				if (data.hasOwnProperty("deletions")) {
					obj["deletions"] = ApiClient.convertToType(data["deletions"], [VariableNameDto]);
				}
			}
			return obj;
		};

		/**
   * A JSON object containing variable key-value pairs. Each key is a variable name and each value a JSON variable value object.
   * @member {Object.<String, module:model/TriggerVariableValueDto>} variables
   */
		exports.prototype["variables"] = undefined;
		/**
   * @member {Array.<module:model/VariableNameDto>} deletions
   */
		exports.prototype["deletions"] = undefined;



		return exports;
	}));



},{"../ApiClient":16,"./TriggerVariableValueDto":131,"./VariableNameDto":138}],57:[function(require,module,exports){
/**
 * Camunda REST API
 * Swagger OpenApi Spec for Camunda REST API.
 *
 * OpenAPI spec version: v7.8.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.3.1
 *
 * Do not edit the class manually.
 *
 */

	(function(root, factory) {
		if (typeof define === "function" && define.amd) {
			// AMD. Register as an anonymous module.
			define(["ApiClient", "model/AtomLink"], factory);
		} else if (typeof module === "object" && module.exports) {
			// CommonJS-like environments that support module.exports, like Node.
			module.exports = factory(require("../ApiClient"), require("./AtomLink"));
		} else {
			// Browser globals (root is window)
			if (!root.CamundaRestApi) {
				root.CamundaRestApi = {};
			}
			root.CamundaRestApi.CaseInstanceDto = factory(root.CamundaRestApi.ApiClient, root.CamundaRestApi.AtomLink);
		}
	}(this, function(ApiClient, AtomLink) {
		"use strict";




		/**
   * The CaseInstanceDto model module.
   * @module model/CaseInstanceDto
   * @version v7.8.0
   */

		/**
   * Constructs a new <code>CaseInstanceDto</code>.
   * @alias module:model/CaseInstanceDto
   * @class
   */
		var exports = function() {
			var _this = this;









		};

		/**
   * Constructs a <code>CaseInstanceDto</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:model/CaseInstanceDto} obj Optional instance to populate.
   * @return {module:model/CaseInstanceDto} The populated <code>CaseInstanceDto</code> instance.
   */
		exports.constructFromObject = function(data, obj) {
			if (data) {
				obj = obj || new exports();

				if (data.hasOwnProperty("links")) {
					obj["links"] = ApiClient.convertToType(data["links"], [AtomLink]);
				}
				if (data.hasOwnProperty("id")) {
					obj["id"] = ApiClient.convertToType(data["id"], "String");
				}
				if (data.hasOwnProperty("caseDefinitionId")) {
					obj["caseDefinitionId"] = ApiClient.convertToType(data["caseDefinitionId"], "String");
				}
				if (data.hasOwnProperty("businessKey")) {
					obj["businessKey"] = ApiClient.convertToType(data["businessKey"], "String");
				}
				if (data.hasOwnProperty("tenantId")) {
					obj["tenantId"] = ApiClient.convertToType(data["tenantId"], "String");
				}
				if (data.hasOwnProperty("active")) {
					obj["active"] = ApiClient.convertToType(data["active"], "Boolean");
				}
				if (data.hasOwnProperty("completed")) {
					obj["completed"] = ApiClient.convertToType(data["completed"], "Boolean");
				}
				if (data.hasOwnProperty("terminated")) {
					obj["terminated"] = ApiClient.convertToType(data["terminated"], "Boolean");
				}
			}
			return obj;
		};

		/**
   * @member {Array.<module:model/AtomLink>} links
   */
		exports.prototype["links"] = undefined;
		/**
   * The id of the case instance.
   * @member {String} id
   */
		exports.prototype["id"] = undefined;
		/**
   * The id of the case definition this case instance belongs to.
   * @member {String} caseDefinitionId
   */
		exports.prototype["caseDefinitionId"] = undefined;
		/**
   * The business key of the case instance.
   * @member {String} businessKey
   */
		exports.prototype["businessKey"] = undefined;
		/**
   * The id of the tenant this case instance belongs to.
   * @member {String} tenantId
   */
		exports.prototype["tenantId"] = undefined;
		/**
   * @member {Boolean} active
   */
		exports.prototype["active"] = undefined;
		/**
   * @member {Boolean} completed
   */
		exports.prototype["completed"] = undefined;
		/**
   * @member {Boolean} terminated
   */
		exports.prototype["terminated"] = undefined;



		return exports;
	}));



},{"../ApiClient":16,"./AtomLink":43}],58:[function(require,module,exports){
/**
 * Camunda REST API
 * Swagger OpenApi Spec for Camunda REST API.
 *
 * OpenAPI spec version: v7.8.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.3.1
 *
 * Do not edit the class manually.
 *
 */

	(function(root, factory) {
		if (typeof define === "function" && define.amd) {
			// AMD. Register as an anonymous module.
			define(["ApiClient", "model/AtomLink"], factory);
		} else if (typeof module === "object" && module.exports) {
			// CommonJS-like environments that support module.exports, like Node.
			module.exports = factory(require("../ApiClient"), require("./AtomLink"));
		} else {
			// Browser globals (root is window)
			if (!root.CamundaRestApi) {
				root.CamundaRestApi = {};
			}
			root.CamundaRestApi.CommentDto = factory(root.CamundaRestApi.ApiClient, root.CamundaRestApi.AtomLink);
		}
	}(this, function(ApiClient, AtomLink) {
		"use strict";




		/**
   * The CommentDto model module.
   * @module model/CommentDto
   * @version v7.8.0
   */

		/**
   * Constructs a new <code>CommentDto</code>.
   * @alias module:model/CommentDto
   * @class
   */
		var exports = function() {
			var _this = this;







		};

		/**
   * Constructs a <code>CommentDto</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:model/CommentDto} obj Optional instance to populate.
   * @return {module:model/CommentDto} The populated <code>CommentDto</code> instance.
   */
		exports.constructFromObject = function(data, obj) {
			if (data) {
				obj = obj || new exports();

				if (data.hasOwnProperty("links")) {
					obj["links"] = ApiClient.convertToType(data["links"], [AtomLink]);
				}
				if (data.hasOwnProperty("id")) {
					obj["id"] = ApiClient.convertToType(data["id"], "String");
				}
				if (data.hasOwnProperty("userId")) {
					obj["userId"] = ApiClient.convertToType(data["userId"], "String");
				}
				if (data.hasOwnProperty("time")) {
					obj["time"] = ApiClient.convertToType(data["time"], "Date");
				}
				if (data.hasOwnProperty("taskId")) {
					obj["taskId"] = ApiClient.convertToType(data["taskId"], "String");
				}
				if (data.hasOwnProperty("message")) {
					obj["message"] = ApiClient.convertToType(data["message"], "String");
				}
			}
			return obj;
		};

		/**
   * @member {Array.<module:model/AtomLink>} links
   */
		exports.prototype["links"] = undefined;
		/**
   * The id of the task comment.
   * @member {String} id
   */
		exports.prototype["id"] = undefined;
		/**
   * The id of the user who created the comment.
   * @member {String} userId
   */
		exports.prototype["userId"] = undefined;
		/**
   * The time when the comment was created.
   * @member {Date} time
   */
		exports.prototype["time"] = undefined;
		/**
   * The id of the task to which the comment belongs.
   * @member {String} taskId
   */
		exports.prototype["taskId"] = undefined;
		/**
   * The content of the comment.
   * @member {String} message
   */
		exports.prototype["message"] = undefined;



		return exports;
	}));



},{"../ApiClient":16,"./AtomLink":43}],59:[function(require,module,exports){
/**
 * Camunda REST API
 * Swagger OpenApi Spec for Camunda REST API.
 *
 * OpenAPI spec version: v7.8.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.3.1
 *
 * Do not edit the class manually.
 *
 */

	(function(root, factory) {
		if (typeof define === "function" && define.amd) {
			// AMD. Register as an anonymous module.
			define(["ApiClient", "model/VariableValueDto"], factory);
		} else if (typeof module === "object" && module.exports) {
			// CommonJS-like environments that support module.exports, like Node.
			module.exports = factory(require("../ApiClient"), require("./VariableValueDto"));
		} else {
			// Browser globals (root is window)
			if (!root.CamundaRestApi) {
				root.CamundaRestApi = {};
			}
			root.CamundaRestApi.CompleteExternalTaskDto = factory(root.CamundaRestApi.ApiClient, root.CamundaRestApi.VariableValueDto);
		}
	}(this, function(ApiClient, VariableValueDto) {
		"use strict";




		/**
   * The CompleteExternalTaskDto model module.
   * @module model/CompleteExternalTaskDto
   * @version v7.8.0
   */

		/**
   * Constructs a new <code>CompleteExternalTaskDto</code>.
   * @alias module:model/CompleteExternalTaskDto
   * @class
   */
		var exports = function() {
			var _this = this;



		};

		/**
   * Constructs a <code>CompleteExternalTaskDto</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:model/CompleteExternalTaskDto} obj Optional instance to populate.
   * @return {module:model/CompleteExternalTaskDto} The populated <code>CompleteExternalTaskDto</code> instance.
   */
		exports.constructFromObject = function(data, obj) {
			if (data) {
				obj = obj || new exports();

				if (data.hasOwnProperty("workerId")) {
					obj["workerId"] = ApiClient.convertToType(data["workerId"], "String");
				}
				if (data.hasOwnProperty("variables")) {
					obj["variables"] = ApiClient.convertToType(data["variables"], {"String": VariableValueDto});
				}
			}
			return obj;
		};

		/**
   * The id of the worker that completes the task. Must match the id of the worker who has most recently locked the task.
   * @member {String} workerId
   */
		exports.prototype["workerId"] = undefined;
		/**
   * A JSON object containing variable key-value pairs. Each key is a variable name and each value a JSON variable value object with the following properties:
   * @member {Object.<String, module:model/VariableValueDto>} variables
   */
		exports.prototype["variables"] = undefined;



		return exports;
	}));



},{"../ApiClient":16,"./VariableValueDto":140}],60:[function(require,module,exports){
/**
 * Camunda REST API
 * Swagger OpenApi Spec for Camunda REST API.
 *
 * OpenAPI spec version: v7.8.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.3.1
 *
 * Do not edit the class manually.
 *
 */

	(function(root, factory) {
		if (typeof define === "function" && define.amd) {
			// AMD. Register as an anonymous module.
			define(["ApiClient", "model/VariableValueDto"], factory);
		} else if (typeof module === "object" && module.exports) {
			// CommonJS-like environments that support module.exports, like Node.
			module.exports = factory(require("../ApiClient"), require("./VariableValueDto"));
		} else {
			// Browser globals (root is window)
			if (!root.CamundaRestApi) {
				root.CamundaRestApi = {};
			}
			root.CamundaRestApi.CompleteTaskDto = factory(root.CamundaRestApi.ApiClient, root.CamundaRestApi.VariableValueDto);
		}
	}(this, function(ApiClient, VariableValueDto) {
		"use strict";




		/**
   * The CompleteTaskDto model module.
   * @module model/CompleteTaskDto
   * @version v7.8.0
   */

		/**
   * Constructs a new <code>CompleteTaskDto</code>.
   * @alias module:model/CompleteTaskDto
   * @class
   */
		var exports = function() {
			var _this = this;


		};

		/**
   * Constructs a <code>CompleteTaskDto</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:model/CompleteTaskDto} obj Optional instance to populate.
   * @return {module:model/CompleteTaskDto} The populated <code>CompleteTaskDto</code> instance.
   */
		exports.constructFromObject = function(data, obj) {
			if (data) {
				obj = obj || new exports();

				if (data.hasOwnProperty("variables")) {
					obj["variables"] = ApiClient.convertToType(data["variables"], {"String": VariableValueDto});
				}
			}
			return obj;
		};

		/**
   * A JSON object containing variable key-value pairs. Each key is a variable name and each value a JSON variable value object with the following properties:
   * @member {Object.<String, module:model/VariableValueDto>} variables
   */
		exports.prototype["variables"] = undefined;



		return exports;
	}));



},{"../ApiClient":16,"./VariableValueDto":140}],61:[function(require,module,exports){
/**
 * Camunda REST API
 * Swagger OpenApi Spec for Camunda REST API.
 *
 * OpenAPI spec version: v7.8.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.3.1
 *
 * Do not edit the class manually.
 *
 */

	(function(root, factory) {
		if (typeof define === "function" && define.amd) {
			// AMD. Register as an anonymous module.
			define(["ApiClient", "model/VariableValueDto"], factory);
		} else if (typeof module === "object" && module.exports) {
			// CommonJS-like environments that support module.exports, like Node.
			module.exports = factory(require("../ApiClient"), require("./VariableValueDto"));
		} else {
			// Browser globals (root is window)
			if (!root.CamundaRestApi) {
				root.CamundaRestApi = {};
			}
			root.CamundaRestApi.CorrelationMessageDto = factory(root.CamundaRestApi.ApiClient, root.CamundaRestApi.VariableValueDto);
		}
	}(this, function(ApiClient, VariableValueDto) {
		"use strict";




		/**
   * The CorrelationMessageDto model module.
   * @module model/CorrelationMessageDto
   * @version v7.8.0
   */

		/**
   * Constructs a new <code>CorrelationMessageDto</code>.
   * @alias module:model/CorrelationMessageDto
   * @class
   */
		var exports = function() {
			var _this = this;











		};

		/**
   * Constructs a <code>CorrelationMessageDto</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:model/CorrelationMessageDto} obj Optional instance to populate.
   * @return {module:model/CorrelationMessageDto} The populated <code>CorrelationMessageDto</code> instance.
   */
		exports.constructFromObject = function(data, obj) {
			if (data) {
				obj = obj || new exports();

				if (data.hasOwnProperty("messageName")) {
					obj["messageName"] = ApiClient.convertToType(data["messageName"], "String");
				}
				if (data.hasOwnProperty("businessKey")) {
					obj["businessKey"] = ApiClient.convertToType(data["businessKey"], "String");
				}
				if (data.hasOwnProperty("correlationKeys")) {
					obj["correlationKeys"] = ApiClient.convertToType(data["correlationKeys"], {"String": VariableValueDto});
				}
				if (data.hasOwnProperty("localCorrelationKeys")) {
					obj["localCorrelationKeys"] = ApiClient.convertToType(data["localCorrelationKeys"], {"String": VariableValueDto});
				}
				if (data.hasOwnProperty("processVariables")) {
					obj["processVariables"] = ApiClient.convertToType(data["processVariables"], {"String": VariableValueDto});
				}
				if (data.hasOwnProperty("tenantId")) {
					obj["tenantId"] = ApiClient.convertToType(data["tenantId"], "String");
				}
				if (data.hasOwnProperty("withoutTenantId")) {
					obj["withoutTenantId"] = ApiClient.convertToType(data["withoutTenantId"], "Boolean");
				}
				if (data.hasOwnProperty("processInstanceId")) {
					obj["processInstanceId"] = ApiClient.convertToType(data["processInstanceId"], "String");
				}
				if (data.hasOwnProperty("all")) {
					obj["all"] = ApiClient.convertToType(data["all"], "Boolean");
				}
				if (data.hasOwnProperty("resultEnabled")) {
					obj["resultEnabled"] = ApiClient.convertToType(data["resultEnabled"], "Boolean");
				}
			}
			return obj;
		};

		/**
   * The name of the message to deliver.
   * @member {String} messageName
   */
		exports.prototype["messageName"] = undefined;
		/**
   * Used for correlation of process instances that wait for incoming messages. Will only correlate to executions that belong to a process instance with the provided business key.
   * @member {String} businessKey
   */
		exports.prototype["businessKey"] = undefined;
		/**
   * Used for correlation of process instances that wait for incoming messages. Has to be a JSON object containing key-value pairs that are matched against process instance variables during correlation. Each key is a variable name and each value a JSON variable value object with the following properties.
   * @member {Object.<String, module:model/VariableValueDto>} correlationKeys
   */
		exports.prototype["correlationKeys"] = undefined;
		/**
   * @member {Object.<String, module:model/VariableValueDto>} localCorrelationKeys
   */
		exports.prototype["localCorrelationKeys"] = undefined;
		/**
   * @member {Object.<String, module:model/VariableValueDto>} processVariables
   */
		exports.prototype["processVariables"] = undefined;
		/**
   * Used to correlate the message for a tenant with the given id. Will only correlate to executions and process definitions which belong to the tenant.
   * @member {String} tenantId
   */
		exports.prototype["tenantId"] = undefined;
		/**
   * @member {Boolean} withoutTenantId
   */
		exports.prototype["withoutTenantId"] = undefined;
		/**
   * Used to correlate the message to the process instance with the given id. Must not be supplied in conjunction with a tenantId.
   * @member {String} processInstanceId
   */
		exports.prototype["processInstanceId"] = undefined;
		/**
   * @member {Boolean} all
   */
		exports.prototype["all"] = undefined;
		/**
   * @member {Boolean} resultEnabled
   */
		exports.prototype["resultEnabled"] = undefined;



		return exports;
	}));



},{"../ApiClient":16,"./VariableValueDto":140}],62:[function(require,module,exports){
/**
 * Camunda REST API
 * Swagger OpenApi Spec for Camunda REST API.
 *
 * OpenAPI spec version: v7.8.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.3.1
 *
 * Do not edit the class manually.
 *
 */

	(function(root, factory) {
		if (typeof define === "function" && define.amd) {
			// AMD. Register as an anonymous module.
			define(["ApiClient"], factory);
		} else if (typeof module === "object" && module.exports) {
			// CommonJS-like environments that support module.exports, like Node.
			module.exports = factory(require("../ApiClient"));
		} else {
			// Browser globals (root is window)
			if (!root.CamundaRestApi) {
				root.CamundaRestApi = {};
			}
			root.CamundaRestApi.CountResultDto = factory(root.CamundaRestApi.ApiClient);
		}
	}(this, function(ApiClient) {
		"use strict";




		/**
   * The CountResultDto model module.
   * @module model/CountResultDto
   * @version v7.8.0
   */

		/**
   * Constructs a new <code>CountResultDto</code>.
   * @alias module:model/CountResultDto
   * @class
   */
		var exports = function() {
			var _this = this;


		};

		/**
   * Constructs a <code>CountResultDto</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:model/CountResultDto} obj Optional instance to populate.
   * @return {module:model/CountResultDto} The populated <code>CountResultDto</code> instance.
   */
		exports.constructFromObject = function(data, obj) {
			if (data) {
				obj = obj || new exports();

				if (data.hasOwnProperty("count")) {
					obj["count"] = ApiClient.convertToType(data["count"], "Number");
				}
			}
			return obj;
		};

		/**
   * The number of matching deployments.
   * @member {Number} count
   */
		exports.prototype["count"] = undefined;



		return exports;
	}));



},{"../ApiClient":16}],63:[function(require,module,exports){
/**
 * Camunda REST API
 * Swagger OpenApi Spec for Camunda REST API.
 *
 * OpenAPI spec version: v7.8.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.3.1
 *
 * Do not edit the class manually.
 *
 */

	(function(root, factory) {
		if (typeof define === "function" && define.amd) {
			// AMD. Register as an anonymous module.
			define(["ApiClient", "model/VariableValueDto"], factory);
		} else if (typeof module === "object" && module.exports) {
			// CommonJS-like environments that support module.exports, like Node.
			module.exports = factory(require("../ApiClient"), require("./VariableValueDto"));
		} else {
			// Browser globals (root is window)
			if (!root.CamundaRestApi) {
				root.CamundaRestApi = {};
			}
			root.CamundaRestApi.CreateCaseInstanceDto = factory(root.CamundaRestApi.ApiClient, root.CamundaRestApi.VariableValueDto);
		}
	}(this, function(ApiClient, VariableValueDto) {
		"use strict";




		/**
   * The CreateCaseInstanceDto model module.
   * @module model/CreateCaseInstanceDto
   * @version v7.8.0
   */

		/**
   * Constructs a new <code>CreateCaseInstanceDto</code>.
   * @alias module:model/CreateCaseInstanceDto
   * @class
   */
		var exports = function() {
			var _this = this;



		};

		/**
   * Constructs a <code>CreateCaseInstanceDto</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:model/CreateCaseInstanceDto} obj Optional instance to populate.
   * @return {module:model/CreateCaseInstanceDto} The populated <code>CreateCaseInstanceDto</code> instance.
   */
		exports.constructFromObject = function(data, obj) {
			if (data) {
				obj = obj || new exports();

				if (data.hasOwnProperty("variables")) {
					obj["variables"] = ApiClient.convertToType(data["variables"], {"String": VariableValueDto});
				}
				if (data.hasOwnProperty("businessKey")) {
					obj["businessKey"] = ApiClient.convertToType(data["businessKey"], "String");
				}
			}
			return obj;
		};

		/**
   * A JSON object containing the variables the case instance is to be initialized with. Variable names are property keys of this object and variable values are JSON objects with a value and a type property (see example below). Valid variable values are Boolean, Number, String and Date values.
   * @member {Object.<String, module:model/VariableValueDto>} variables
   */
		exports.prototype["variables"] = undefined;
		/**
   * The business key the case instance is to be initialized with. The business key uniquely identifies the case instance in the context of the given case definition.
   * @member {String} businessKey
   */
		exports.prototype["businessKey"] = undefined;



		return exports;
	}));



},{"../ApiClient":16,"./VariableValueDto":140}],64:[function(require,module,exports){
/**
 * Camunda REST API
 * Swagger OpenApi Spec for Camunda REST API.
 *
 * OpenAPI spec version: v7.8.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.3.1
 *
 * Do not edit the class manually.
 *
 */

	(function(root, factory) {
		if (typeof define === "function" && define.amd) {
			// AMD. Register as an anonymous module.
			define(["ApiClient"], factory);
		} else if (typeof module === "object" && module.exports) {
			// CommonJS-like environments that support module.exports, like Node.
			module.exports = factory(require("../ApiClient"));
		} else {
			// Browser globals (root is window)
			if (!root.CamundaRestApi) {
				root.CamundaRestApi = {};
			}
			root.CamundaRestApi.DecisionDefinitionDiagramDto = factory(root.CamundaRestApi.ApiClient);
		}
	}(this, function(ApiClient) {
		"use strict";




		/**
   * The DecisionDefinitionDiagramDto model module.
   * @module model/DecisionDefinitionDiagramDto
   * @version v7.8.0
   */

		/**
   * Constructs a new <code>DecisionDefinitionDiagramDto</code>.
   * @alias module:model/DecisionDefinitionDiagramDto
   * @class
   */
		var exports = function() {
			var _this = this;



		};

		/**
   * Constructs a <code>DecisionDefinitionDiagramDto</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:model/DecisionDefinitionDiagramDto} obj Optional instance to populate.
   * @return {module:model/DecisionDefinitionDiagramDto} The populated <code>DecisionDefinitionDiagramDto</code> instance.
   */
		exports.constructFromObject = function(data, obj) {
			if (data) {
				obj = obj || new exports();

				if (data.hasOwnProperty("id")) {
					obj["id"] = ApiClient.convertToType(data["id"], "String");
				}
				if (data.hasOwnProperty("dmnXml")) {
					obj["dmnXml"] = ApiClient.convertToType(data["dmnXml"], "String");
				}
			}
			return obj;
		};

		/**
   * The id of the decision definition.
   * @member {String} id
   */
		exports.prototype["id"] = undefined;
		/**
   * An escaped XML string containing the XML that this decision definition was deployed with. Carriage returns, line feeds and quotation marks are escaped.
   * @member {String} dmnXml
   */
		exports.prototype["dmnXml"] = undefined;



		return exports;
	}));



},{"../ApiClient":16}],65:[function(require,module,exports){
/**
 * Camunda REST API
 * Swagger OpenApi Spec for Camunda REST API.
 *
 * OpenAPI spec version: v7.8.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.3.1
 *
 * Do not edit the class manually.
 *
 */

	(function(root, factory) {
		if (typeof define === "function" && define.amd) {
			// AMD. Register as an anonymous module.
			define(["ApiClient"], factory);
		} else if (typeof module === "object" && module.exports) {
			// CommonJS-like environments that support module.exports, like Node.
			module.exports = factory(require("../ApiClient"));
		} else {
			// Browser globals (root is window)
			if (!root.CamundaRestApi) {
				root.CamundaRestApi = {};
			}
			root.CamundaRestApi.DecisionDefinitionDto = factory(root.CamundaRestApi.ApiClient);
		}
	}(this, function(ApiClient) {
		"use strict";




		/**
   * The DecisionDefinitionDto model module.
   * @module model/DecisionDefinitionDto
   * @version v7.8.0
   */

		/**
   * Constructs a new <code>DecisionDefinitionDto</code>.
   * @alias module:model/DecisionDefinitionDto
   * @class
   */
		var exports = function() {
			var _this = this;













		};

		/**
   * Constructs a <code>DecisionDefinitionDto</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:model/DecisionDefinitionDto} obj Optional instance to populate.
   * @return {module:model/DecisionDefinitionDto} The populated <code>DecisionDefinitionDto</code> instance.
   */
		exports.constructFromObject = function(data, obj) {
			if (data) {
				obj = obj || new exports();

				if (data.hasOwnProperty("id")) {
					obj["id"] = ApiClient.convertToType(data["id"], "String");
				}
				if (data.hasOwnProperty("key")) {
					obj["key"] = ApiClient.convertToType(data["key"], "String");
				}
				if (data.hasOwnProperty("category")) {
					obj["category"] = ApiClient.convertToType(data["category"], "String");
				}
				if (data.hasOwnProperty("name")) {
					obj["name"] = ApiClient.convertToType(data["name"], "String");
				}
				if (data.hasOwnProperty("version")) {
					obj["version"] = ApiClient.convertToType(data["version"], "Number");
				}
				if (data.hasOwnProperty("resource")) {
					obj["resource"] = ApiClient.convertToType(data["resource"], "String");
				}
				if (data.hasOwnProperty("deploymentId")) {
					obj["deploymentId"] = ApiClient.convertToType(data["deploymentId"], "String");
				}
				if (data.hasOwnProperty("tenantId")) {
					obj["tenantId"] = ApiClient.convertToType(data["tenantId"], "String");
				}
				if (data.hasOwnProperty("decisionRequirementsDefinitionId")) {
					obj["decisionRequirementsDefinitionId"] = ApiClient.convertToType(data["decisionRequirementsDefinitionId"], "String");
				}
				if (data.hasOwnProperty("decisionRequirementsDefinitionKey")) {
					obj["decisionRequirementsDefinitionKey"] = ApiClient.convertToType(data["decisionRequirementsDefinitionKey"], "String");
				}
				if (data.hasOwnProperty("historyTimeToLive")) {
					obj["historyTimeToLive"] = ApiClient.convertToType(data["historyTimeToLive"], "Number");
				}
				if (data.hasOwnProperty("versionTag")) {
					obj["versionTag"] = ApiClient.convertToType(data["versionTag"], "String");
				}
			}
			return obj;
		};

		/**
   * The id of the decision definition.
   * @member {String} id
   */
		exports.prototype["id"] = undefined;
		/**
   * The key of the decision definition, i.e., the id of the DMN 1.0 XML decision definition.
   * @member {String} key
   */
		exports.prototype["key"] = undefined;
		/**
   * The category of the decision definition.
   * @member {String} category
   */
		exports.prototype["category"] = undefined;
		/**
   * The name of the decision definition.
   * @member {String} name
   */
		exports.prototype["name"] = undefined;
		/**
   * The version of the decision definition that the engine assigned to it.
   * @member {Number} version
   */
		exports.prototype["version"] = undefined;
		/**
   * The file name of the decision definition.
   * @member {String} resource
   */
		exports.prototype["resource"] = undefined;
		/**
   * The deployment id of the decision definition.
   * @member {String} deploymentId
   */
		exports.prototype["deploymentId"] = undefined;
		/**
   * The tenant id of the decision definition.
   * @member {String} tenantId
   */
		exports.prototype["tenantId"] = undefined;
		/**
   * The id of the decision requirements definition this decision definition belongs to.
   * @member {String} decisionRequirementsDefinitionId
   */
		exports.prototype["decisionRequirementsDefinitionId"] = undefined;
		/**
   * The key of the decision requirements definition this decision definition belongs to.
   * @member {String} decisionRequirementsDefinitionKey
   */
		exports.prototype["decisionRequirementsDefinitionKey"] = undefined;
		/**
   * History time to live value of the decision definition. Is used within History cleanup.
   * @member {Number} historyTimeToLive
   */
		exports.prototype["historyTimeToLive"] = undefined;
		/**
   * @member {String} versionTag
   */
		exports.prototype["versionTag"] = undefined;



		return exports;
	}));



},{"../ApiClient":16}],66:[function(require,module,exports){
/**
 * Camunda REST API
 * Swagger OpenApi Spec for Camunda REST API.
 *
 * OpenAPI spec version: v7.8.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.3.1
 *
 * Do not edit the class manually.
 *
 */

	(function(root, factory) {
		if (typeof define === "function" && define.amd) {
			// AMD. Register as an anonymous module.
			define(["ApiClient", "model/HistoricProcessInstanceQueryDto", "model/ProcessInstanceQueryDto"], factory);
		} else if (typeof module === "object" && module.exports) {
			// CommonJS-like environments that support module.exports, like Node.
			module.exports = factory(require("../ApiClient"), require("./HistoricProcessInstanceQueryDto"), require("./ProcessInstanceQueryDto"));
		} else {
			// Browser globals (root is window)
			if (!root.CamundaRestApi) {
				root.CamundaRestApi = {};
			}
			root.CamundaRestApi.DeleteProcessInstancesDto = factory(root.CamundaRestApi.ApiClient, root.CamundaRestApi.HistoricProcessInstanceQueryDto, root.CamundaRestApi.ProcessInstanceQueryDto);
		}
	}(this, function(ApiClient, HistoricProcessInstanceQueryDto, ProcessInstanceQueryDto) {
		"use strict";




		/**
   * The DeleteProcessInstancesDto model module.
   * @module model/DeleteProcessInstancesDto
   * @version v7.8.0
   */

		/**
   * Constructs a new <code>DeleteProcessInstancesDto</code>.
   * @alias module:model/DeleteProcessInstancesDto
   * @class
   */
		var exports = function() {
			var _this = this;







		};

		/**
   * Constructs a <code>DeleteProcessInstancesDto</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:model/DeleteProcessInstancesDto} obj Optional instance to populate.
   * @return {module:model/DeleteProcessInstancesDto} The populated <code>DeleteProcessInstancesDto</code> instance.
   */
		exports.constructFromObject = function(data, obj) {
			if (data) {
				obj = obj || new exports();

				if (data.hasOwnProperty("processInstanceIds")) {
					obj["processInstanceIds"] = ApiClient.convertToType(data["processInstanceIds"], ["String"]);
				}
				if (data.hasOwnProperty("processInstanceQuery")) {
					obj["processInstanceQuery"] = ProcessInstanceQueryDto.constructFromObject(data["processInstanceQuery"]);
				}
				if (data.hasOwnProperty("deleteReason")) {
					obj["deleteReason"] = ApiClient.convertToType(data["deleteReason"], "String");
				}
				if (data.hasOwnProperty("skipCustomListeners")) {
					obj["skipCustomListeners"] = ApiClient.convertToType(data["skipCustomListeners"], "Boolean");
				}
				if (data.hasOwnProperty("historicProcessInstanceQuery")) {
					obj["historicProcessInstanceQuery"] = HistoricProcessInstanceQueryDto.constructFromObject(data["historicProcessInstanceQuery"]);
				}
				if (data.hasOwnProperty("skipSubprocesses")) {
					obj["skipSubprocesses"] = ApiClient.convertToType(data["skipSubprocesses"], "Boolean");
				}
			}
			return obj;
		};

		/**
   * A list process instance ids to delete.
   * @member {Array.<String>} processInstanceIds
   */
		exports.prototype["processInstanceIds"] = undefined;
		/**
   * A process instance query like the request body described by POST /process-instance .
   * @member {module:model/ProcessInstanceQueryDto} processInstanceQuery
   */
		exports.prototype["processInstanceQuery"] = undefined;
		/**
   * A string with delete reason.
   * @member {String} deleteReason
   */
		exports.prototype["deleteReason"] = undefined;
		/**
   * @member {Boolean} skipCustomListeners
   */
		exports.prototype["skipCustomListeners"] = undefined;
		/**
   * A historic process instance query like the request body described by POST /history/process-instance .
   * @member {module:model/HistoricProcessInstanceQueryDto} historicProcessInstanceQuery
   */
		exports.prototype["historicProcessInstanceQuery"] = undefined;
		/**
   * @member {Boolean} skipSubprocesses
   */
		exports.prototype["skipSubprocesses"] = undefined;



		return exports;
	}));



},{"../ApiClient":16,"./HistoricProcessInstanceQueryDto":84,"./ProcessInstanceQueryDto":113}],67:[function(require,module,exports){
/**
 * Camunda REST API
 * Swagger OpenApi Spec for Camunda REST API.
 *
 * OpenAPI spec version: v7.8.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.3.1
 *
 * Do not edit the class manually.
 *
 */

	(function(root, factory) {
		if (typeof define === "function" && define.amd) {
			// AMD. Register as an anonymous module.
			define(["ApiClient", "model/AtomLink"], factory);
		} else if (typeof module === "object" && module.exports) {
			// CommonJS-like environments that support module.exports, like Node.
			module.exports = factory(require("../ApiClient"), require("./AtomLink"));
		} else {
			// Browser globals (root is window)
			if (!root.CamundaRestApi) {
				root.CamundaRestApi = {};
			}
			root.CamundaRestApi.DeploymentDto = factory(root.CamundaRestApi.ApiClient, root.CamundaRestApi.AtomLink);
		}
	}(this, function(ApiClient, AtomLink) {
		"use strict";




		/**
   * The DeploymentDto model module.
   * @module model/DeploymentDto
   * @version v7.8.0
   */

		/**
   * Constructs a new <code>DeploymentDto</code>.
   * @alias module:model/DeploymentDto
   * @class
   */
		var exports = function() {
			var _this = this;







		};

		/**
   * Constructs a <code>DeploymentDto</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:model/DeploymentDto} obj Optional instance to populate.
   * @return {module:model/DeploymentDto} The populated <code>DeploymentDto</code> instance.
   */
		exports.constructFromObject = function(data, obj) {
			if (data) {
				obj = obj || new exports();

				if (data.hasOwnProperty("links")) {
					obj["links"] = ApiClient.convertToType(data["links"], [AtomLink]);
				}
				if (data.hasOwnProperty("id")) {
					obj["id"] = ApiClient.convertToType(data["id"], "String");
				}
				if (data.hasOwnProperty("name")) {
					obj["name"] = ApiClient.convertToType(data["name"], "String");
				}
				if (data.hasOwnProperty("source")) {
					obj["source"] = ApiClient.convertToType(data["source"], "String");
				}
				if (data.hasOwnProperty("deploymentTime")) {
					obj["deploymentTime"] = ApiClient.convertToType(data["deploymentTime"], "Date");
				}
				if (data.hasOwnProperty("tenantId")) {
					obj["tenantId"] = ApiClient.convertToType(data["tenantId"], "String");
				}
			}
			return obj;
		};

		/**
   * @member {Array.<module:model/AtomLink>} links
   */
		exports.prototype["links"] = undefined;
		/**
   * The id of the deployment.
   * @member {String} id
   */
		exports.prototype["id"] = undefined;
		/**
   * The name of the deployment.
   * @member {String} name
   */
		exports.prototype["name"] = undefined;
		/**
   * The source of the deployment.
   * @member {String} source
   */
		exports.prototype["source"] = undefined;
		/**
   * The date and time of the deployment.
   * @member {Date} deploymentTime
   */
		exports.prototype["deploymentTime"] = undefined;
		/**
   * The tenant id of the deployment.
   * @member {String} tenantId
   */
		exports.prototype["tenantId"] = undefined;



		return exports;
	}));



},{"../ApiClient":16,"./AtomLink":43}],68:[function(require,module,exports){
/**
 * Camunda REST API
 * Swagger OpenApi Spec for Camunda REST API.
 *
 * OpenAPI spec version: v7.8.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.3.1
 *
 * Do not edit the class manually.
 *
 */

	(function(root, factory) {
		if (typeof define === "function" && define.amd) {
			// AMD. Register as an anonymous module.
			define(["ApiClient"], factory);
		} else if (typeof module === "object" && module.exports) {
			// CommonJS-like environments that support module.exports, like Node.
			module.exports = factory(require("../ApiClient"));
		} else {
			// Browser globals (root is window)
			if (!root.CamundaRestApi) {
				root.CamundaRestApi = {};
			}
			root.CamundaRestApi.DeploymentResourceDto = factory(root.CamundaRestApi.ApiClient);
		}
	}(this, function(ApiClient) {
		"use strict";




		/**
   * The DeploymentResourceDto model module.
   * @module model/DeploymentResourceDto
   * @version v7.8.0
   */

		/**
   * Constructs a new <code>DeploymentResourceDto</code>.
   * @alias module:model/DeploymentResourceDto
   * @class
   */
		var exports = function() {
			var _this = this;




		};

		/**
   * Constructs a <code>DeploymentResourceDto</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:model/DeploymentResourceDto} obj Optional instance to populate.
   * @return {module:model/DeploymentResourceDto} The populated <code>DeploymentResourceDto</code> instance.
   */
		exports.constructFromObject = function(data, obj) {
			if (data) {
				obj = obj || new exports();

				if (data.hasOwnProperty("id")) {
					obj["id"] = ApiClient.convertToType(data["id"], "String");
				}
				if (data.hasOwnProperty("name")) {
					obj["name"] = ApiClient.convertToType(data["name"], "String");
				}
				if (data.hasOwnProperty("deploymentId")) {
					obj["deploymentId"] = ApiClient.convertToType(data["deploymentId"], "String");
				}
			}
			return obj;
		};

		/**
   * The id of the deployment resource.
   * @member {String} id
   */
		exports.prototype["id"] = undefined;
		/**
   * The name of the deployment resource.
   * @member {String} name
   */
		exports.prototype["name"] = undefined;
		/**
   * The id of the deployment.
   * @member {String} deploymentId
   */
		exports.prototype["deploymentId"] = undefined;



		return exports;
	}));



},{"../ApiClient":16}],69:[function(require,module,exports){
/**
 * Camunda REST API
 * Swagger OpenApi Spec for Camunda REST API.
 *
 * OpenAPI spec version: v7.8.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.3.1
 *
 * Do not edit the class manually.
 *
 */

	(function(root, factory) {
		if (typeof define === "function" && define.amd) {
			// AMD. Register as an anonymous module.
			define(["ApiClient", "model/VariableValueDto"], factory);
		} else if (typeof module === "object" && module.exports) {
			// CommonJS-like environments that support module.exports, like Node.
			module.exports = factory(require("../ApiClient"), require("./VariableValueDto"));
		} else {
			// Browser globals (root is window)
			if (!root.CamundaRestApi) {
				root.CamundaRestApi = {};
			}
			root.CamundaRestApi.EvaluateDecisionDto = factory(root.CamundaRestApi.ApiClient, root.CamundaRestApi.VariableValueDto);
		}
	}(this, function(ApiClient, VariableValueDto) {
		"use strict";




		/**
   * The EvaluateDecisionDto model module.
   * @module model/EvaluateDecisionDto
   * @version v7.8.0
   */

		/**
   * Constructs a new <code>EvaluateDecisionDto</code>.
   * @alias module:model/EvaluateDecisionDto
   * @class
   */
		var exports = function() {
			var _this = this;


		};

		/**
   * Constructs a <code>EvaluateDecisionDto</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:model/EvaluateDecisionDto} obj Optional instance to populate.
   * @return {module:model/EvaluateDecisionDto} The populated <code>EvaluateDecisionDto</code> instance.
   */
		exports.constructFromObject = function(data, obj) {
			if (data) {
				obj = obj || new exports();

				if (data.hasOwnProperty("variables")) {
					obj["variables"] = ApiClient.convertToType(data["variables"], {"String": VariableValueDto});
				}
			}
			return obj;
		};

		/**
   * A JSON object containing the variables the decision is to be evaluated with. Each key corresponds to a variable name and each value to a variable value. A variable value is a JSON object with the following properties:
   * @member {Object.<String, module:model/VariableValueDto>} variables
   */
		exports.prototype["variables"] = undefined;



		return exports;
	}));



},{"../ApiClient":16,"./VariableValueDto":140}],70:[function(require,module,exports){
/**
 * Camunda REST API
 * Swagger OpenApi Spec for Camunda REST API.
 *
 * OpenAPI spec version: v7.8.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.3.1
 *
 * Do not edit the class manually.
 *
 */

	(function(root, factory) {
		if (typeof define === "function" && define.amd) {
			// AMD. Register as an anonymous module.
			define(["ApiClient"], factory);
		} else if (typeof module === "object" && module.exports) {
			// CommonJS-like environments that support module.exports, like Node.
			module.exports = factory(require("../ApiClient"));
		} else {
			// Browser globals (root is window)
			if (!root.CamundaRestApi) {
				root.CamundaRestApi = {};
			}
			root.CamundaRestApi.EventSubscriptionDto = factory(root.CamundaRestApi.ApiClient);
		}
	}(this, function(ApiClient) {
		"use strict";




		/**
   * The EventSubscriptionDto model module.
   * @module model/EventSubscriptionDto
   * @version v7.8.0
   */

		/**
   * Constructs a new <code>EventSubscriptionDto</code>.
   * @alias module:model/EventSubscriptionDto
   * @class
   */
		var exports = function() {
			var _this = this;









		};

		/**
   * Constructs a <code>EventSubscriptionDto</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:model/EventSubscriptionDto} obj Optional instance to populate.
   * @return {module:model/EventSubscriptionDto} The populated <code>EventSubscriptionDto</code> instance.
   */
		exports.constructFromObject = function(data, obj) {
			if (data) {
				obj = obj || new exports();

				if (data.hasOwnProperty("id")) {
					obj["id"] = ApiClient.convertToType(data["id"], "String");
				}
				if (data.hasOwnProperty("eventType")) {
					obj["eventType"] = ApiClient.convertToType(data["eventType"], "String");
				}
				if (data.hasOwnProperty("eventName")) {
					obj["eventName"] = ApiClient.convertToType(data["eventName"], "String");
				}
				if (data.hasOwnProperty("executionId")) {
					obj["executionId"] = ApiClient.convertToType(data["executionId"], "String");
				}
				if (data.hasOwnProperty("processInstanceId")) {
					obj["processInstanceId"] = ApiClient.convertToType(data["processInstanceId"], "String");
				}
				if (data.hasOwnProperty("activityId")) {
					obj["activityId"] = ApiClient.convertToType(data["activityId"], "String");
				}
				if (data.hasOwnProperty("createdDate")) {
					obj["createdDate"] = ApiClient.convertToType(data["createdDate"], "Date");
				}
				if (data.hasOwnProperty("tenantId")) {
					obj["tenantId"] = ApiClient.convertToType(data["tenantId"], "String");
				}
			}
			return obj;
		};

		/**
   * The identifier of the event subscription.
   * @member {String} id
   */
		exports.prototype["id"] = undefined;
		/**
   * The type of the event. message for message events.
   * @member {String} eventType
   */
		exports.prototype["eventType"] = undefined;
		/**
   * The name of the event the subscription belongs to, as defined in the process model.
   * @member {String} eventName
   */
		exports.prototype["eventName"] = undefined;
		/**
   * The id of the execution the subscription belongs to.
   * @member {String} executionId
   */
		exports.prototype["executionId"] = undefined;
		/**
   * The id of the process instance the subscription belongs to.
   * @member {String} processInstanceId
   */
		exports.prototype["processInstanceId"] = undefined;
		/**
   * The id of the activity that the event subscription belongs to. Corresponds to the id in the process model.
   * @member {String} activityId
   */
		exports.prototype["activityId"] = undefined;
		/**
   * The time the subscription was created by the engine. Format yyyy-MM-dd'T'HH:mm:ss.
   * @member {Date} createdDate
   */
		exports.prototype["createdDate"] = undefined;
		/**
   * The id of the tenant the subscription belongs to.
   * @member {String} tenantId
   */
		exports.prototype["tenantId"] = undefined;



		return exports;
	}));



},{"../ApiClient":16}],71:[function(require,module,exports){
/**
 * Camunda REST API
 * Swagger OpenApi Spec for Camunda REST API.
 *
 * OpenAPI spec version: v7.8.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.3.1
 *
 * Do not edit the class manually.
 *
 */

	(function(root, factory) {
		if (typeof define === "function" && define.amd) {
			// AMD. Register as an anonymous module.
			define(["ApiClient"], factory);
		} else if (typeof module === "object" && module.exports) {
			// CommonJS-like environments that support module.exports, like Node.
			module.exports = factory(require("../ApiClient"));
		} else {
			// Browser globals (root is window)
			if (!root.CamundaRestApi) {
				root.CamundaRestApi = {};
			}
			root.CamundaRestApi.ExecutionDto = factory(root.CamundaRestApi.ApiClient);
		}
	}(this, function(ApiClient) {
		"use strict";




		/**
   * The ExecutionDto model module.
   * @module model/ExecutionDto
   * @version v7.8.0
   */

		/**
   * Constructs a new <code>ExecutionDto</code>.
   * @alias module:model/ExecutionDto
   * @class
   */
		var exports = function() {
			var _this = this;





		};

		/**
   * Constructs a <code>ExecutionDto</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:model/ExecutionDto} obj Optional instance to populate.
   * @return {module:model/ExecutionDto} The populated <code>ExecutionDto</code> instance.
   */
		exports.constructFromObject = function(data, obj) {
			if (data) {
				obj = obj || new exports();

				if (data.hasOwnProperty("id")) {
					obj["id"] = ApiClient.convertToType(data["id"], "String");
				}
				if (data.hasOwnProperty("processInstanceId")) {
					obj["processInstanceId"] = ApiClient.convertToType(data["processInstanceId"], "String");
				}
				if (data.hasOwnProperty("ended")) {
					obj["ended"] = ApiClient.convertToType(data["ended"], "Boolean");
				}
				if (data.hasOwnProperty("tenantId")) {
					obj["tenantId"] = ApiClient.convertToType(data["tenantId"], "String");
				}
			}
			return obj;
		};

		/**
   * The id of the execution.
   * @member {String} id
   */
		exports.prototype["id"] = undefined;
		/**
   * The id of the process instance that this execution instance belongs to.
   * @member {String} processInstanceId
   */
		exports.prototype["processInstanceId"] = undefined;
		/**
   * @member {Boolean} ended
   */
		exports.prototype["ended"] = undefined;
		/**
   * The tenant id of the execution.
   * @member {String} tenantId
   */
		exports.prototype["tenantId"] = undefined;



		return exports;
	}));



},{"../ApiClient":16}],72:[function(require,module,exports){
/**
 * Camunda REST API
 * Swagger OpenApi Spec for Camunda REST API.
 *
 * OpenAPI spec version: v7.8.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.3.1
 *
 * Do not edit the class manually.
 *
 */

	(function(root, factory) {
		if (typeof define === "function" && define.amd) {
			// AMD. Register as an anonymous module.
			define(["ApiClient", "model/SortingDto"], factory);
		} else if (typeof module === "object" && module.exports) {
			// CommonJS-like environments that support module.exports, like Node.
			module.exports = factory(require("../ApiClient"), require("./SortingDto"));
		} else {
			// Browser globals (root is window)
			if (!root.CamundaRestApi) {
				root.CamundaRestApi = {};
			}
			root.CamundaRestApi.ExecutionQueryDto = factory(root.CamundaRestApi.ApiClient, root.CamundaRestApi.SortingDto);
		}
	}(this, function(ApiClient, SortingDto) {
		"use strict";




		/**
   * The ExecutionQueryDto model module.
   * @module model/ExecutionQueryDto
   * @version v7.8.0
   */

		/**
   * Constructs a new <code>ExecutionQueryDto</code>.
   * @alias module:model/ExecutionQueryDto
   * @class
   */
		var exports = function() {
			var _this = this;


		};

		/**
   * Constructs a <code>ExecutionQueryDto</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:model/ExecutionQueryDto} obj Optional instance to populate.
   * @return {module:model/ExecutionQueryDto} The populated <code>ExecutionQueryDto</code> instance.
   */
		exports.constructFromObject = function(data, obj) {
			if (data) {
				obj = obj || new exports();

				if (data.hasOwnProperty("sorting")) {
					obj["sorting"] = ApiClient.convertToType(data["sorting"], [SortingDto]);
				}
			}
			return obj;
		};

		/**
   * @member {Array.<module:model/SortingDto>} sorting
   */
		exports.prototype["sorting"] = undefined;



		return exports;
	}));



},{"../ApiClient":16,"./SortingDto":121}],73:[function(require,module,exports){
/**
 * Camunda REST API
 * Swagger OpenApi Spec for Camunda REST API.
 *
 * OpenAPI spec version: v7.8.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.3.1
 *
 * Do not edit the class manually.
 *
 */

	(function(root, factory) {
		if (typeof define === "function" && define.amd) {
			// AMD. Register as an anonymous module.
			define(["ApiClient", "model/VariableValueDto"], factory);
		} else if (typeof module === "object" && module.exports) {
			// CommonJS-like environments that support module.exports, like Node.
			module.exports = factory(require("../ApiClient"), require("./VariableValueDto"));
		} else {
			// Browser globals (root is window)
			if (!root.CamundaRestApi) {
				root.CamundaRestApi = {};
			}
			root.CamundaRestApi.ExecutionTriggerDto = factory(root.CamundaRestApi.ApiClient, root.CamundaRestApi.VariableValueDto);
		}
	}(this, function(ApiClient, VariableValueDto) {
		"use strict";




		/**
   * The ExecutionTriggerDto model module.
   * @module model/ExecutionTriggerDto
   * @version v7.8.0
   */

		/**
   * Constructs a new <code>ExecutionTriggerDto</code>.
   * @alias module:model/ExecutionTriggerDto
   * @class
   */
		var exports = function() {
			var _this = this;


		};

		/**
   * Constructs a <code>ExecutionTriggerDto</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:model/ExecutionTriggerDto} obj Optional instance to populate.
   * @return {module:model/ExecutionTriggerDto} The populated <code>ExecutionTriggerDto</code> instance.
   */
		exports.constructFromObject = function(data, obj) {
			if (data) {
				obj = obj || new exports();

				if (data.hasOwnProperty("variables")) {
					obj["variables"] = ApiClient.convertToType(data["variables"], {"String": VariableValueDto});
				}
			}
			return obj;
		};

		/**
   * A JSON object containing variable key-value pairs. Each key is a variable name and each value a JSON variable value object.
   * @member {Object.<String, module:model/VariableValueDto>} variables
   */
		exports.prototype["variables"] = undefined;



		return exports;
	}));



},{"../ApiClient":16,"./VariableValueDto":140}],74:[function(require,module,exports){
/**
 * Camunda REST API
 * Swagger OpenApi Spec for Camunda REST API.
 *
 * OpenAPI spec version: v7.8.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.3.1
 *
 * Do not edit the class manually.
 *
 */

	(function(root, factory) {
		if (typeof define === "function" && define.amd) {
			// AMD. Register as an anonymous module.
			define(["ApiClient"], factory);
		} else if (typeof module === "object" && module.exports) {
			// CommonJS-like environments that support module.exports, like Node.
			module.exports = factory(require("../ApiClient"));
		} else {
			// Browser globals (root is window)
			if (!root.CamundaRestApi) {
				root.CamundaRestApi = {};
			}
			root.CamundaRestApi.ExternalTaskBpmnError = factory(root.CamundaRestApi.ApiClient);
		}
	}(this, function(ApiClient) {
		"use strict";




		/**
   * The ExternalTaskBpmnError model module.
   * @module model/ExternalTaskBpmnError
   * @version v7.8.0
   */

		/**
   * Constructs a new <code>ExternalTaskBpmnError</code>.
   * @alias module:model/ExternalTaskBpmnError
   * @class
   */
		var exports = function() {
			var _this = this;



		};

		/**
   * Constructs a <code>ExternalTaskBpmnError</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:model/ExternalTaskBpmnError} obj Optional instance to populate.
   * @return {module:model/ExternalTaskBpmnError} The populated <code>ExternalTaskBpmnError</code> instance.
   */
		exports.constructFromObject = function(data, obj) {
			if (data) {
				obj = obj || new exports();

				if (data.hasOwnProperty("workerId")) {
					obj["workerId"] = ApiClient.convertToType(data["workerId"], "String");
				}
				if (data.hasOwnProperty("errorCode")) {
					obj["errorCode"] = ApiClient.convertToType(data["errorCode"], "String");
				}
			}
			return obj;
		};

		/**
   * @member {String} workerId
   */
		exports.prototype["workerId"] = undefined;
		/**
   * @member {String} errorCode
   */
		exports.prototype["errorCode"] = undefined;



		return exports;
	}));



},{"../ApiClient":16}],75:[function(require,module,exports){
/**
 * Camunda REST API
 * Swagger OpenApi Spec for Camunda REST API.
 *
 * OpenAPI spec version: v7.8.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.3.1
 *
 * Do not edit the class manually.
 *
 */

	(function(root, factory) {
		if (typeof define === "function" && define.amd) {
			// AMD. Register as an anonymous module.
			define(["ApiClient"], factory);
		} else if (typeof module === "object" && module.exports) {
			// CommonJS-like environments that support module.exports, like Node.
			module.exports = factory(require("../ApiClient"));
		} else {
			// Browser globals (root is window)
			if (!root.CamundaRestApi) {
				root.CamundaRestApi = {};
			}
			root.CamundaRestApi.ExternalTaskDto = factory(root.CamundaRestApi.ApiClient);
		}
	}(this, function(ApiClient) {
		"use strict";




		/**
   * The ExternalTaskDto model module.
   * @module model/ExternalTaskDto
   * @version v7.8.0
   */

		/**
   * Constructs a new <code>ExternalTaskDto</code>.
   * @alias module:model/ExternalTaskDto
   * @class
   */
		var exports = function() {
			var _this = this;

















		};

		/**
   * Constructs a <code>ExternalTaskDto</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:model/ExternalTaskDto} obj Optional instance to populate.
   * @return {module:model/ExternalTaskDto} The populated <code>ExternalTaskDto</code> instance.
   */
		exports.constructFromObject = function(data, obj) {
			if (data) {
				obj = obj || new exports();

				if (data.hasOwnProperty("activityId")) {
					obj["activityId"] = ApiClient.convertToType(data["activityId"], "String");
				}
				if (data.hasOwnProperty("activityInstanceId")) {
					obj["activityInstanceId"] = ApiClient.convertToType(data["activityInstanceId"], "String");
				}
				if (data.hasOwnProperty("errorMessage")) {
					obj["errorMessage"] = ApiClient.convertToType(data["errorMessage"], "String");
				}
				if (data.hasOwnProperty("errorDetails")) {
					obj["errorDetails"] = ApiClient.convertToType(data["errorDetails"], "String");
				}
				if (data.hasOwnProperty("executionId")) {
					obj["executionId"] = ApiClient.convertToType(data["executionId"], "String");
				}
				if (data.hasOwnProperty("id")) {
					obj["id"] = ApiClient.convertToType(data["id"], "String");
				}
				if (data.hasOwnProperty("lockExpirationTime")) {
					obj["lockExpirationTime"] = ApiClient.convertToType(data["lockExpirationTime"], "Date");
				}
				if (data.hasOwnProperty("processDefinitionId")) {
					obj["processDefinitionId"] = ApiClient.convertToType(data["processDefinitionId"], "String");
				}
				if (data.hasOwnProperty("processDefinitionKey")) {
					obj["processDefinitionKey"] = ApiClient.convertToType(data["processDefinitionKey"], "String");
				}
				if (data.hasOwnProperty("processInstanceId")) {
					obj["processInstanceId"] = ApiClient.convertToType(data["processInstanceId"], "String");
				}
				if (data.hasOwnProperty("retries")) {
					obj["retries"] = ApiClient.convertToType(data["retries"], "Number");
				}
				if (data.hasOwnProperty("suspended")) {
					obj["suspended"] = ApiClient.convertToType(data["suspended"], "Boolean");
				}
				if (data.hasOwnProperty("workerId")) {
					obj["workerId"] = ApiClient.convertToType(data["workerId"], "String");
				}
				if (data.hasOwnProperty("topicName")) {
					obj["topicName"] = ApiClient.convertToType(data["topicName"], "String");
				}
				if (data.hasOwnProperty("tenantId")) {
					obj["tenantId"] = ApiClient.convertToType(data["tenantId"], "String");
				}
				if (data.hasOwnProperty("priority")) {
					obj["priority"] = ApiClient.convertToType(data["priority"], "Number");
				}
			}
			return obj;
		};

		/**
   * The id of the activity that this external task belongs to.
   * @member {String} activityId
   */
		exports.prototype["activityId"] = undefined;
		/**
   * The id of the activity instance that the external task belongs to.
   * @member {String} activityInstanceId
   */
		exports.prototype["activityInstanceId"] = undefined;
		/**
   * The error message that was supplied when the last failure of this task was reported.
   * @member {String} errorMessage
   */
		exports.prototype["errorMessage"] = undefined;
		/**
   * @member {String} errorDetails
   */
		exports.prototype["errorDetails"] = undefined;
		/**
   * The id of the execution that the external task belongs to.
   * @member {String} executionId
   */
		exports.prototype["executionId"] = undefined;
		/**
   * The id of the external task.
   * @member {String} id
   */
		exports.prototype["id"] = undefined;
		/**
   * The date that the task's most recent lock expires or has expired.
   * @member {Date} lockExpirationTime
   */
		exports.prototype["lockExpirationTime"] = undefined;
		/**
   * The id of the process definition the external task is defined in.
   * @member {String} processDefinitionId
   */
		exports.prototype["processDefinitionId"] = undefined;
		/**
   * The key of the process definition the external task is defined in.
   * @member {String} processDefinitionKey
   */
		exports.prototype["processDefinitionKey"] = undefined;
		/**
   * The id of the process instance the external task belongs to.
   * @member {String} processInstanceId
   */
		exports.prototype["processInstanceId"] = undefined;
		/**
   * The number of retries the task currently has left.
   * @member {Number} retries
   */
		exports.prototype["retries"] = undefined;
		/**
   * @member {Boolean} suspended
   */
		exports.prototype["suspended"] = undefined;
		/**
   * The id of the worker that posesses or posessed the most recent lock.
   * @member {String} workerId
   */
		exports.prototype["workerId"] = undefined;
		/**
   * The topic name of the external task.
   * @member {String} topicName
   */
		exports.prototype["topicName"] = undefined;
		/**
   * The id of the tenant the external task belongs to.
   * @member {String} tenantId
   */
		exports.prototype["tenantId"] = undefined;
		/**
   * The priority of the external task.
   * @member {Number} priority
   */
		exports.prototype["priority"] = undefined;



		return exports;
	}));



},{"../ApiClient":16}],76:[function(require,module,exports){
/**
 * Camunda REST API
 * Swagger OpenApi Spec for Camunda REST API.
 *
 * OpenAPI spec version: v7.8.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.3.1
 *
 * Do not edit the class manually.
 *
 */

	(function(root, factory) {
		if (typeof define === "function" && define.amd) {
			// AMD. Register as an anonymous module.
			define(["ApiClient"], factory);
		} else if (typeof module === "object" && module.exports) {
			// CommonJS-like environments that support module.exports, like Node.
			module.exports = factory(require("../ApiClient"));
		} else {
			// Browser globals (root is window)
			if (!root.CamundaRestApi) {
				root.CamundaRestApi = {};
			}
			root.CamundaRestApi.ExternalTaskFailureDto = factory(root.CamundaRestApi.ApiClient);
		}
	}(this, function(ApiClient) {
		"use strict";




		/**
   * The ExternalTaskFailureDto model module.
   * @module model/ExternalTaskFailureDto
   * @version v7.8.0
   */

		/**
   * Constructs a new <code>ExternalTaskFailureDto</code>.
   * @alias module:model/ExternalTaskFailureDto
   * @class
   */
		var exports = function() {
			var _this = this;






		};

		/**
   * Constructs a <code>ExternalTaskFailureDto</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:model/ExternalTaskFailureDto} obj Optional instance to populate.
   * @return {module:model/ExternalTaskFailureDto} The populated <code>ExternalTaskFailureDto</code> instance.
   */
		exports.constructFromObject = function(data, obj) {
			if (data) {
				obj = obj || new exports();

				if (data.hasOwnProperty("workerId")) {
					obj["workerId"] = ApiClient.convertToType(data["workerId"], "String");
				}
				if (data.hasOwnProperty("errorMessage")) {
					obj["errorMessage"] = ApiClient.convertToType(data["errorMessage"], "String");
				}
				if (data.hasOwnProperty("errorDetails")) {
					obj["errorDetails"] = ApiClient.convertToType(data["errorDetails"], "String");
				}
				if (data.hasOwnProperty("retryTimeout")) {
					obj["retryTimeout"] = ApiClient.convertToType(data["retryTimeout"], "Number");
				}
				if (data.hasOwnProperty("retries")) {
					obj["retries"] = ApiClient.convertToType(data["retries"], "Number");
				}
			}
			return obj;
		};

		/**
   * The id of the worker that reports the failure. Must match the id of the worker who has most recently locked the task.
   * @member {String} workerId
   */
		exports.prototype["workerId"] = undefined;
		/**
   * An message indicating the reason of the failure.
   * @member {String} errorMessage
   */
		exports.prototype["errorMessage"] = undefined;
		/**
   * A detailed error description.
   * @member {String} errorDetails
   */
		exports.prototype["errorDetails"] = undefined;
		/**
   * A timeout in milliseconds before the external task becomes available again for fetching. Must be >= 0.
   * @member {Number} retryTimeout
   */
		exports.prototype["retryTimeout"] = undefined;
		/**
   * A number of how often the task should be retried. Must be >= 0. If this is 0, an incident is created and the task cannot be fetched anymore unless the retries are increased again. The incident's message is set to the errorMessage parameter.
   * @member {Number} retries
   */
		exports.prototype["retries"] = undefined;



		return exports;
	}));



},{"../ApiClient":16}],77:[function(require,module,exports){
/**
 * Camunda REST API
 * Swagger OpenApi Spec for Camunda REST API.
 *
 * OpenAPI spec version: v7.8.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.3.1
 *
 * Do not edit the class manually.
 *
 */

	(function(root, factory) {
		if (typeof define === "function" && define.amd) {
			// AMD. Register as an anonymous module.
			define(["ApiClient", "model/SortingDto"], factory);
		} else if (typeof module === "object" && module.exports) {
			// CommonJS-like environments that support module.exports, like Node.
			module.exports = factory(require("../ApiClient"), require("./SortingDto"));
		} else {
			// Browser globals (root is window)
			if (!root.CamundaRestApi) {
				root.CamundaRestApi = {};
			}
			root.CamundaRestApi.ExternalTaskQueryDto = factory(root.CamundaRestApi.ApiClient, root.CamundaRestApi.SortingDto);
		}
	}(this, function(ApiClient, SortingDto) {
		"use strict";




		/**
   * The ExternalTaskQueryDto model module.
   * @module model/ExternalTaskQueryDto
   * @version v7.8.0
   */

		/**
   * Constructs a new <code>ExternalTaskQueryDto</code>.
   * @alias module:model/ExternalTaskQueryDto
   * @class
   */
		var exports = function() {
			var _this = this;



		};

		/**
   * Constructs a <code>ExternalTaskQueryDto</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:model/ExternalTaskQueryDto} obj Optional instance to populate.
   * @return {module:model/ExternalTaskQueryDto} The populated <code>ExternalTaskQueryDto</code> instance.
   */
		exports.constructFromObject = function(data, obj) {
			if (data) {
				obj = obj || new exports();

				if (data.hasOwnProperty("processDefinitionId")) {
					obj["processDefinitionId"] = ApiClient.convertToType(data["processDefinitionId"], "String");
				}
				if (data.hasOwnProperty("sorting")) {
					obj["sorting"] = ApiClient.convertToType(data["sorting"], [SortingDto]);
				}
			}
			return obj;
		};

		/**
   * Filter by the id of the process definition that an external task belongs to.
   * @member {String} processDefinitionId
   */
		exports.prototype["processDefinitionId"] = undefined;
		/**
   * @member {Array.<module:model/SortingDto>} sorting
   */
		exports.prototype["sorting"] = undefined;



		return exports;
	}));



},{"../ApiClient":16,"./SortingDto":121}],78:[function(require,module,exports){
/**
 * Camunda REST API
 * Swagger OpenApi Spec for Camunda REST API.
 *
 * OpenAPI spec version: v7.8.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.3.1
 *
 * Do not edit the class manually.
 *
 */

	(function(root, factory) {
		if (typeof define === "function" && define.amd) {
			// AMD. Register as an anonymous module.
			define(["ApiClient"], factory);
		} else if (typeof module === "object" && module.exports) {
			// CommonJS-like environments that support module.exports, like Node.
			module.exports = factory(require("../ApiClient"));
		} else {
			// Browser globals (root is window)
			if (!root.CamundaRestApi) {
				root.CamundaRestApi = {};
			}
			root.CamundaRestApi.FetchExternalTaskTopicDto = factory(root.CamundaRestApi.ApiClient);
		}
	}(this, function(ApiClient) {
		"use strict";




		/**
   * The FetchExternalTaskTopicDto model module.
   * @module model/FetchExternalTaskTopicDto
   * @version v7.8.0
   */

		/**
   * Constructs a new <code>FetchExternalTaskTopicDto</code>.
   * @alias module:model/FetchExternalTaskTopicDto
   * @class
   */
		var exports = function() {
			var _this = this;





		};

		/**
   * Constructs a <code>FetchExternalTaskTopicDto</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:model/FetchExternalTaskTopicDto} obj Optional instance to populate.
   * @return {module:model/FetchExternalTaskTopicDto} The populated <code>FetchExternalTaskTopicDto</code> instance.
   */
		exports.constructFromObject = function(data, obj) {
			if (data) {
				obj = obj || new exports();

				if (data.hasOwnProperty("topicName")) {
					obj["topicName"] = ApiClient.convertToType(data["topicName"], "String");
				}
				if (data.hasOwnProperty("lockDuration")) {
					obj["lockDuration"] = ApiClient.convertToType(data["lockDuration"], "Number");
				}
				if (data.hasOwnProperty("variables")) {
					obj["variables"] = ApiClient.convertToType(data["variables"], ["String"]);
				}
				if (data.hasOwnProperty("deserializeValues")) {
					obj["deserializeValues"] = ApiClient.convertToType(data["deserializeValues"], "Boolean");
				}
			}
			return obj;
		};

		/**
   * @member {String} topicName
   */
		exports.prototype["topicName"] = undefined;
		/**
   * @member {Number} lockDuration
   */
		exports.prototype["lockDuration"] = undefined;
		/**
   * @member {Array.<String>} variables
   */
		exports.prototype["variables"] = undefined;
		/**
   * @member {Boolean} deserializeValues
   */
		exports.prototype["deserializeValues"] = undefined;



		return exports;
	}));



},{"../ApiClient":16}],79:[function(require,module,exports){
/**
 * Camunda REST API
 * Swagger OpenApi Spec for Camunda REST API.
 *
 * OpenAPI spec version: v7.8.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.3.1
 *
 * Do not edit the class manually.
 *
 */

	(function(root, factory) {
		if (typeof define === "function" && define.amd) {
			// AMD. Register as an anonymous module.
			define(["ApiClient", "model/FetchExternalTaskTopicDto"], factory);
		} else if (typeof module === "object" && module.exports) {
			// CommonJS-like environments that support module.exports, like Node.
			module.exports = factory(require("../ApiClient"), require("./FetchExternalTaskTopicDto"));
		} else {
			// Browser globals (root is window)
			if (!root.CamundaRestApi) {
				root.CamundaRestApi = {};
			}
			root.CamundaRestApi.FetchExternalTasksDto = factory(root.CamundaRestApi.ApiClient, root.CamundaRestApi.FetchExternalTaskTopicDto);
		}
	}(this, function(ApiClient, FetchExternalTaskTopicDto) {
		"use strict";




		/**
   * The FetchExternalTasksDto model module.
   * @module model/FetchExternalTasksDto
   * @version v7.8.0
   */

		/**
   * Constructs a new <code>FetchExternalTasksDto</code>.
   * @alias module:model/FetchExternalTasksDto
   * @class
   */
		var exports = function() {
			var _this = this;





		};

		/**
   * Constructs a <code>FetchExternalTasksDto</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:model/FetchExternalTasksDto} obj Optional instance to populate.
   * @return {module:model/FetchExternalTasksDto} The populated <code>FetchExternalTasksDto</code> instance.
   */
		exports.constructFromObject = function(data, obj) {
			if (data) {
				obj = obj || new exports();

				if (data.hasOwnProperty("maxTasks")) {
					obj["maxTasks"] = ApiClient.convertToType(data["maxTasks"], "Number");
				}
				if (data.hasOwnProperty("workerId")) {
					obj["workerId"] = ApiClient.convertToType(data["workerId"], "String");
				}
				if (data.hasOwnProperty("usePriority")) {
					obj["usePriority"] = ApiClient.convertToType(data["usePriority"], "Boolean");
				}
				if (data.hasOwnProperty("topics")) {
					obj["topics"] = ApiClient.convertToType(data["topics"], [FetchExternalTaskTopicDto]);
				}
			}
			return obj;
		};

		/**
   * Mandatory. The maximum number of tasks to return.
   * @member {Number} maxTasks
   */
		exports.prototype["maxTasks"] = undefined;
		/**
   * Mandatory. The id of the worker on which behalf tasks are fetched. The returned tasks are locked for that worker and can only be completed when providing the same worker id.
   * @member {String} workerId
   */
		exports.prototype["workerId"] = undefined;
		/**
   * @member {Boolean} usePriority
   */
		exports.prototype["usePriority"] = undefined;
		/**
   * A JSON array of topic objects for which external tasks should be fetched. The returned tasks may be arbitrarily distributed among these topics. Each topic object has the following properties: Name Description topicName Mandatory. The topic's name. lockDuration Mandatory. The duration to lock the external tasks for in milliseconds. variables A JSON array of String values that represent variable names. For each result task belonging to this topic, the given variables are returned as well if they are accessible from the external task's execution. If not provided - all variables will be fetched. deserializeValues Determines whether serializable variable values (typically variables that store custom Java objects) should be deserialized on server side (default false).
   * @member {Array.<module:model/FetchExternalTaskTopicDto>} topics
   */
		exports.prototype["topics"] = undefined;



		return exports;
	}));



},{"../ApiClient":16,"./FetchExternalTaskTopicDto":78}],80:[function(require,module,exports){
/**
 * Camunda REST API
 * Swagger OpenApi Spec for Camunda REST API.
 *
 * OpenAPI spec version: v7.8.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.3.1
 *
 * Do not edit the class manually.
 *
 */

	(function(root, factory) {
		if (typeof define === "function" && define.amd) {
			// AMD. Register as an anonymous module.
			define(["ApiClient", "model/AbstractQueryDtoObject"], factory);
		} else if (typeof module === "object" && module.exports) {
			// CommonJS-like environments that support module.exports, like Node.
			module.exports = factory(require("../ApiClient"), require("./AbstractQueryDtoObject"));
		} else {
			// Browser globals (root is window)
			if (!root.CamundaRestApi) {
				root.CamundaRestApi = {};
			}
			root.CamundaRestApi.FilterDto = factory(root.CamundaRestApi.ApiClient, root.CamundaRestApi.AbstractQueryDtoObject);
		}
	}(this, function(ApiClient, AbstractQueryDtoObject) {
		"use strict";




		/**
   * The FilterDto model module.
   * @module model/FilterDto
   * @version v7.8.0
   */

		/**
   * Constructs a new <code>FilterDto</code>.
   * @alias module:model/FilterDto
   * @class
   */
		var exports = function() {
			var _this = this;








		};

		/**
   * Constructs a <code>FilterDto</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:model/FilterDto} obj Optional instance to populate.
   * @return {module:model/FilterDto} The populated <code>FilterDto</code> instance.
   */
		exports.constructFromObject = function(data, obj) {
			if (data) {
				obj = obj || new exports();

				if (data.hasOwnProperty("id")) {
					obj["id"] = ApiClient.convertToType(data["id"], "String");
				}
				if (data.hasOwnProperty("resourceType")) {
					obj["resourceType"] = ApiClient.convertToType(data["resourceType"], "String");
				}
				if (data.hasOwnProperty("name")) {
					obj["name"] = ApiClient.convertToType(data["name"], "String");
				}
				if (data.hasOwnProperty("owner")) {
					obj["owner"] = ApiClient.convertToType(data["owner"], "String");
				}
				if (data.hasOwnProperty("query")) {
					obj["query"] = AbstractQueryDtoObject.constructFromObject(data["query"]);
				}
				if (data.hasOwnProperty("properties")) {
					obj["properties"] = ApiClient.convertToType(data["properties"], {"String": Object});
				}
				if (data.hasOwnProperty("itemCount")) {
					obj["itemCount"] = ApiClient.convertToType(data["itemCount"], "Number");
				}
			}
			return obj;
		};

		/**
   * The id of the filter.
   * @member {String} id
   */
		exports.prototype["id"] = undefined;
		/**
   * The resource type of the filter, e.g., Task.
   * @member {String} resourceType
   */
		exports.prototype["resourceType"] = undefined;
		/**
   * The name of the filter.
   * @member {String} name
   */
		exports.prototype["name"] = undefined;
		/**
   * The user id of the owner of the filter.
   * @member {String} owner
   */
		exports.prototype["owner"] = undefined;
		/**
   * The save query of the filter as JSON object.
   * @member {module:model/AbstractQueryDtoObject} query
   */
		exports.prototype["query"] = undefined;
		/**
   * The properties of the filter as JSON object.
   * @member {Object.<String, Object>} properties
   */
		exports.prototype["properties"] = undefined;
		/**
   * The number of items matched by the filter itself. Note: Only exists if the query parameter itemCount was set to true
   * @member {Number} itemCount
   */
		exports.prototype["itemCount"] = undefined;



		return exports;
	}));



},{"../ApiClient":16,"./AbstractQueryDtoObject":41}],81:[function(require,module,exports){
/**
 * Camunda REST API
 * Swagger OpenApi Spec for Camunda REST API.
 *
 * OpenAPI spec version: v7.8.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.3.1
 *
 * Do not edit the class manually.
 *
 */

	(function(root, factory) {
		if (typeof define === "function" && define.amd) {
			// AMD. Register as an anonymous module.
			define(["ApiClient"], factory);
		} else if (typeof module === "object" && module.exports) {
			// CommonJS-like environments that support module.exports, like Node.
			module.exports = factory(require("../ApiClient"));
		} else {
			// Browser globals (root is window)
			if (!root.CamundaRestApi) {
				root.CamundaRestApi = {};
			}
			root.CamundaRestApi.FormDto = factory(root.CamundaRestApi.ApiClient);
		}
	}(this, function(ApiClient) {
		"use strict";




		/**
   * The FormDto model module.
   * @module model/FormDto
   * @version v7.8.0
   */

		/**
   * Constructs a new <code>FormDto</code>.
   * @alias module:model/FormDto
   * @class
   */
		var exports = function() {
			var _this = this;



		};

		/**
   * Constructs a <code>FormDto</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:model/FormDto} obj Optional instance to populate.
   * @return {module:model/FormDto} The populated <code>FormDto</code> instance.
   */
		exports.constructFromObject = function(data, obj) {
			if (data) {
				obj = obj || new exports();

				if (data.hasOwnProperty("key")) {
					obj["key"] = ApiClient.convertToType(data["key"], "String");
				}
				if (data.hasOwnProperty("contextPath")) {
					obj["contextPath"] = ApiClient.convertToType(data["contextPath"], "String");
				}
			}
			return obj;
		};

		/**
   * The form key for the task.
   * @member {String} key
   */
		exports.prototype["key"] = undefined;
		/**
   * The process application's context path the task belongs to. If the task does not belong to a process application deployment or a process definition at all, this property is not set.
   * @member {String} contextPath
   */
		exports.prototype["contextPath"] = undefined;



		return exports;
	}));



},{"../ApiClient":16}],82:[function(require,module,exports){
/**
 * Camunda REST API
 * Swagger OpenApi Spec for Camunda REST API.
 *
 * OpenAPI spec version: v7.8.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.3.1
 *
 * Do not edit the class manually.
 *
 */

	(function(root, factory) {
		if (typeof define === "function" && define.amd) {
			// AMD. Register as an anonymous module.
			define(["ApiClient"], factory);
		} else if (typeof module === "object" && module.exports) {
			// CommonJS-like environments that support module.exports, like Node.
			module.exports = factory(require("../ApiClient"));
		} else {
			// Browser globals (root is window)
			if (!root.CamundaRestApi) {
				root.CamundaRestApi = {};
			}
			root.CamundaRestApi.GroupDto = factory(root.CamundaRestApi.ApiClient);
		}
	}(this, function(ApiClient) {
		"use strict";




		/**
   * The GroupDto model module.
   * @module model/GroupDto
   * @version v7.8.0
   */

		/**
   * Constructs a new <code>GroupDto</code>.
   * @alias module:model/GroupDto
   * @class
   */
		var exports = function() {
			var _this = this;



		};

		/**
   * Constructs a <code>GroupDto</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:model/GroupDto} obj Optional instance to populate.
   * @return {module:model/GroupDto} The populated <code>GroupDto</code> instance.
   */
		exports.constructFromObject = function(data, obj) {
			if (data) {
				obj = obj || new exports();

				if (data.hasOwnProperty("id")) {
					obj["id"] = ApiClient.convertToType(data["id"], "String");
				}
				if (data.hasOwnProperty("name")) {
					obj["name"] = ApiClient.convertToType(data["name"], "String");
				}
			}
			return obj;
		};

		/**
   * @member {String} id
   */
		exports.prototype["id"] = undefined;
		/**
   * @member {String} name
   */
		exports.prototype["name"] = undefined;



		return exports;
	}));



},{"../ApiClient":16}],83:[function(require,module,exports){
/**
 * Camunda REST API
 * Swagger OpenApi Spec for Camunda REST API.
 *
 * OpenAPI spec version: v7.8.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.3.1
 *
 * Do not edit the class manually.
 *
 */

	(function(root, factory) {
		if (typeof define === "function" && define.amd) {
			// AMD. Register as an anonymous module.
			define(["ApiClient", "model/GroupDto", "model/UserDto"], factory);
		} else if (typeof module === "object" && module.exports) {
			// CommonJS-like environments that support module.exports, like Node.
			module.exports = factory(require("../ApiClient"), require("./GroupDto"), require("./UserDto"));
		} else {
			// Browser globals (root is window)
			if (!root.CamundaRestApi) {
				root.CamundaRestApi = {};
			}
			root.CamundaRestApi.GroupInfoDto = factory(root.CamundaRestApi.ApiClient, root.CamundaRestApi.GroupDto, root.CamundaRestApi.UserDto);
		}
	}(this, function(ApiClient, GroupDto, UserDto) {
		"use strict";




		/**
   * The GroupInfoDto model module.
   * @module model/GroupInfoDto
   * @version v7.8.0
   */

		/**
   * Constructs a new <code>GroupInfoDto</code>.
   * @alias module:model/GroupInfoDto
   * @class
   */
		var exports = function() {
			var _this = this;



		};

		/**
   * Constructs a <code>GroupInfoDto</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:model/GroupInfoDto} obj Optional instance to populate.
   * @return {module:model/GroupInfoDto} The populated <code>GroupInfoDto</code> instance.
   */
		exports.constructFromObject = function(data, obj) {
			if (data) {
				obj = obj || new exports();

				if (data.hasOwnProperty("groups")) {
					obj["groups"] = ApiClient.convertToType(data["groups"], [GroupDto]);
				}
				if (data.hasOwnProperty("groupUsers")) {
					obj["groupUsers"] = ApiClient.convertToType(data["groupUsers"], [UserDto]);
				}
			}
			return obj;
		};

		/**
   * A JSON array of group object. Every group object has a id property and a name property.
   * @member {Array.<module:model/GroupDto>} groups
   */
		exports.prototype["groups"] = undefined;
		/**
   * A JSON array that contains all users that are member in one of the groups. Every user object has four properties: id, firstName, lastName and displayName. The displayName is the id, if firstName and lastName are null and firstName lastName otherwise.
   * @member {Array.<module:model/UserDto>} groupUsers
   */
		exports.prototype["groupUsers"] = undefined;



		return exports;
	}));



},{"../ApiClient":16,"./GroupDto":82,"./UserDto":133}],84:[function(require,module,exports){
/**
 * Camunda REST API
 * Swagger OpenApi Spec for Camunda REST API.
 *
 * OpenAPI spec version: v7.8.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.3.1
 *
 * Do not edit the class manually.
 *
 */

	(function(root, factory) {
		if (typeof define === "function" && define.amd) {
			// AMD. Register as an anonymous module.
			define(["ApiClient", "model/SortingDto"], factory);
		} else if (typeof module === "object" && module.exports) {
			// CommonJS-like environments that support module.exports, like Node.
			module.exports = factory(require("../ApiClient"), require("./SortingDto"));
		} else {
			// Browser globals (root is window)
			if (!root.CamundaRestApi) {
				root.CamundaRestApi = {};
			}
			root.CamundaRestApi.HistoricProcessInstanceQueryDto = factory(root.CamundaRestApi.ApiClient, root.CamundaRestApi.SortingDto);
		}
	}(this, function(ApiClient, SortingDto) {
		"use strict";




		/**
   * The HistoricProcessInstanceQueryDto model module.
   * @module model/HistoricProcessInstanceQueryDto
   * @version v7.8.0
   */

		/**
   * Constructs a new <code>HistoricProcessInstanceQueryDto</code>.
   * @alias module:model/HistoricProcessInstanceQueryDto
   * @class
   */
		var exports = function() {
			var _this = this;




		};

		/**
   * Constructs a <code>HistoricProcessInstanceQueryDto</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:model/HistoricProcessInstanceQueryDto} obj Optional instance to populate.
   * @return {module:model/HistoricProcessInstanceQueryDto} The populated <code>HistoricProcessInstanceQueryDto</code> instance.
   */
		exports.constructFromObject = function(data, obj) {
			if (data) {
				obj = obj || new exports();

				if (data.hasOwnProperty("processDefinitionId")) {
					obj["processDefinitionId"] = ApiClient.convertToType(data["processDefinitionId"], "String");
				}
				if (data.hasOwnProperty("incidentType")) {
					obj["incidentType"] = ApiClient.convertToType(data["incidentType"], "String");
				}
				if (data.hasOwnProperty("sorting")) {
					obj["sorting"] = ApiClient.convertToType(data["sorting"], [SortingDto]);
				}
			}
			return obj;
		};

		/**
   * Filter by the process definition the instances run on.
   * @member {String} processDefinitionId
   */
		exports.prototype["processDefinitionId"] = undefined;
		/**
   * Filter by the incident type. See the User Guide for a list of incident types.
   * @member {String} incidentType
   */
		exports.prototype["incidentType"] = undefined;
		/**
   * @member {Array.<module:model/SortingDto>} sorting
   */
		exports.prototype["sorting"] = undefined;



		return exports;
	}));



},{"../ApiClient":16,"./SortingDto":121}],85:[function(require,module,exports){
/**
 * Camunda REST API
 * Swagger OpenApi Spec for Camunda REST API.
 *
 * OpenAPI spec version: v7.8.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.3.1
 *
 * Do not edit the class manually.
 *
 */

	(function(root, factory) {
		if (typeof define === "function" && define.amd) {
			// AMD. Register as an anonymous module.
			define(["ApiClient"], factory);
		} else if (typeof module === "object" && module.exports) {
			// CommonJS-like environments that support module.exports, like Node.
			module.exports = factory(require("../ApiClient"));
		} else {
			// Browser globals (root is window)
			if (!root.CamundaRestApi) {
				root.CamundaRestApi = {};
			}
			root.CamundaRestApi.HistoryTimeToLiveDto = factory(root.CamundaRestApi.ApiClient);
		}
	}(this, function(ApiClient) {
		"use strict";




		/**
   * The HistoryTimeToLiveDto model module.
   * @module model/HistoryTimeToLiveDto
   * @version v7.8.0
   */

		/**
   * Constructs a new <code>HistoryTimeToLiveDto</code>.
   * @alias module:model/HistoryTimeToLiveDto
   * @class
   */
		var exports = function() {
			var _this = this;


		};

		/**
   * Constructs a <code>HistoryTimeToLiveDto</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:model/HistoryTimeToLiveDto} obj Optional instance to populate.
   * @return {module:model/HistoryTimeToLiveDto} The populated <code>HistoryTimeToLiveDto</code> instance.
   */
		exports.constructFromObject = function(data, obj) {
			if (data) {
				obj = obj || new exports();

				if (data.hasOwnProperty("historyTimeToLive")) {
					obj["historyTimeToLive"] = ApiClient.convertToType(data["historyTimeToLive"], "Number");
				}
			}
			return obj;
		};

		/**
   * New value for historyTimeToLive field of case definition. Can be null.
   * @member {Number} historyTimeToLive
   */
		exports.prototype["historyTimeToLive"] = undefined;



		return exports;
	}));



},{"../ApiClient":16}],86:[function(require,module,exports){
/**
 * Camunda REST API
 * Swagger OpenApi Spec for Camunda REST API.
 *
 * OpenAPI spec version: v7.8.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.3.1
 *
 * Do not edit the class manually.
 *
 */

	(function(root, factory) {
		if (typeof define === "function" && define.amd) {
			// AMD. Register as an anonymous module.
			define(["ApiClient"], factory);
		} else if (typeof module === "object" && module.exports) {
			// CommonJS-like environments that support module.exports, like Node.
			module.exports = factory(require("../ApiClient"));
		} else {
			// Browser globals (root is window)
			if (!root.CamundaRestApi) {
				root.CamundaRestApi = {};
			}
			root.CamundaRestApi.IdentityLinkDto = factory(root.CamundaRestApi.ApiClient);
		}
	}(this, function(ApiClient) {
		"use strict";




		/**
   * The IdentityLinkDto model module.
   * @module model/IdentityLinkDto
   * @version v7.8.0
   */

		/**
   * Constructs a new <code>IdentityLinkDto</code>.
   * @alias module:model/IdentityLinkDto
   * @class
   */
		var exports = function() {
			var _this = this;




		};

		/**
   * Constructs a <code>IdentityLinkDto</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:model/IdentityLinkDto} obj Optional instance to populate.
   * @return {module:model/IdentityLinkDto} The populated <code>IdentityLinkDto</code> instance.
   */
		exports.constructFromObject = function(data, obj) {
			if (data) {
				obj = obj || new exports();

				if (data.hasOwnProperty("userId")) {
					obj["userId"] = ApiClient.convertToType(data["userId"], "String");
				}
				if (data.hasOwnProperty("groupId")) {
					obj["groupId"] = ApiClient.convertToType(data["groupId"], "String");
				}
				if (data.hasOwnProperty("type")) {
					obj["type"] = ApiClient.convertToType(data["type"], "String");
				}
			}
			return obj;
		};

		/**
   * The id of the user to link to the task. If you set this parameter, you have to omit groupId.
   * @member {String} userId
   */
		exports.prototype["userId"] = undefined;
		/**
   * The id of the group to link to the task. If you set this parameter, you have to omit userId.
   * @member {String} groupId
   */
		exports.prototype["groupId"] = undefined;
		/**
   * Sets the type of the link. Must be provided.
   * @member {String} type
   */
		exports.prototype["type"] = undefined;



		return exports;
	}));



},{"../ApiClient":16}],87:[function(require,module,exports){
/**
 * Camunda REST API
 * Swagger OpenApi Spec for Camunda REST API.
 *
 * OpenAPI spec version: v7.8.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.3.1
 *
 * Do not edit the class manually.
 *
 */

	(function(root, factory) {
		if (typeof define === "function" && define.amd) {
			// AMD. Register as an anonymous module.
			define(["ApiClient"], factory);
		} else if (typeof module === "object" && module.exports) {
			// CommonJS-like environments that support module.exports, like Node.
			module.exports = factory(require("../ApiClient"));
		} else {
			// Browser globals (root is window)
			if (!root.CamundaRestApi) {
				root.CamundaRestApi = {};
			}
			root.CamundaRestApi.IncidentDto = factory(root.CamundaRestApi.ApiClient);
		}
	}(this, function(ApiClient) {
		"use strict";




		/**
   * The IncidentDto model module.
   * @module model/IncidentDto
   * @version v7.8.0
   */

		/**
   * Constructs a new <code>IncidentDto</code>.
   * @alias module:model/IncidentDto
   * @class
   */
		var exports = function() {
			var _this = this;














		};

		/**
   * Constructs a <code>IncidentDto</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:model/IncidentDto} obj Optional instance to populate.
   * @return {module:model/IncidentDto} The populated <code>IncidentDto</code> instance.
   */
		exports.constructFromObject = function(data, obj) {
			if (data) {
				obj = obj || new exports();

				if (data.hasOwnProperty("id")) {
					obj["id"] = ApiClient.convertToType(data["id"], "String");
				}
				if (data.hasOwnProperty("processDefinitionId")) {
					obj["processDefinitionId"] = ApiClient.convertToType(data["processDefinitionId"], "String");
				}
				if (data.hasOwnProperty("processInstanceId")) {
					obj["processInstanceId"] = ApiClient.convertToType(data["processInstanceId"], "String");
				}
				if (data.hasOwnProperty("executionId")) {
					obj["executionId"] = ApiClient.convertToType(data["executionId"], "String");
				}
				if (data.hasOwnProperty("incidentTimestamp")) {
					obj["incidentTimestamp"] = ApiClient.convertToType(data["incidentTimestamp"], "Date");
				}
				if (data.hasOwnProperty("incidentType")) {
					obj["incidentType"] = ApiClient.convertToType(data["incidentType"], "String");
				}
				if (data.hasOwnProperty("activityId")) {
					obj["activityId"] = ApiClient.convertToType(data["activityId"], "String");
				}
				if (data.hasOwnProperty("causeIncidentId")) {
					obj["causeIncidentId"] = ApiClient.convertToType(data["causeIncidentId"], "String");
				}
				if (data.hasOwnProperty("rootCauseIncidentId")) {
					obj["rootCauseIncidentId"] = ApiClient.convertToType(data["rootCauseIncidentId"], "String");
				}
				if (data.hasOwnProperty("configuration")) {
					obj["configuration"] = ApiClient.convertToType(data["configuration"], "String");
				}
				if (data.hasOwnProperty("incidentMessage")) {
					obj["incidentMessage"] = ApiClient.convertToType(data["incidentMessage"], "String");
				}
				if (data.hasOwnProperty("tenantId")) {
					obj["tenantId"] = ApiClient.convertToType(data["tenantId"], "String");
				}
				if (data.hasOwnProperty("jobDefinitionId")) {
					obj["jobDefinitionId"] = ApiClient.convertToType(data["jobDefinitionId"], "String");
				}
			}
			return obj;
		};

		/**
   * @member {String} id
   */
		exports.prototype["id"] = undefined;
		/**
   * @member {String} processDefinitionId
   */
		exports.prototype["processDefinitionId"] = undefined;
		/**
   * @member {String} processInstanceId
   */
		exports.prototype["processInstanceId"] = undefined;
		/**
   * @member {String} executionId
   */
		exports.prototype["executionId"] = undefined;
		/**
   * @member {Date} incidentTimestamp
   */
		exports.prototype["incidentTimestamp"] = undefined;
		/**
   * @member {String} incidentType
   */
		exports.prototype["incidentType"] = undefined;
		/**
   * @member {String} activityId
   */
		exports.prototype["activityId"] = undefined;
		/**
   * @member {String} causeIncidentId
   */
		exports.prototype["causeIncidentId"] = undefined;
		/**
   * @member {String} rootCauseIncidentId
   */
		exports.prototype["rootCauseIncidentId"] = undefined;
		/**
   * @member {String} configuration
   */
		exports.prototype["configuration"] = undefined;
		/**
   * @member {String} incidentMessage
   */
		exports.prototype["incidentMessage"] = undefined;
		/**
   * @member {String} tenantId
   */
		exports.prototype["tenantId"] = undefined;
		/**
   * @member {String} jobDefinitionId
   */
		exports.prototype["jobDefinitionId"] = undefined;



		return exports;
	}));



},{"../ApiClient":16}],88:[function(require,module,exports){
/**
 * Camunda REST API
 * Swagger OpenApi Spec for Camunda REST API.
 *
 * OpenAPI spec version: v7.8.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.3.1
 *
 * Do not edit the class manually.
 *
 */

	(function(root, factory) {
		if (typeof define === "function" && define.amd) {
			// AMD. Register as an anonymous module.
			define(["ApiClient"], factory);
		} else if (typeof module === "object" && module.exports) {
			// CommonJS-like environments that support module.exports, like Node.
			module.exports = factory(require("../ApiClient"));
		} else {
			// Browser globals (root is window)
			if (!root.CamundaRestApi) {
				root.CamundaRestApi = {};
			}
			root.CamundaRestApi.InputStream = factory(root.CamundaRestApi.ApiClient);
		}
	}(this, function(ApiClient) {
		"use strict";




		/**
   * The InputStream model module.
   * @module model/InputStream
   * @version v7.8.0
   */

		/**
   * Constructs a new <code>InputStream</code>.
   * @alias module:model/InputStream
   * @class
   */
		var exports = function() {
			var _this = this;

		};

		/**
   * Constructs a <code>InputStream</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:model/InputStream} obj Optional instance to populate.
   * @return {module:model/InputStream} The populated <code>InputStream</code> instance.
   */
		exports.constructFromObject = function(data, obj) {
			if (data) {
				obj = obj || new exports();

			}
			return obj;
		};




		return exports;
	}));



},{"../ApiClient":16}],89:[function(require,module,exports){
/**
 * Camunda REST API
 * Swagger OpenApi Spec for Camunda REST API.
 *
 * OpenAPI spec version: v7.8.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.3.1
 *
 * Do not edit the class manually.
 *
 */

	(function(root, factory) {
		if (typeof define === "function" && define.amd) {
			// AMD. Register as an anonymous module.
			define(["ApiClient"], factory);
		} else if (typeof module === "object" && module.exports) {
			// CommonJS-like environments that support module.exports, like Node.
			module.exports = factory(require("../ApiClient"));
		} else {
			// Browser globals (root is window)
			if (!root.CamundaRestApi) {
				root.CamundaRestApi = {};
			}
			root.CamundaRestApi.JobDefinitionDto = factory(root.CamundaRestApi.ApiClient);
		}
	}(this, function(ApiClient) {
		"use strict";




		/**
   * The JobDefinitionDto model module.
   * @module model/JobDefinitionDto
   * @version v7.8.0
   */

		/**
   * Constructs a new <code>JobDefinitionDto</code>.
   * @alias module:model/JobDefinitionDto
   * @class
   */
		var exports = function() {
			var _this = this;










		};

		/**
   * Constructs a <code>JobDefinitionDto</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:model/JobDefinitionDto} obj Optional instance to populate.
   * @return {module:model/JobDefinitionDto} The populated <code>JobDefinitionDto</code> instance.
   */
		exports.constructFromObject = function(data, obj) {
			if (data) {
				obj = obj || new exports();

				if (data.hasOwnProperty("id")) {
					obj["id"] = ApiClient.convertToType(data["id"], "String");
				}
				if (data.hasOwnProperty("processDefinitionId")) {
					obj["processDefinitionId"] = ApiClient.convertToType(data["processDefinitionId"], "String");
				}
				if (data.hasOwnProperty("processDefinitionKey")) {
					obj["processDefinitionKey"] = ApiClient.convertToType(data["processDefinitionKey"], "String");
				}
				if (data.hasOwnProperty("jobType")) {
					obj["jobType"] = ApiClient.convertToType(data["jobType"], "String");
				}
				if (data.hasOwnProperty("jobConfiguration")) {
					obj["jobConfiguration"] = ApiClient.convertToType(data["jobConfiguration"], "String");
				}
				if (data.hasOwnProperty("activityId")) {
					obj["activityId"] = ApiClient.convertToType(data["activityId"], "String");
				}
				if (data.hasOwnProperty("suspended")) {
					obj["suspended"] = ApiClient.convertToType(data["suspended"], "Boolean");
				}
				if (data.hasOwnProperty("overridingJobPriority")) {
					obj["overridingJobPriority"] = ApiClient.convertToType(data["overridingJobPriority"], "Number");
				}
				if (data.hasOwnProperty("tenantId")) {
					obj["tenantId"] = ApiClient.convertToType(data["tenantId"], "String");
				}
			}
			return obj;
		};

		/**
   * The id of the job definition.
   * @member {String} id
   */
		exports.prototype["id"] = undefined;
		/**
   * The id of the process definition this job definition is associated with.
   * @member {String} processDefinitionId
   */
		exports.prototype["processDefinitionId"] = undefined;
		/**
   * The key of the process definition this job definition is associated with.
   * @member {String} processDefinitionKey
   */
		exports.prototype["processDefinitionKey"] = undefined;
		/**
   * The type of the job which is running for this job definition. See the User Guide for more information about job types.
   * @member {String} jobType
   */
		exports.prototype["jobType"] = undefined;
		/**
   * The context of a job definition provides details about the jobs which will be created. For example: for timer jobs it is the timer context.
   * @member {String} jobConfiguration
   */
		exports.prototype["jobConfiguration"] = undefined;
		/**
   * The id of the activity this job definition is associated with.
   * @member {String} activityId
   */
		exports.prototype["activityId"] = undefined;
		/**
   * @member {Boolean} suspended
   */
		exports.prototype["suspended"] = undefined;
		/**
   * The execution priority defined for jobs that are created based on this definition. May be null when the priority has not been overridden on the job definition level.
   * @member {Number} overridingJobPriority
   */
		exports.prototype["overridingJobPriority"] = undefined;
		/**
   * The id of the tenant this job definition is associated with.
   * @member {String} tenantId
   */
		exports.prototype["tenantId"] = undefined;



		return exports;
	}));



},{"../ApiClient":16}],90:[function(require,module,exports){
/**
 * Camunda REST API
 * Swagger OpenApi Spec for Camunda REST API.
 *
 * OpenAPI spec version: v7.8.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.3.1
 *
 * Do not edit the class manually.
 *
 */

	(function(root, factory) {
		if (typeof define === "function" && define.amd) {
			// AMD. Register as an anonymous module.
			define(["ApiClient"], factory);
		} else if (typeof module === "object" && module.exports) {
			// CommonJS-like environments that support module.exports, like Node.
			module.exports = factory(require("../ApiClient"));
		} else {
			// Browser globals (root is window)
			if (!root.CamundaRestApi) {
				root.CamundaRestApi = {};
			}
			root.CamundaRestApi.JobDefinitionPriorityDto = factory(root.CamundaRestApi.ApiClient);
		}
	}(this, function(ApiClient) {
		"use strict";




		/**
   * The JobDefinitionPriorityDto model module.
   * @module model/JobDefinitionPriorityDto
   * @version v7.8.0
   */

		/**
   * Constructs a new <code>JobDefinitionPriorityDto</code>.
   * @alias module:model/JobDefinitionPriorityDto
   * @class
   */
		var exports = function() {
			var _this = this;



		};

		/**
   * Constructs a <code>JobDefinitionPriorityDto</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:model/JobDefinitionPriorityDto} obj Optional instance to populate.
   * @return {module:model/JobDefinitionPriorityDto} The populated <code>JobDefinitionPriorityDto</code> instance.
   */
		exports.constructFromObject = function(data, obj) {
			if (data) {
				obj = obj || new exports();

				if (data.hasOwnProperty("priority")) {
					obj["priority"] = ApiClient.convertToType(data["priority"], "Number");
				}
				if (data.hasOwnProperty("includeJobs")) {
					obj["includeJobs"] = ApiClient.convertToType(data["includeJobs"], "Boolean");
				}
			}
			return obj;
		};

		/**
   * The new execution priority number for jobs of the given definition. The definition's priority can be reset by using the value null. In that case, the job definition's priority no longer applies but a new job's priority is determined as specified in the process model.
   * @member {Number} priority
   */
		exports.prototype["priority"] = undefined;
		/**
   * @member {Boolean} includeJobs
   */
		exports.prototype["includeJobs"] = undefined;



		return exports;
	}));



},{"../ApiClient":16}],91:[function(require,module,exports){
/**
 * Camunda REST API
 * Swagger OpenApi Spec for Camunda REST API.
 *
 * OpenAPI spec version: v7.8.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.3.1
 *
 * Do not edit the class manually.
 *
 */

	(function(root, factory) {
		if (typeof define === "function" && define.amd) {
			// AMD. Register as an anonymous module.
			define(["ApiClient", "model/SortingDto"], factory);
		} else if (typeof module === "object" && module.exports) {
			// CommonJS-like environments that support module.exports, like Node.
			module.exports = factory(require("../ApiClient"), require("./SortingDto"));
		} else {
			// Browser globals (root is window)
			if (!root.CamundaRestApi) {
				root.CamundaRestApi = {};
			}
			root.CamundaRestApi.JobDefinitionQueryDto = factory(root.CamundaRestApi.ApiClient, root.CamundaRestApi.SortingDto);
		}
	}(this, function(ApiClient, SortingDto) {
		"use strict";




		/**
   * The JobDefinitionQueryDto model module.
   * @module model/JobDefinitionQueryDto
   * @version v7.8.0
   */

		/**
   * Constructs a new <code>JobDefinitionQueryDto</code>.
   * @alias module:model/JobDefinitionQueryDto
   * @class
   */
		var exports = function() {
			var _this = this;


		};

		/**
   * Constructs a <code>JobDefinitionQueryDto</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:model/JobDefinitionQueryDto} obj Optional instance to populate.
   * @return {module:model/JobDefinitionQueryDto} The populated <code>JobDefinitionQueryDto</code> instance.
   */
		exports.constructFromObject = function(data, obj) {
			if (data) {
				obj = obj || new exports();

				if (data.hasOwnProperty("sorting")) {
					obj["sorting"] = ApiClient.convertToType(data["sorting"], [SortingDto]);
				}
			}
			return obj;
		};

		/**
   * @member {Array.<module:model/SortingDto>} sorting
   */
		exports.prototype["sorting"] = undefined;



		return exports;
	}));



},{"../ApiClient":16,"./SortingDto":121}],92:[function(require,module,exports){
/**
 * Camunda REST API
 * Swagger OpenApi Spec for Camunda REST API.
 *
 * OpenAPI spec version: v7.8.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.3.1
 *
 * Do not edit the class manually.
 *
 */

	(function(root, factory) {
		if (typeof define === "function" && define.amd) {
			// AMD. Register as an anonymous module.
			define(["ApiClient"], factory);
		} else if (typeof module === "object" && module.exports) {
			// CommonJS-like environments that support module.exports, like Node.
			module.exports = factory(require("../ApiClient"));
		} else {
			// Browser globals (root is window)
			if (!root.CamundaRestApi) {
				root.CamundaRestApi = {};
			}
			root.CamundaRestApi.JobDefinitionSuspensionStateDto = factory(root.CamundaRestApi.ApiClient);
		}
	}(this, function(ApiClient) {
		"use strict";




		/**
   * The JobDefinitionSuspensionStateDto model module.
   * @module model/JobDefinitionSuspensionStateDto
   * @version v7.8.0
   */

		/**
   * Constructs a new <code>JobDefinitionSuspensionStateDto</code>.
   * @alias module:model/JobDefinitionSuspensionStateDto
   * @class
   */
		var exports = function() {
			var _this = this;



		};

		/**
   * Constructs a <code>JobDefinitionSuspensionStateDto</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:model/JobDefinitionSuspensionStateDto} obj Optional instance to populate.
   * @return {module:model/JobDefinitionSuspensionStateDto} The populated <code>JobDefinitionSuspensionStateDto</code> instance.
   */
		exports.constructFromObject = function(data, obj) {
			if (data) {
				obj = obj || new exports();

				if (data.hasOwnProperty("suspended")) {
					obj["suspended"] = ApiClient.convertToType(data["suspended"], "Boolean");
				}
				if (data.hasOwnProperty("jobDefinitionId")) {
					obj["jobDefinitionId"] = ApiClient.convertToType(data["jobDefinitionId"], "String");
				}
			}
			return obj;
		};

		/**
   * A Boolean value which indicates whether to activate or suspend the batch. When the value is set to true, the batch will be suspended and when the value is set to false, the batch will be activated.
   * @member {Boolean} suspended
   */
		exports.prototype["suspended"] = undefined;
		/**
   * @member {String} jobDefinitionId
   */
		exports.prototype["jobDefinitionId"] = undefined;



		return exports;
	}));



},{"../ApiClient":16}],93:[function(require,module,exports){
/**
 * Camunda REST API
 * Swagger OpenApi Spec for Camunda REST API.
 *
 * OpenAPI spec version: v7.8.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.3.1
 *
 * Do not edit the class manually.
 *
 */

	(function(root, factory) {
		if (typeof define === "function" && define.amd) {
			// AMD. Register as an anonymous module.
			define(["ApiClient"], factory);
		} else if (typeof module === "object" && module.exports) {
			// CommonJS-like environments that support module.exports, like Node.
			module.exports = factory(require("../ApiClient"));
		} else {
			// Browser globals (root is window)
			if (!root.CamundaRestApi) {
				root.CamundaRestApi = {};
			}
			root.CamundaRestApi.JobDto = factory(root.CamundaRestApi.ApiClient);
		}
	}(this, function(ApiClient) {
		"use strict";




		/**
   * The JobDto model module.
   * @module model/JobDto
   * @version v7.8.0
   */

		/**
   * Constructs a new <code>JobDto</code>.
   * @alias module:model/JobDto
   * @class
   */
		var exports = function() {
			var _this = this;













		};

		/**
   * Constructs a <code>JobDto</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:model/JobDto} obj Optional instance to populate.
   * @return {module:model/JobDto} The populated <code>JobDto</code> instance.
   */
		exports.constructFromObject = function(data, obj) {
			if (data) {
				obj = obj || new exports();

				if (data.hasOwnProperty("id")) {
					obj["id"] = ApiClient.convertToType(data["id"], "String");
				}
				if (data.hasOwnProperty("jobDefinitionId")) {
					obj["jobDefinitionId"] = ApiClient.convertToType(data["jobDefinitionId"], "String");
				}
				if (data.hasOwnProperty("processInstanceId")) {
					obj["processInstanceId"] = ApiClient.convertToType(data["processInstanceId"], "String");
				}
				if (data.hasOwnProperty("processDefinitionId")) {
					obj["processDefinitionId"] = ApiClient.convertToType(data["processDefinitionId"], "String");
				}
				if (data.hasOwnProperty("processDefinitionKey")) {
					obj["processDefinitionKey"] = ApiClient.convertToType(data["processDefinitionKey"], "String");
				}
				if (data.hasOwnProperty("executionId")) {
					obj["executionId"] = ApiClient.convertToType(data["executionId"], "String");
				}
				if (data.hasOwnProperty("exceptionMessage")) {
					obj["exceptionMessage"] = ApiClient.convertToType(data["exceptionMessage"], "String");
				}
				if (data.hasOwnProperty("retries")) {
					obj["retries"] = ApiClient.convertToType(data["retries"], "Number");
				}
				if (data.hasOwnProperty("dueDate")) {
					obj["dueDate"] = ApiClient.convertToType(data["dueDate"], "Date");
				}
				if (data.hasOwnProperty("suspended")) {
					obj["suspended"] = ApiClient.convertToType(data["suspended"], "Boolean");
				}
				if (data.hasOwnProperty("priority")) {
					obj["priority"] = ApiClient.convertToType(data["priority"], "Number");
				}
				if (data.hasOwnProperty("tenantId")) {
					obj["tenantId"] = ApiClient.convertToType(data["tenantId"], "String");
				}
			}
			return obj;
		};

		/**
   * The id of the job.
   * @member {String} id
   */
		exports.prototype["id"] = undefined;
		/**
   * The id of the associated job definition.
   * @member {String} jobDefinitionId
   */
		exports.prototype["jobDefinitionId"] = undefined;
		/**
   * The id of the process instance which execution created the job.
   * @member {String} processInstanceId
   */
		exports.prototype["processInstanceId"] = undefined;
		/**
   * The id of the process definition which this job belongs to.
   * @member {String} processDefinitionId
   */
		exports.prototype["processDefinitionId"] = undefined;
		/**
   * The key of the process definition which this job belongs to.
   * @member {String} processDefinitionKey
   */
		exports.prototype["processDefinitionKey"] = undefined;
		/**
   * The specific execution id on which the job was created.
   * @member {String} executionId
   */
		exports.prototype["executionId"] = undefined;
		/**
   * The message of the exception that occurred, the last time the job was executed. Is null when no exception occurred.
   * @member {String} exceptionMessage
   */
		exports.prototype["exceptionMessage"] = undefined;
		/**
   * The number of retries this job has left.
   * @member {Number} retries
   */
		exports.prototype["retries"] = undefined;
		/**
   * The date on which this job is supposed to be processed.
   * @member {Date} dueDate
   */
		exports.prototype["dueDate"] = undefined;
		/**
   * @member {Boolean} suspended
   */
		exports.prototype["suspended"] = undefined;
		/**
   * The job's priority for execution.
   * @member {Number} priority
   */
		exports.prototype["priority"] = undefined;
		/**
   * The id of the tenant which this job belongs to.
   * @member {String} tenantId
   */
		exports.prototype["tenantId"] = undefined;



		return exports;
	}));



},{"../ApiClient":16}],94:[function(require,module,exports){
/**
 * Camunda REST API
 * Swagger OpenApi Spec for Camunda REST API.
 *
 * OpenAPI spec version: v7.8.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.3.1
 *
 * Do not edit the class manually.
 *
 */

	(function(root, factory) {
		if (typeof define === "function" && define.amd) {
			// AMD. Register as an anonymous module.
			define(["ApiClient"], factory);
		} else if (typeof module === "object" && module.exports) {
			// CommonJS-like environments that support module.exports, like Node.
			module.exports = factory(require("../ApiClient"));
		} else {
			// Browser globals (root is window)
			if (!root.CamundaRestApi) {
				root.CamundaRestApi = {};
			}
			root.CamundaRestApi.JobDuedateDto = factory(root.CamundaRestApi.ApiClient);
		}
	}(this, function(ApiClient) {
		"use strict";




		/**
   * The JobDuedateDto model module.
   * @module model/JobDuedateDto
   * @version v7.8.0
   */

		/**
   * Constructs a new <code>JobDuedateDto</code>.
   * @alias module:model/JobDuedateDto
   * @class
   */
		var exports = function() {
			var _this = this;


		};

		/**
   * Constructs a <code>JobDuedateDto</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:model/JobDuedateDto} obj Optional instance to populate.
   * @return {module:model/JobDuedateDto} The populated <code>JobDuedateDto</code> instance.
   */
		exports.constructFromObject = function(data, obj) {
			if (data) {
				obj = obj || new exports();

				if (data.hasOwnProperty("duedate")) {
					obj["duedate"] = ApiClient.convertToType(data["duedate"], "Date");
				}
			}
			return obj;
		};

		/**
   * The date to set when the job has the next execution.
   * @member {Date} duedate
   */
		exports.prototype["duedate"] = undefined;



		return exports;
	}));



},{"../ApiClient":16}],95:[function(require,module,exports){
/**
 * Camunda REST API
 * Swagger OpenApi Spec for Camunda REST API.
 *
 * OpenAPI spec version: v7.8.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.3.1
 *
 * Do not edit the class manually.
 *
 */

	(function(root, factory) {
		if (typeof define === "function" && define.amd) {
			// AMD. Register as an anonymous module.
			define(["ApiClient", "model/SortingDto"], factory);
		} else if (typeof module === "object" && module.exports) {
			// CommonJS-like environments that support module.exports, like Node.
			module.exports = factory(require("../ApiClient"), require("./SortingDto"));
		} else {
			// Browser globals (root is window)
			if (!root.CamundaRestApi) {
				root.CamundaRestApi = {};
			}
			root.CamundaRestApi.JobQueryDto = factory(root.CamundaRestApi.ApiClient, root.CamundaRestApi.SortingDto);
		}
	}(this, function(ApiClient, SortingDto) {
		"use strict";




		/**
   * The JobQueryDto model module.
   * @module model/JobQueryDto
   * @version v7.8.0
   */

		/**
   * Constructs a new <code>JobQueryDto</code>.
   * @alias module:model/JobQueryDto
   * @class
   */
		var exports = function() {
			var _this = this;


		};

		/**
   * Constructs a <code>JobQueryDto</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:model/JobQueryDto} obj Optional instance to populate.
   * @return {module:model/JobQueryDto} The populated <code>JobQueryDto</code> instance.
   */
		exports.constructFromObject = function(data, obj) {
			if (data) {
				obj = obj || new exports();

				if (data.hasOwnProperty("sorting")) {
					obj["sorting"] = ApiClient.convertToType(data["sorting"], [SortingDto]);
				}
			}
			return obj;
		};

		/**
   * @member {Array.<module:model/SortingDto>} sorting
   */
		exports.prototype["sorting"] = undefined;



		return exports;
	}));



},{"../ApiClient":16,"./SortingDto":121}],96:[function(require,module,exports){
/**
 * Camunda REST API
 * Swagger OpenApi Spec for Camunda REST API.
 *
 * OpenAPI spec version: v7.8.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.3.1
 *
 * Do not edit the class manually.
 *
 */

	(function(root, factory) {
		if (typeof define === "function" && define.amd) {
			// AMD. Register as an anonymous module.
			define(["ApiClient"], factory);
		} else if (typeof module === "object" && module.exports) {
			// CommonJS-like environments that support module.exports, like Node.
			module.exports = factory(require("../ApiClient"));
		} else {
			// Browser globals (root is window)
			if (!root.CamundaRestApi) {
				root.CamundaRestApi = {};
			}
			root.CamundaRestApi.JobSuspensionStateDto = factory(root.CamundaRestApi.ApiClient);
		}
	}(this, function(ApiClient) {
		"use strict";




		/**
   * The JobSuspensionStateDto model module.
   * @module model/JobSuspensionStateDto
   * @version v7.8.0
   */

		/**
   * Constructs a new <code>JobSuspensionStateDto</code>.
   * @alias module:model/JobSuspensionStateDto
   * @class
   */
		var exports = function() {
			var _this = this;



		};

		/**
   * Constructs a <code>JobSuspensionStateDto</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:model/JobSuspensionStateDto} obj Optional instance to populate.
   * @return {module:model/JobSuspensionStateDto} The populated <code>JobSuspensionStateDto</code> instance.
   */
		exports.constructFromObject = function(data, obj) {
			if (data) {
				obj = obj || new exports();

				if (data.hasOwnProperty("suspended")) {
					obj["suspended"] = ApiClient.convertToType(data["suspended"], "Boolean");
				}
				if (data.hasOwnProperty("jobId")) {
					obj["jobId"] = ApiClient.convertToType(data["jobId"], "String");
				}
			}
			return obj;
		};

		/**
   * A Boolean value which indicates whether to activate or suspend the batch. When the value is set to true, the batch will be suspended and when the value is set to false, the batch will be activated.
   * @member {Boolean} suspended
   */
		exports.prototype["suspended"] = undefined;
		/**
   * @member {String} jobId
   */
		exports.prototype["jobId"] = undefined;



		return exports;
	}));



},{"../ApiClient":16}],97:[function(require,module,exports){
/**
 * Camunda REST API
 * Swagger OpenApi Spec for Camunda REST API.
 *
 * OpenAPI spec version: v7.8.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.3.1
 *
 * Do not edit the class manually.
 *
 */

	(function(root, factory) {
		if (typeof define === "function" && define.amd) {
			// AMD. Register as an anonymous module.
			define(["ApiClient", "model/MigrationPlanDto", "model/ProcessInstanceQueryDto"], factory);
		} else if (typeof module === "object" && module.exports) {
			// CommonJS-like environments that support module.exports, like Node.
			module.exports = factory(require("../ApiClient"), require("./MigrationPlanDto"), require("./ProcessInstanceQueryDto"));
		} else {
			// Browser globals (root is window)
			if (!root.CamundaRestApi) {
				root.CamundaRestApi = {};
			}
			root.CamundaRestApi.MigrationExecutionDto = factory(root.CamundaRestApi.ApiClient, root.CamundaRestApi.MigrationPlanDto, root.CamundaRestApi.ProcessInstanceQueryDto);
		}
	}(this, function(ApiClient, MigrationPlanDto, ProcessInstanceQueryDto) {
		"use strict";




		/**
   * The MigrationExecutionDto model module.
   * @module model/MigrationExecutionDto
   * @version v7.8.0
   */

		/**
   * Constructs a new <code>MigrationExecutionDto</code>.
   * @alias module:model/MigrationExecutionDto
   * @class
   */
		var exports = function() {
			var _this = this;






		};

		/**
   * Constructs a <code>MigrationExecutionDto</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:model/MigrationExecutionDto} obj Optional instance to populate.
   * @return {module:model/MigrationExecutionDto} The populated <code>MigrationExecutionDto</code> instance.
   */
		exports.constructFromObject = function(data, obj) {
			if (data) {
				obj = obj || new exports();

				if (data.hasOwnProperty("migrationPlan")) {
					obj["migrationPlan"] = MigrationPlanDto.constructFromObject(data["migrationPlan"]);
				}
				if (data.hasOwnProperty("processInstanceIds")) {
					obj["processInstanceIds"] = ApiClient.convertToType(data["processInstanceIds"], ["String"]);
				}
				if (data.hasOwnProperty("processInstanceQuery")) {
					obj["processInstanceQuery"] = ProcessInstanceQueryDto.constructFromObject(data["processInstanceQuery"]);
				}
				if (data.hasOwnProperty("skipIoMappings")) {
					obj["skipIoMappings"] = ApiClient.convertToType(data["skipIoMappings"], "Boolean");
				}
				if (data.hasOwnProperty("skipCustomListeners")) {
					obj["skipCustomListeners"] = ApiClient.convertToType(data["skipCustomListeners"], "Boolean");
				}
			}
			return obj;
		};

		/**
   * The migration plan to execute. A JSON object corresponding to the migration plan interface in the engine as explained below.
   * @member {module:model/MigrationPlanDto} migrationPlan
   */
		exports.prototype["migrationPlan"] = undefined;
		/**
   * A list of process instance ids to migrate.
   * @member {Array.<String>} processInstanceIds
   */
		exports.prototype["processInstanceIds"] = undefined;
		/**
   * A process instance query like the request body described by POST /process-instance .
   * @member {module:model/ProcessInstanceQueryDto} processInstanceQuery
   */
		exports.prototype["processInstanceQuery"] = undefined;
		/**
   * @member {Boolean} skipIoMappings
   */
		exports.prototype["skipIoMappings"] = undefined;
		/**
   * @member {Boolean} skipCustomListeners
   */
		exports.prototype["skipCustomListeners"] = undefined;



		return exports;
	}));



},{"../ApiClient":16,"./MigrationPlanDto":100,"./ProcessInstanceQueryDto":113}],98:[function(require,module,exports){
/**
 * Camunda REST API
 * Swagger OpenApi Spec for Camunda REST API.
 *
 * OpenAPI spec version: v7.8.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.3.1
 *
 * Do not edit the class manually.
 *
 */

	(function(root, factory) {
		if (typeof define === "function" && define.amd) {
			// AMD. Register as an anonymous module.
			define(["ApiClient"], factory);
		} else if (typeof module === "object" && module.exports) {
			// CommonJS-like environments that support module.exports, like Node.
			module.exports = factory(require("../ApiClient"));
		} else {
			// Browser globals (root is window)
			if (!root.CamundaRestApi) {
				root.CamundaRestApi = {};
			}
			root.CamundaRestApi.MigrationInstructionDto = factory(root.CamundaRestApi.ApiClient);
		}
	}(this, function(ApiClient) {
		"use strict";




		/**
   * The MigrationInstructionDto model module.
   * @module model/MigrationInstructionDto
   * @version v7.8.0
   */

		/**
   * Constructs a new <code>MigrationInstructionDto</code>.
   * @alias module:model/MigrationInstructionDto
   * @class
   */
		var exports = function() {
			var _this = this;




		};

		/**
   * Constructs a <code>MigrationInstructionDto</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:model/MigrationInstructionDto} obj Optional instance to populate.
   * @return {module:model/MigrationInstructionDto} The populated <code>MigrationInstructionDto</code> instance.
   */
		exports.constructFromObject = function(data, obj) {
			if (data) {
				obj = obj || new exports();

				if (data.hasOwnProperty("sourceActivityIds")) {
					obj["sourceActivityIds"] = ApiClient.convertToType(data["sourceActivityIds"], ["String"]);
				}
				if (data.hasOwnProperty("targetActivityIds")) {
					obj["targetActivityIds"] = ApiClient.convertToType(data["targetActivityIds"], ["String"]);
				}
				if (data.hasOwnProperty("updateEventTrigger")) {
					obj["updateEventTrigger"] = ApiClient.convertToType(data["updateEventTrigger"], "Boolean");
				}
			}
			return obj;
		};

		/**
   * @member {Array.<String>} sourceActivityIds
   */
		exports.prototype["sourceActivityIds"] = undefined;
		/**
   * @member {Array.<String>} targetActivityIds
   */
		exports.prototype["targetActivityIds"] = undefined;
		/**
   * @member {Boolean} updateEventTrigger
   */
		exports.prototype["updateEventTrigger"] = undefined;



		return exports;
	}));



},{"../ApiClient":16}],99:[function(require,module,exports){
/**
 * Camunda REST API
 * Swagger OpenApi Spec for Camunda REST API.
 *
 * OpenAPI spec version: v7.8.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.3.1
 *
 * Do not edit the class manually.
 *
 */

	(function(root, factory) {
		if (typeof define === "function" && define.amd) {
			// AMD. Register as an anonymous module.
			define(["ApiClient", "model/MigrationInstructionDto"], factory);
		} else if (typeof module === "object" && module.exports) {
			// CommonJS-like environments that support module.exports, like Node.
			module.exports = factory(require("../ApiClient"), require("./MigrationInstructionDto"));
		} else {
			// Browser globals (root is window)
			if (!root.CamundaRestApi) {
				root.CamundaRestApi = {};
			}
			root.CamundaRestApi.MigrationInstructionValidationReportDto = factory(root.CamundaRestApi.ApiClient, root.CamundaRestApi.MigrationInstructionDto);
		}
	}(this, function(ApiClient, MigrationInstructionDto) {
		"use strict";




		/**
   * The MigrationInstructionValidationReportDto model module.
   * @module model/MigrationInstructionValidationReportDto
   * @version v7.8.0
   */

		/**
   * Constructs a new <code>MigrationInstructionValidationReportDto</code>.
   * @alias module:model/MigrationInstructionValidationReportDto
   * @class
   */
		var exports = function() {
			var _this = this;



		};

		/**
   * Constructs a <code>MigrationInstructionValidationReportDto</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:model/MigrationInstructionValidationReportDto} obj Optional instance to populate.
   * @return {module:model/MigrationInstructionValidationReportDto} The populated <code>MigrationInstructionValidationReportDto</code> instance.
   */
		exports.constructFromObject = function(data, obj) {
			if (data) {
				obj = obj || new exports();

				if (data.hasOwnProperty("instruction")) {
					obj["instruction"] = MigrationInstructionDto.constructFromObject(data["instruction"]);
				}
				if (data.hasOwnProperty("failures")) {
					obj["failures"] = ApiClient.convertToType(data["failures"], ["String"]);
				}
			}
			return obj;
		};

		/**
   * @member {module:model/MigrationInstructionDto} instruction
   */
		exports.prototype["instruction"] = undefined;
		/**
   * @member {Array.<String>} failures
   */
		exports.prototype["failures"] = undefined;



		return exports;
	}));



},{"../ApiClient":16,"./MigrationInstructionDto":98}],100:[function(require,module,exports){
/**
 * Camunda REST API
 * Swagger OpenApi Spec for Camunda REST API.
 *
 * OpenAPI spec version: v7.8.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.3.1
 *
 * Do not edit the class manually.
 *
 */

	(function(root, factory) {
		if (typeof define === "function" && define.amd) {
			// AMD. Register as an anonymous module.
			define(["ApiClient", "model/MigrationInstructionDto"], factory);
		} else if (typeof module === "object" && module.exports) {
			// CommonJS-like environments that support module.exports, like Node.
			module.exports = factory(require("../ApiClient"), require("./MigrationInstructionDto"));
		} else {
			// Browser globals (root is window)
			if (!root.CamundaRestApi) {
				root.CamundaRestApi = {};
			}
			root.CamundaRestApi.MigrationPlanDto = factory(root.CamundaRestApi.ApiClient, root.CamundaRestApi.MigrationInstructionDto);
		}
	}(this, function(ApiClient, MigrationInstructionDto) {
		"use strict";




		/**
   * The MigrationPlanDto model module.
   * @module model/MigrationPlanDto
   * @version v7.8.0
   */

		/**
   * Constructs a new <code>MigrationPlanDto</code>.
   * @alias module:model/MigrationPlanDto
   * @class
   */
		var exports = function() {
			var _this = this;




		};

		/**
   * Constructs a <code>MigrationPlanDto</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:model/MigrationPlanDto} obj Optional instance to populate.
   * @return {module:model/MigrationPlanDto} The populated <code>MigrationPlanDto</code> instance.
   */
		exports.constructFromObject = function(data, obj) {
			if (data) {
				obj = obj || new exports();

				if (data.hasOwnProperty("sourceProcessDefinitionId")) {
					obj["sourceProcessDefinitionId"] = ApiClient.convertToType(data["sourceProcessDefinitionId"], "String");
				}
				if (data.hasOwnProperty("targetProcessDefinitionId")) {
					obj["targetProcessDefinitionId"] = ApiClient.convertToType(data["targetProcessDefinitionId"], "String");
				}
				if (data.hasOwnProperty("instructions")) {
					obj["instructions"] = ApiClient.convertToType(data["instructions"], [MigrationInstructionDto]);
				}
			}
			return obj;
		};

		/**
   * The id of the source process definition for the migration.
   * @member {String} sourceProcessDefinitionId
   */
		exports.prototype["sourceProcessDefinitionId"] = undefined;
		/**
   * The id of the target process definition for the migration.
   * @member {String} targetProcessDefinitionId
   */
		exports.prototype["targetProcessDefinitionId"] = undefined;
		/**
   * A list of migration instructions which map equal activities. Each migration instruction is a JSON object with the following properties: Name Value Description sourceActivityIds Array The activity ids from the source process definition being mapped. targetActivityIds Array The activity ids from the target process definition being mapped. updateEventTrigger Boolean Configuration flag whether event triggers defined are going to be updated during migration.
   * @member {Array.<module:model/MigrationInstructionDto>} instructions
   */
		exports.prototype["instructions"] = undefined;



		return exports;
	}));



},{"../ApiClient":16,"./MigrationInstructionDto":98}],101:[function(require,module,exports){
/**
 * Camunda REST API
 * Swagger OpenApi Spec for Camunda REST API.
 *
 * OpenAPI spec version: v7.8.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.3.1
 *
 * Do not edit the class manually.
 *
 */

	(function(root, factory) {
		if (typeof define === "function" && define.amd) {
			// AMD. Register as an anonymous module.
			define(["ApiClient"], factory);
		} else if (typeof module === "object" && module.exports) {
			// CommonJS-like environments that support module.exports, like Node.
			module.exports = factory(require("../ApiClient"));
		} else {
			// Browser globals (root is window)
			if (!root.CamundaRestApi) {
				root.CamundaRestApi = {};
			}
			root.CamundaRestApi.MigrationPlanGenerationDto = factory(root.CamundaRestApi.ApiClient);
		}
	}(this, function(ApiClient) {
		"use strict";




		/**
   * The MigrationPlanGenerationDto model module.
   * @module model/MigrationPlanGenerationDto
   * @version v7.8.0
   */

		/**
   * Constructs a new <code>MigrationPlanGenerationDto</code>.
   * @alias module:model/MigrationPlanGenerationDto
   * @class
   */
		var exports = function() {
			var _this = this;




		};

		/**
   * Constructs a <code>MigrationPlanGenerationDto</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:model/MigrationPlanGenerationDto} obj Optional instance to populate.
   * @return {module:model/MigrationPlanGenerationDto} The populated <code>MigrationPlanGenerationDto</code> instance.
   */
		exports.constructFromObject = function(data, obj) {
			if (data) {
				obj = obj || new exports();

				if (data.hasOwnProperty("sourceProcessDefinitionId")) {
					obj["sourceProcessDefinitionId"] = ApiClient.convertToType(data["sourceProcessDefinitionId"], "String");
				}
				if (data.hasOwnProperty("targetProcessDefinitionId")) {
					obj["targetProcessDefinitionId"] = ApiClient.convertToType(data["targetProcessDefinitionId"], "String");
				}
				if (data.hasOwnProperty("updateEventTriggers")) {
					obj["updateEventTriggers"] = ApiClient.convertToType(data["updateEventTriggers"], "Boolean");
				}
			}
			return obj;
		};

		/**
   * The id of the source process definition for the migration.
   * @member {String} sourceProcessDefinitionId
   */
		exports.prototype["sourceProcessDefinitionId"] = undefined;
		/**
   * The id of the target process definition for the migration.
   * @member {String} targetProcessDefinitionId
   */
		exports.prototype["targetProcessDefinitionId"] = undefined;
		/**
   * @member {Boolean} updateEventTriggers
   */
		exports.prototype["updateEventTriggers"] = undefined;



		return exports;
	}));



},{"../ApiClient":16}],102:[function(require,module,exports){
/**
 * Camunda REST API
 * Swagger OpenApi Spec for Camunda REST API.
 *
 * OpenAPI spec version: v7.8.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.3.1
 *
 * Do not edit the class manually.
 *
 */

	(function(root, factory) {
		if (typeof define === "function" && define.amd) {
			// AMD. Register as an anonymous module.
			define(["ApiClient", "model/MigrationInstructionValidationReportDto"], factory);
		} else if (typeof module === "object" && module.exports) {
			// CommonJS-like environments that support module.exports, like Node.
			module.exports = factory(require("../ApiClient"), require("./MigrationInstructionValidationReportDto"));
		} else {
			// Browser globals (root is window)
			if (!root.CamundaRestApi) {
				root.CamundaRestApi = {};
			}
			root.CamundaRestApi.MigrationPlanReportDto = factory(root.CamundaRestApi.ApiClient, root.CamundaRestApi.MigrationInstructionValidationReportDto);
		}
	}(this, function(ApiClient, MigrationInstructionValidationReportDto) {
		"use strict";




		/**
   * The MigrationPlanReportDto model module.
   * @module model/MigrationPlanReportDto
   * @version v7.8.0
   */

		/**
   * Constructs a new <code>MigrationPlanReportDto</code>.
   * @alias module:model/MigrationPlanReportDto
   * @class
   */
		var exports = function() {
			var _this = this;


		};

		/**
   * Constructs a <code>MigrationPlanReportDto</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:model/MigrationPlanReportDto} obj Optional instance to populate.
   * @return {module:model/MigrationPlanReportDto} The populated <code>MigrationPlanReportDto</code> instance.
   */
		exports.constructFromObject = function(data, obj) {
			if (data) {
				obj = obj || new exports();

				if (data.hasOwnProperty("instructionReports")) {
					obj["instructionReports"] = ApiClient.convertToType(data["instructionReports"], [MigrationInstructionValidationReportDto]);
				}
			}
			return obj;
		};

		/**
   * The list of instruction validation reports. If no validation errors are detected it is an empty list.
   * @member {Array.<module:model/MigrationInstructionValidationReportDto>} instructionReports
   */
		exports.prototype["instructionReports"] = undefined;



		return exports;
	}));



},{"../ApiClient":16,"./MigrationInstructionValidationReportDto":99}],103:[function(require,module,exports){
/**
 * Camunda REST API
 * Swagger OpenApi Spec for Camunda REST API.
 *
 * OpenAPI spec version: v7.8.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.3.1
 *
 * Do not edit the class manually.
 *
 */

	(function(root, factory) {
		if (typeof define === "function" && define.amd) {
			// AMD. Register as an anonymous module.
			define(["ApiClient", "model/ProcessInstanceModificationInstructionDto", "model/ProcessInstanceQueryDto"], factory);
		} else if (typeof module === "object" && module.exports) {
			// CommonJS-like environments that support module.exports, like Node.
			module.exports = factory(require("../ApiClient"), require("./ProcessInstanceModificationInstructionDto"), require("./ProcessInstanceQueryDto"));
		} else {
			// Browser globals (root is window)
			if (!root.CamundaRestApi) {
				root.CamundaRestApi = {};
			}
			root.CamundaRestApi.ModificationDto = factory(root.CamundaRestApi.ApiClient, root.CamundaRestApi.ProcessInstanceModificationInstructionDto, root.CamundaRestApi.ProcessInstanceQueryDto);
		}
	}(this, function(ApiClient, ProcessInstanceModificationInstructionDto, ProcessInstanceQueryDto) {
		"use strict";




		/**
   * The ModificationDto model module.
   * @module model/ModificationDto
   * @version v7.8.0
   */

		/**
   * Constructs a new <code>ModificationDto</code>.
   * @alias module:model/ModificationDto
   * @class
   */
		var exports = function() {
			var _this = this;







		};

		/**
   * Constructs a <code>ModificationDto</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:model/ModificationDto} obj Optional instance to populate.
   * @return {module:model/ModificationDto} The populated <code>ModificationDto</code> instance.
   */
		exports.constructFromObject = function(data, obj) {
			if (data) {
				obj = obj || new exports();

				if (data.hasOwnProperty("instructions")) {
					obj["instructions"] = ApiClient.convertToType(data["instructions"], [ProcessInstanceModificationInstructionDto]);
				}
				if (data.hasOwnProperty("processInstanceIds")) {
					obj["processInstanceIds"] = ApiClient.convertToType(data["processInstanceIds"], ["String"]);
				}
				if (data.hasOwnProperty("processInstanceQuery")) {
					obj["processInstanceQuery"] = ProcessInstanceQueryDto.constructFromObject(data["processInstanceQuery"]);
				}
				if (data.hasOwnProperty("processDefinitionId")) {
					obj["processDefinitionId"] = ApiClient.convertToType(data["processDefinitionId"], "String");
				}
				if (data.hasOwnProperty("skipIoMappings")) {
					obj["skipIoMappings"] = ApiClient.convertToType(data["skipIoMappings"], "Boolean");
				}
				if (data.hasOwnProperty("skipCustomListeners")) {
					obj["skipCustomListeners"] = ApiClient.convertToType(data["skipCustomListeners"], "Boolean");
				}
			}
			return obj;
		};

		/**
   * A JSON array of modification instructions. The instructions are executed in the order they are in. An instruction may have the following properties: type Mandatory. One of the following values: cancel, startBeforeActivity, startAfterActivity, startTransition. A startBeforeActivity and cancel instructions request to enter a given activity. A startAfterActivity instruction requests to execute the single outgoing sequence flow of a given activity. A startTransition instruction requests to execute a specific sequence flow. activityId Can be used with instructions of types startBeforeActivity, startAfterActivity, and cancel. Specifies the activity the instruction targets. transitionId Can be used with instructions of types startTransition. Specifies the sequence flow to start.
   * @member {Array.<module:model/ProcessInstanceModificationInstructionDto>} instructions
   */
		exports.prototype["instructions"] = undefined;
		/**
   * A list of process instance ids to modify.
   * @member {Array.<String>} processInstanceIds
   */
		exports.prototype["processInstanceIds"] = undefined;
		/**
   * A process instance query like the request body described by POST /process-instance .
   * @member {module:model/ProcessInstanceQueryDto} processInstanceQuery
   */
		exports.prototype["processInstanceQuery"] = undefined;
		/**
   * The id of the process definition for the modification
   * @member {String} processDefinitionId
   */
		exports.prototype["processDefinitionId"] = undefined;
		/**
   * @member {Boolean} skipIoMappings
   */
		exports.prototype["skipIoMappings"] = undefined;
		/**
   * @member {Boolean} skipCustomListeners
   */
		exports.prototype["skipCustomListeners"] = undefined;



		return exports;
	}));



},{"../ApiClient":16,"./ProcessInstanceModificationInstructionDto":112,"./ProcessInstanceQueryDto":113}],104:[function(require,module,exports){
/**
 * Camunda REST API
 * Swagger OpenApi Spec for Camunda REST API.
 *
 * OpenAPI spec version: v7.8.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.3.1
 *
 * Do not edit the class manually.
 *
 */

	(function(root, factory) {
		if (typeof define === "function" && define.amd) {
			// AMD. Register as an anonymous module.
			define(["ApiClient"], factory);
		} else if (typeof module === "object" && module.exports) {
			// CommonJS-like environments that support module.exports, like Node.
			module.exports = factory(require("../ApiClient"));
		} else {
			// Browser globals (root is window)
			if (!root.CamundaRestApi) {
				root.CamundaRestApi = {};
			}
			root.CamundaRestApi.MultipartFormData = factory(root.CamundaRestApi.ApiClient);
		}
	}(this, function(ApiClient) {
		"use strict";




		/**
   * The MultipartFormData model module.
   * @module model/MultipartFormData
   * @version v7.8.0
   */

		/**
   * Constructs a new <code>MultipartFormData</code>.
   * @alias module:model/MultipartFormData
   * @class
   */
		var exports = function() {
			var _this = this;


		};

		/**
   * Constructs a <code>MultipartFormData</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:model/MultipartFormData} obj Optional instance to populate.
   * @return {module:model/MultipartFormData} The populated <code>MultipartFormData</code> instance.
   */
		exports.constructFromObject = function(data, obj) {
			if (data) {
				obj = obj || new exports();

				if (data.hasOwnProperty("partNames")) {
					obj["partNames"] = ApiClient.convertToType(data["partNames"], ["String"]);
				}
			}
			return obj;
		};

		/**
   * @member {Array.<String>} partNames
   */
		exports.prototype["partNames"] = undefined;



		return exports;
	}));



},{"../ApiClient":16}],105:[function(require,module,exports){
/**
 * Camunda REST API
 * Swagger OpenApi Spec for Camunda REST API.
 *
 * OpenAPI spec version: v7.8.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.3.1
 *
 * Do not edit the class manually.
 *
 */

	(function(root, factory) {
		if (typeof define === "function" && define.amd) {
			// AMD. Register as an anonymous module.
			define(["ApiClient", "model/VariableValueDto"], factory);
		} else if (typeof module === "object" && module.exports) {
			// CommonJS-like environments that support module.exports, like Node.
			module.exports = factory(require("../ApiClient"), require("./VariableValueDto"));
		} else {
			// Browser globals (root is window)
			if (!root.CamundaRestApi) {
				root.CamundaRestApi = {};
			}
			root.CamundaRestApi.PatchVariablesDto = factory(root.CamundaRestApi.ApiClient, root.CamundaRestApi.VariableValueDto);
		}
	}(this, function(ApiClient, VariableValueDto) {
		"use strict";




		/**
   * The PatchVariablesDto model module.
   * @module model/PatchVariablesDto
   * @version v7.8.0
   */

		/**
   * Constructs a new <code>PatchVariablesDto</code>.
   * @alias module:model/PatchVariablesDto
   * @class
   */
		var exports = function() {
			var _this = this;



		};

		/**
   * Constructs a <code>PatchVariablesDto</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:model/PatchVariablesDto} obj Optional instance to populate.
   * @return {module:model/PatchVariablesDto} The populated <code>PatchVariablesDto</code> instance.
   */
		exports.constructFromObject = function(data, obj) {
			if (data) {
				obj = obj || new exports();

				if (data.hasOwnProperty("modifications")) {
					obj["modifications"] = ApiClient.convertToType(data["modifications"], {"String": VariableValueDto});
				}
				if (data.hasOwnProperty("deletions")) {
					obj["deletions"] = ApiClient.convertToType(data["deletions"], ["String"]);
				}
			}
			return obj;
		};

		/**
   * A JSON object containing variable key-value pairs. Each key is a variable name and each value a JSON variable value object with the following properties:
   * @member {Object.<String, module:model/VariableValueDto>} modifications
   */
		exports.prototype["modifications"] = undefined;
		/**
   * @member {Array.<String>} deletions
   */
		exports.prototype["deletions"] = undefined;



		return exports;
	}));



},{"../ApiClient":16,"./VariableValueDto":140}],106:[function(require,module,exports){
/**
 * Camunda REST API
 * Swagger OpenApi Spec for Camunda REST API.
 *
 * OpenAPI spec version: v7.8.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.3.1
 *
 * Do not edit the class manually.
 *
 */

	(function(root, factory) {
		if (typeof define === "function" && define.amd) {
			// AMD. Register as an anonymous module.
			define(["ApiClient"], factory);
		} else if (typeof module === "object" && module.exports) {
			// CommonJS-like environments that support module.exports, like Node.
			module.exports = factory(require("../ApiClient"));
		} else {
			// Browser globals (root is window)
			if (!root.CamundaRestApi) {
				root.CamundaRestApi = {};
			}
			root.CamundaRestApi.PriorityDto = factory(root.CamundaRestApi.ApiClient);
		}
	}(this, function(ApiClient) {
		"use strict";




		/**
   * The PriorityDto model module.
   * @module model/PriorityDto
   * @version v7.8.0
   */

		/**
   * Constructs a new <code>PriorityDto</code>.
   * @alias module:model/PriorityDto
   * @class
   */
		var exports = function() {
			var _this = this;


		};

		/**
   * Constructs a <code>PriorityDto</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:model/PriorityDto} obj Optional instance to populate.
   * @return {module:model/PriorityDto} The populated <code>PriorityDto</code> instance.
   */
		exports.constructFromObject = function(data, obj) {
			if (data) {
				obj = obj || new exports();

				if (data.hasOwnProperty("priority")) {
					obj["priority"] = ApiClient.convertToType(data["priority"], "Number");
				}
			}
			return obj;
		};

		/**
   * The priority of the external task.
   * @member {Number} priority
   */
		exports.prototype["priority"] = undefined;



		return exports;
	}));



},{"../ApiClient":16}],107:[function(require,module,exports){
/**
 * Camunda REST API
 * Swagger OpenApi Spec for Camunda REST API.
 *
 * OpenAPI spec version: v7.8.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.3.1
 *
 * Do not edit the class manually.
 *
 */

	(function(root, factory) {
		if (typeof define === "function" && define.amd) {
			// AMD. Register as an anonymous module.
			define(["ApiClient"], factory);
		} else if (typeof module === "object" && module.exports) {
			// CommonJS-like environments that support module.exports, like Node.
			module.exports = factory(require("../ApiClient"));
		} else {
			// Browser globals (root is window)
			if (!root.CamundaRestApi) {
				root.CamundaRestApi = {};
			}
			root.CamundaRestApi.ProcessDefinitionDiagramDto = factory(root.CamundaRestApi.ApiClient);
		}
	}(this, function(ApiClient) {
		"use strict";




		/**
   * The ProcessDefinitionDiagramDto model module.
   * @module model/ProcessDefinitionDiagramDto
   * @version v7.8.0
   */

		/**
   * Constructs a new <code>ProcessDefinitionDiagramDto</code>.
   * @alias module:model/ProcessDefinitionDiagramDto
   * @class
   */
		var exports = function() {
			var _this = this;



		};

		/**
   * Constructs a <code>ProcessDefinitionDiagramDto</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:model/ProcessDefinitionDiagramDto} obj Optional instance to populate.
   * @return {module:model/ProcessDefinitionDiagramDto} The populated <code>ProcessDefinitionDiagramDto</code> instance.
   */
		exports.constructFromObject = function(data, obj) {
			if (data) {
				obj = obj || new exports();

				if (data.hasOwnProperty("id")) {
					obj["id"] = ApiClient.convertToType(data["id"], "String");
				}
				if (data.hasOwnProperty("bpmn20Xml")) {
					obj["bpmn20Xml"] = ApiClient.convertToType(data["bpmn20Xml"], "String");
				}
			}
			return obj;
		};

		/**
   * The id of the process definition.
   * @member {String} id
   */
		exports.prototype["id"] = undefined;
		/**
   * An escaped XML string containing the XML that this definition was deployed with. Carriage returns, line feeds and quotation marks are escaped.
   * @member {String} bpmn20Xml
   */
		exports.prototype["bpmn20Xml"] = undefined;



		return exports;
	}));



},{"../ApiClient":16}],108:[function(require,module,exports){
/**
 * Camunda REST API
 * Swagger OpenApi Spec for Camunda REST API.
 *
 * OpenAPI spec version: v7.8.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.3.1
 *
 * Do not edit the class manually.
 *
 */

	(function(root, factory) {
		if (typeof define === "function" && define.amd) {
			// AMD. Register as an anonymous module.
			define(["ApiClient"], factory);
		} else if (typeof module === "object" && module.exports) {
			// CommonJS-like environments that support module.exports, like Node.
			module.exports = factory(require("../ApiClient"));
		} else {
			// Browser globals (root is window)
			if (!root.CamundaRestApi) {
				root.CamundaRestApi = {};
			}
			root.CamundaRestApi.ProcessDefinitionDto = factory(root.CamundaRestApi.ApiClient);
		}
	}(this, function(ApiClient) {
		"use strict";




		/**
   * The ProcessDefinitionDto model module.
   * @module model/ProcessDefinitionDto
   * @version v7.8.0
   */

		/**
   * Constructs a new <code>ProcessDefinitionDto</code>.
   * @alias module:model/ProcessDefinitionDto
   * @class
   */
		var exports = function() {
			var _this = this;














		};

		/**
   * Constructs a <code>ProcessDefinitionDto</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:model/ProcessDefinitionDto} obj Optional instance to populate.
   * @return {module:model/ProcessDefinitionDto} The populated <code>ProcessDefinitionDto</code> instance.
   */
		exports.constructFromObject = function(data, obj) {
			if (data) {
				obj = obj || new exports();

				if (data.hasOwnProperty("id")) {
					obj["id"] = ApiClient.convertToType(data["id"], "String");
				}
				if (data.hasOwnProperty("key")) {
					obj["key"] = ApiClient.convertToType(data["key"], "String");
				}
				if (data.hasOwnProperty("category")) {
					obj["category"] = ApiClient.convertToType(data["category"], "String");
				}
				if (data.hasOwnProperty("description")) {
					obj["description"] = ApiClient.convertToType(data["description"], "String");
				}
				if (data.hasOwnProperty("name")) {
					obj["name"] = ApiClient.convertToType(data["name"], "String");
				}
				if (data.hasOwnProperty("version")) {
					obj["version"] = ApiClient.convertToType(data["version"], "Number");
				}
				if (data.hasOwnProperty("resource")) {
					obj["resource"] = ApiClient.convertToType(data["resource"], "String");
				}
				if (data.hasOwnProperty("deploymentId")) {
					obj["deploymentId"] = ApiClient.convertToType(data["deploymentId"], "String");
				}
				if (data.hasOwnProperty("diagram")) {
					obj["diagram"] = ApiClient.convertToType(data["diagram"], "String");
				}
				if (data.hasOwnProperty("suspended")) {
					obj["suspended"] = ApiClient.convertToType(data["suspended"], "Boolean");
				}
				if (data.hasOwnProperty("tenantId")) {
					obj["tenantId"] = ApiClient.convertToType(data["tenantId"], "String");
				}
				if (data.hasOwnProperty("versionTag")) {
					obj["versionTag"] = ApiClient.convertToType(data["versionTag"], "String");
				}
				if (data.hasOwnProperty("historyTimeToLive")) {
					obj["historyTimeToLive"] = ApiClient.convertToType(data["historyTimeToLive"], "Number");
				}
			}
			return obj;
		};

		/**
   * The id of the process definition.
   * @member {String} id
   */
		exports.prototype["id"] = undefined;
		/**
   * The key of the process definition, i.e., the id of the BPMN 2.0 XML process definition.
   * @member {String} key
   */
		exports.prototype["key"] = undefined;
		/**
   * The category of the process definition.
   * @member {String} category
   */
		exports.prototype["category"] = undefined;
		/**
   * The description of the process definition.
   * @member {String} description
   */
		exports.prototype["description"] = undefined;
		/**
   * The name of the process definition.
   * @member {String} name
   */
		exports.prototype["name"] = undefined;
		/**
   * The version of the process definition that the engine assigned to it.
   * @member {Number} version
   */
		exports.prototype["version"] = undefined;
		/**
   * The file name of the process definition.
   * @member {String} resource
   */
		exports.prototype["resource"] = undefined;
		/**
   * The deployment id of the process definition.
   * @member {String} deploymentId
   */
		exports.prototype["deploymentId"] = undefined;
		/**
   * The file name of the process definition diagram, if it exists.
   * @member {String} diagram
   */
		exports.prototype["diagram"] = undefined;
		/**
   * @member {Boolean} suspended
   */
		exports.prototype["suspended"] = undefined;
		/**
   * The tenant id of the process definition.
   * @member {String} tenantId
   */
		exports.prototype["tenantId"] = undefined;
		/**
   * The version tag of the process definition.
   * @member {String} versionTag
   */
		exports.prototype["versionTag"] = undefined;
		/**
   * History time to live value of the process definition. Is used within History cleanup.
   * @member {Number} historyTimeToLive
   */
		exports.prototype["historyTimeToLive"] = undefined;



		return exports;
	}));



},{"../ApiClient":16}],109:[function(require,module,exports){
/**
 * Camunda REST API
 * Swagger OpenApi Spec for Camunda REST API.
 *
 * OpenAPI spec version: v7.8.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.3.1
 *
 * Do not edit the class manually.
 *
 */

	(function(root, factory) {
		if (typeof define === "function" && define.amd) {
			// AMD. Register as an anonymous module.
			define(["ApiClient"], factory);
		} else if (typeof module === "object" && module.exports) {
			// CommonJS-like environments that support module.exports, like Node.
			module.exports = factory(require("../ApiClient"));
		} else {
			// Browser globals (root is window)
			if (!root.CamundaRestApi) {
				root.CamundaRestApi = {};
			}
			root.CamundaRestApi.ProcessDefinitionSuspensionStateDto = factory(root.CamundaRestApi.ApiClient);
		}
	}(this, function(ApiClient) {
		"use strict";




		/**
   * The ProcessDefinitionSuspensionStateDto model module.
   * @module model/ProcessDefinitionSuspensionStateDto
   * @version v7.8.0
   */

		/**
   * Constructs a new <code>ProcessDefinitionSuspensionStateDto</code>.
   * @alias module:model/ProcessDefinitionSuspensionStateDto
   * @class
   */
		var exports = function() {
			var _this = this;



		};

		/**
   * Constructs a <code>ProcessDefinitionSuspensionStateDto</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:model/ProcessDefinitionSuspensionStateDto} obj Optional instance to populate.
   * @return {module:model/ProcessDefinitionSuspensionStateDto} The populated <code>ProcessDefinitionSuspensionStateDto</code> instance.
   */
		exports.constructFromObject = function(data, obj) {
			if (data) {
				obj = obj || new exports();

				if (data.hasOwnProperty("suspended")) {
					obj["suspended"] = ApiClient.convertToType(data["suspended"], "Boolean");
				}
				if (data.hasOwnProperty("processDefinitionId")) {
					obj["processDefinitionId"] = ApiClient.convertToType(data["processDefinitionId"], "String");
				}
			}
			return obj;
		};

		/**
   * A Boolean value which indicates whether to activate or suspend the batch. When the value is set to true, the batch will be suspended and when the value is set to false, the batch will be activated.
   * @member {Boolean} suspended
   */
		exports.prototype["suspended"] = undefined;
		/**
   * @member {String} processDefinitionId
   */
		exports.prototype["processDefinitionId"] = undefined;



		return exports;
	}));



},{"../ApiClient":16}],110:[function(require,module,exports){
/**
 * Camunda REST API
 * Swagger OpenApi Spec for Camunda REST API.
 *
 * OpenAPI spec version: v7.8.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.3.1
 *
 * Do not edit the class manually.
 *
 */

	(function(root, factory) {
		if (typeof define === "function" && define.amd) {
			// AMD. Register as an anonymous module.
			define(["ApiClient", "model/AtomLink"], factory);
		} else if (typeof module === "object" && module.exports) {
			// CommonJS-like environments that support module.exports, like Node.
			module.exports = factory(require("../ApiClient"), require("./AtomLink"));
		} else {
			// Browser globals (root is window)
			if (!root.CamundaRestApi) {
				root.CamundaRestApi = {};
			}
			root.CamundaRestApi.ProcessInstanceDto = factory(root.CamundaRestApi.ApiClient, root.CamundaRestApi.AtomLink);
		}
	}(this, function(ApiClient, AtomLink) {
		"use strict";




		/**
   * The ProcessInstanceDto model module.
   * @module model/ProcessInstanceDto
   * @version v7.8.0
   */

		/**
   * Constructs a new <code>ProcessInstanceDto</code>.
   * @alias module:model/ProcessInstanceDto
   * @class
   */
		var exports = function() {
			var _this = this;









		};

		/**
   * Constructs a <code>ProcessInstanceDto</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:model/ProcessInstanceDto} obj Optional instance to populate.
   * @return {module:model/ProcessInstanceDto} The populated <code>ProcessInstanceDto</code> instance.
   */
		exports.constructFromObject = function(data, obj) {
			if (data) {
				obj = obj || new exports();

				if (data.hasOwnProperty("links")) {
					obj["links"] = ApiClient.convertToType(data["links"], [AtomLink]);
				}
				if (data.hasOwnProperty("id")) {
					obj["id"] = ApiClient.convertToType(data["id"], "String");
				}
				if (data.hasOwnProperty("definitionId")) {
					obj["definitionId"] = ApiClient.convertToType(data["definitionId"], "String");
				}
				if (data.hasOwnProperty("businessKey")) {
					obj["businessKey"] = ApiClient.convertToType(data["businessKey"], "String");
				}
				if (data.hasOwnProperty("caseInstanceId")) {
					obj["caseInstanceId"] = ApiClient.convertToType(data["caseInstanceId"], "String");
				}
				if (data.hasOwnProperty("ended")) {
					obj["ended"] = ApiClient.convertToType(data["ended"], "Boolean");
				}
				if (data.hasOwnProperty("suspended")) {
					obj["suspended"] = ApiClient.convertToType(data["suspended"], "Boolean");
				}
				if (data.hasOwnProperty("tenantId")) {
					obj["tenantId"] = ApiClient.convertToType(data["tenantId"], "String");
				}
			}
			return obj;
		};

		/**
   * @member {Array.<module:model/AtomLink>} links
   */
		exports.prototype["links"] = undefined;
		/**
   * The id of the process instance.
   * @member {String} id
   */
		exports.prototype["id"] = undefined;
		/**
   * The id of the process definition.
   * @member {String} definitionId
   */
		exports.prototype["definitionId"] = undefined;
		/**
   * The business key of the process instance.
   * @member {String} businessKey
   */
		exports.prototype["businessKey"] = undefined;
		/**
   * The case instance id of the process instance.
   * @member {String} caseInstanceId
   */
		exports.prototype["caseInstanceId"] = undefined;
		/**
   * @member {Boolean} ended
   */
		exports.prototype["ended"] = undefined;
		/**
   * @member {Boolean} suspended
   */
		exports.prototype["suspended"] = undefined;
		/**
   * The tenant id of the process instance.
   * @member {String} tenantId
   */
		exports.prototype["tenantId"] = undefined;



		return exports;
	}));



},{"../ApiClient":16,"./AtomLink":43}],111:[function(require,module,exports){
/**
 * Camunda REST API
 * Swagger OpenApi Spec for Camunda REST API.
 *
 * OpenAPI spec version: v7.8.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.3.1
 *
 * Do not edit the class manually.
 *
 */

	(function(root, factory) {
		if (typeof define === "function" && define.amd) {
			// AMD. Register as an anonymous module.
			define(["ApiClient", "model/ProcessInstanceModificationInstructionDto"], factory);
		} else if (typeof module === "object" && module.exports) {
			// CommonJS-like environments that support module.exports, like Node.
			module.exports = factory(require("../ApiClient"), require("./ProcessInstanceModificationInstructionDto"));
		} else {
			// Browser globals (root is window)
			if (!root.CamundaRestApi) {
				root.CamundaRestApi = {};
			}
			root.CamundaRestApi.ProcessInstanceModificationDto = factory(root.CamundaRestApi.ApiClient, root.CamundaRestApi.ProcessInstanceModificationInstructionDto);
		}
	}(this, function(ApiClient, ProcessInstanceModificationInstructionDto) {
		"use strict";




		/**
   * The ProcessInstanceModificationDto model module.
   * @module model/ProcessInstanceModificationDto
   * @version v7.8.0
   */

		/**
   * Constructs a new <code>ProcessInstanceModificationDto</code>.
   * @alias module:model/ProcessInstanceModificationDto
   * @class
   */
		var exports = function() {
			var _this = this;




		};

		/**
   * Constructs a <code>ProcessInstanceModificationDto</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:model/ProcessInstanceModificationDto} obj Optional instance to populate.
   * @return {module:model/ProcessInstanceModificationDto} The populated <code>ProcessInstanceModificationDto</code> instance.
   */
		exports.constructFromObject = function(data, obj) {
			if (data) {
				obj = obj || new exports();

				if (data.hasOwnProperty("skipCustomListeners")) {
					obj["skipCustomListeners"] = ApiClient.convertToType(data["skipCustomListeners"], "Boolean");
				}
				if (data.hasOwnProperty("skipIoMappings")) {
					obj["skipIoMappings"] = ApiClient.convertToType(data["skipIoMappings"], "Boolean");
				}
				if (data.hasOwnProperty("instructions")) {
					obj["instructions"] = ApiClient.convertToType(data["instructions"], [ProcessInstanceModificationInstructionDto]);
				}
			}
			return obj;
		};

		/**
   * @member {Boolean} skipCustomListeners
   */
		exports.prototype["skipCustomListeners"] = undefined;
		/**
   * @member {Boolean} skipIoMappings
   */
		exports.prototype["skipIoMappings"] = undefined;
		/**
   * A JSON array of modification instructions. The instructions are executed in the order they are in. An instruction may have the following properties: type Mandatory. One of the following values: cancel, startBeforeActivity, startAfterActivity, startTransition. A cancel instruction requests cancellation of a single activity instance or all instances of one activity. A startBeforeActivity instruction requests to enter a given activity. A startAfterActivity instruction requests to execute the single outgoing sequence flow of a given activity. A startTransition instruction requests to execute a specific sequence flow. activityId Can be used with instructions of types startBeforeActivity, startAfterActivity, and cancel. Specifies the activity the instruction targets. transitionId Can be used with instructions of types startTransition. Specifies the sequence flow to start. activityInstanceId Can be used with instructions of type cancel. Specifies the activity instance to cancel. Valid values are the activity instance IDs supplied by the Get Activity Instance request. transitionInstanceId Can be used with instructions of type cancel. Specifies the transition instance to cancel. Valid values are the transition instance IDs supplied by the Get Activity Instance request. ancestorActivityInstanceId Can be used with instructions of type startBeforeActivity, startAfterActivity, and startTransition. Valid values are the activity instance IDs supplied by the Get Activity Instance request. If there are multiple parent activity instances of the targeted activity, this specifies the ancestor scope in which hierarchy the activity/transition is to be instantiated. Example: When there are two instances of a subprocess and an activity contained in the subprocess is to be started, this parameter allows to specifiy under which subprocess instance the activity should be started. variables Can be used with instructions of type startBeforeActivity, startAfterActivity, and startTransition. A JSON object containing variable key-value pairs. Each key is a variable name and each value a JSON variable value object.
   * @member {Array.<module:model/ProcessInstanceModificationInstructionDto>} instructions
   */
		exports.prototype["instructions"] = undefined;



		return exports;
	}));



},{"../ApiClient":16,"./ProcessInstanceModificationInstructionDto":112}],112:[function(require,module,exports){
/**
 * Camunda REST API
 * Swagger OpenApi Spec for Camunda REST API.
 *
 * OpenAPI spec version: v7.8.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.3.1
 *
 * Do not edit the class manually.
 *
 */

	(function(root, factory) {
		if (typeof define === "function" && define.amd) {
			// AMD. Register as an anonymous module.
			define(["ApiClient", "model/TriggerVariableValueDto"], factory);
		} else if (typeof module === "object" && module.exports) {
			// CommonJS-like environments that support module.exports, like Node.
			module.exports = factory(require("../ApiClient"), require("./TriggerVariableValueDto"));
		} else {
			// Browser globals (root is window)
			if (!root.CamundaRestApi) {
				root.CamundaRestApi = {};
			}
			root.CamundaRestApi.ProcessInstanceModificationInstructionDto = factory(root.CamundaRestApi.ApiClient, root.CamundaRestApi.TriggerVariableValueDto);
		}
	}(this, function(ApiClient, TriggerVariableValueDto) {
		"use strict";




		/**
   * The ProcessInstanceModificationInstructionDto model module.
   * @module model/ProcessInstanceModificationInstructionDto
   * @version v7.8.0
   */

		/**
   * Constructs a new <code>ProcessInstanceModificationInstructionDto</code>.
   * @alias module:model/ProcessInstanceModificationInstructionDto
   * @class
   */
		var exports = function() {
			var _this = this;









		};

		/**
   * Constructs a <code>ProcessInstanceModificationInstructionDto</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:model/ProcessInstanceModificationInstructionDto} obj Optional instance to populate.
   * @return {module:model/ProcessInstanceModificationInstructionDto} The populated <code>ProcessInstanceModificationInstructionDto</code> instance.
   */
		exports.constructFromObject = function(data, obj) {
			if (data) {
				obj = obj || new exports();

				if (data.hasOwnProperty("type")) {
					obj["type"] = ApiClient.convertToType(data["type"], "String");
				}
				if (data.hasOwnProperty("variables")) {
					obj["variables"] = ApiClient.convertToType(data["variables"], {"String": TriggerVariableValueDto});
				}
				if (data.hasOwnProperty("activityId")) {
					obj["activityId"] = ApiClient.convertToType(data["activityId"], "String");
				}
				if (data.hasOwnProperty("transitionId")) {
					obj["transitionId"] = ApiClient.convertToType(data["transitionId"], "String");
				}
				if (data.hasOwnProperty("activityInstanceId")) {
					obj["activityInstanceId"] = ApiClient.convertToType(data["activityInstanceId"], "String");
				}
				if (data.hasOwnProperty("transitionInstanceId")) {
					obj["transitionInstanceId"] = ApiClient.convertToType(data["transitionInstanceId"], "String");
				}
				if (data.hasOwnProperty("ancestorActivityInstanceId")) {
					obj["ancestorActivityInstanceId"] = ApiClient.convertToType(data["ancestorActivityInstanceId"], "String");
				}
				if (data.hasOwnProperty("cancelCurrentActiveActivityInstances")) {
					obj["cancelCurrentActiveActivityInstances"] = ApiClient.convertToType(data["cancelCurrentActiveActivityInstances"], "Boolean");
				}
			}
			return obj;
		};

		/**
   * @member {String} type
   */
		exports.prototype["type"] = undefined;
		/**
   * @member {Object.<String, module:model/TriggerVariableValueDto>} variables
   */
		exports.prototype["variables"] = undefined;
		/**
   * @member {String} activityId
   */
		exports.prototype["activityId"] = undefined;
		/**
   * @member {String} transitionId
   */
		exports.prototype["transitionId"] = undefined;
		/**
   * @member {String} activityInstanceId
   */
		exports.prototype["activityInstanceId"] = undefined;
		/**
   * @member {String} transitionInstanceId
   */
		exports.prototype["transitionInstanceId"] = undefined;
		/**
   * @member {String} ancestorActivityInstanceId
   */
		exports.prototype["ancestorActivityInstanceId"] = undefined;
		/**
   * @member {Boolean} cancelCurrentActiveActivityInstances
   */
		exports.prototype["cancelCurrentActiveActivityInstances"] = undefined;



		return exports;
	}));



},{"../ApiClient":16,"./TriggerVariableValueDto":131}],113:[function(require,module,exports){
/**
 * Camunda REST API
 * Swagger OpenApi Spec for Camunda REST API.
 *
 * OpenAPI spec version: v7.8.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.3.1
 *
 * Do not edit the class manually.
 *
 */

	(function(root, factory) {
		if (typeof define === "function" && define.amd) {
			// AMD. Register as an anonymous module.
			define(["ApiClient", "model/SortingDto", "model/VariableQueryParameterDto"], factory);
		} else if (typeof module === "object" && module.exports) {
			// CommonJS-like environments that support module.exports, like Node.
			module.exports = factory(require("../ApiClient"), require("./SortingDto"), require("./VariableQueryParameterDto"));
		} else {
			// Browser globals (root is window)
			if (!root.CamundaRestApi) {
				root.CamundaRestApi = {};
			}
			root.CamundaRestApi.ProcessInstanceQueryDto = factory(root.CamundaRestApi.ApiClient, root.CamundaRestApi.SortingDto, root.CamundaRestApi.VariableQueryParameterDto);
		}
	}(this, function(ApiClient, SortingDto, VariableQueryParameterDto) {
		"use strict";




		/**
   * The ProcessInstanceQueryDto model module.
   * @module model/ProcessInstanceQueryDto
   * @version v7.8.0
   */

		/**
   * Constructs a new <code>ProcessInstanceQueryDto</code>.
   * @alias module:model/ProcessInstanceQueryDto
   * @class
   */
		var exports = function() {
			var _this = this;























		};

		/**
   * Constructs a <code>ProcessInstanceQueryDto</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:model/ProcessInstanceQueryDto} obj Optional instance to populate.
   * @return {module:model/ProcessInstanceQueryDto} The populated <code>ProcessInstanceQueryDto</code> instance.
   */
		exports.constructFromObject = function(data, obj) {
			if (data) {
				obj = obj || new exports();

				if (data.hasOwnProperty("deploymentId")) {
					obj["deploymentId"] = ApiClient.convertToType(data["deploymentId"], "String");
				}
				if (data.hasOwnProperty("processDefinitionKey")) {
					obj["processDefinitionKey"] = ApiClient.convertToType(data["processDefinitionKey"], "String");
				}
				if (data.hasOwnProperty("businessKey")) {
					obj["businessKey"] = ApiClient.convertToType(data["businessKey"], "String");
				}
				if (data.hasOwnProperty("businessKeyLike")) {
					obj["businessKeyLike"] = ApiClient.convertToType(data["businessKeyLike"], "String");
				}
				if (data.hasOwnProperty("caseInstanceId")) {
					obj["caseInstanceId"] = ApiClient.convertToType(data["caseInstanceId"], "String");
				}
				if (data.hasOwnProperty("processDefinitionId")) {
					obj["processDefinitionId"] = ApiClient.convertToType(data["processDefinitionId"], "String");
				}
				if (data.hasOwnProperty("superProcessInstance")) {
					obj["superProcessInstance"] = ApiClient.convertToType(data["superProcessInstance"], "String");
				}
				if (data.hasOwnProperty("subProcessInstance")) {
					obj["subProcessInstance"] = ApiClient.convertToType(data["subProcessInstance"], "String");
				}
				if (data.hasOwnProperty("superCaseInstance")) {
					obj["superCaseInstance"] = ApiClient.convertToType(data["superCaseInstance"], "String");
				}
				if (data.hasOwnProperty("subCaseInstance")) {
					obj["subCaseInstance"] = ApiClient.convertToType(data["subCaseInstance"], "String");
				}
				if (data.hasOwnProperty("active")) {
					obj["active"] = ApiClient.convertToType(data["active"], "Boolean");
				}
				if (data.hasOwnProperty("suspended")) {
					obj["suspended"] = ApiClient.convertToType(data["suspended"], "Boolean");
				}
				if (data.hasOwnProperty("processInstanceIds")) {
					obj["processInstanceIds"] = ApiClient.convertToType(data["processInstanceIds"], ["String"]);
				}
				if (data.hasOwnProperty("incidentId")) {
					obj["incidentId"] = ApiClient.convertToType(data["incidentId"], "String");
				}
				if (data.hasOwnProperty("incidentType")) {
					obj["incidentType"] = ApiClient.convertToType(data["incidentType"], "String");
				}
				if (data.hasOwnProperty("incidentMessage")) {
					obj["incidentMessage"] = ApiClient.convertToType(data["incidentMessage"], "String");
				}
				if (data.hasOwnProperty("incidentMessageLike")) {
					obj["incidentMessageLike"] = ApiClient.convertToType(data["incidentMessageLike"], "String");
				}
				if (data.hasOwnProperty("withoutTenantId")) {
					obj["withoutTenantId"] = ApiClient.convertToType(data["withoutTenantId"], "Boolean");
				}
				if (data.hasOwnProperty("activityIds")) {
					obj["activityIds"] = ApiClient.convertToType(data["activityIds"], ["String"]);
				}
				if (data.hasOwnProperty("variables")) {
					obj["variables"] = ApiClient.convertToType(data["variables"], [VariableQueryParameterDto]);
				}
				if (data.hasOwnProperty("tenantIdIn")) {
					obj["tenantIdIn"] = ApiClient.convertToType(data["tenantIdIn"], ["String"]);
				}
				if (data.hasOwnProperty("sorting")) {
					obj["sorting"] = ApiClient.convertToType(data["sorting"], [SortingDto]);
				}
			}
			return obj;
		};

		/**
   * Filter by the deployment the id belongs to.
   * @member {String} deploymentId
   */
		exports.prototype["deploymentId"] = undefined;
		/**
   * Filter by the key of the process definition the instances run on.
   * @member {String} processDefinitionKey
   */
		exports.prototype["processDefinitionKey"] = undefined;
		/**
   * Filter by process instance business key.
   * @member {String} businessKey
   */
		exports.prototype["businessKey"] = undefined;
		/**
   * Filter by process instance business key that the parameter is a substring of.
   * @member {String} businessKeyLike
   */
		exports.prototype["businessKeyLike"] = undefined;
		/**
   * Filter by case instance id.
   * @member {String} caseInstanceId
   */
		exports.prototype["caseInstanceId"] = undefined;
		/**
   * Filter by the process definition the instances run on.
   * @member {String} processDefinitionId
   */
		exports.prototype["processDefinitionId"] = undefined;
		/**
   * Restrict query to all process instances that are sub process instances of the given process instance. Takes a process instance id.
   * @member {String} superProcessInstance
   */
		exports.prototype["superProcessInstance"] = undefined;
		/**
   * Restrict query to all process instances that have the given process instance as a sub process instance. Takes a process instance id.
   * @member {String} subProcessInstance
   */
		exports.prototype["subProcessInstance"] = undefined;
		/**
   * Restrict query to all process instances that are sub process instances of the given case instance. Takes a case instance id.
   * @member {String} superCaseInstance
   */
		exports.prototype["superCaseInstance"] = undefined;
		/**
   * Restrict query to all process instances that have the given case instance as a sub case instance. Takes a case instance id.
   * @member {String} subCaseInstance
   */
		exports.prototype["subCaseInstance"] = undefined;
		/**
   * @member {Boolean} active
   */
		exports.prototype["active"] = undefined;
		/**
   * @member {Boolean} suspended
   */
		exports.prototype["suspended"] = undefined;
		/**
   * Filter by a list of process instance ids. Must be a JSON array of Strings.
   * @member {Array.<String>} processInstanceIds
   */
		exports.prototype["processInstanceIds"] = undefined;
		/**
   * Filter by the incident id.
   * @member {String} incidentId
   */
		exports.prototype["incidentId"] = undefined;
		/**
   * Filter by the incident type. See the User Guide for a list of incident types.
   * @member {String} incidentType
   */
		exports.prototype["incidentType"] = undefined;
		/**
   * Filter by the incident message. Exact match.
   * @member {String} incidentMessage
   */
		exports.prototype["incidentMessage"] = undefined;
		/**
   * Filter by the incident message that the parameter is a substring of.
   * @member {String} incidentMessageLike
   */
		exports.prototype["incidentMessageLike"] = undefined;
		/**
   * @member {Boolean} withoutTenantId
   */
		exports.prototype["withoutTenantId"] = undefined;
		/**
   * @member {Array.<String>} activityIds
   */
		exports.prototype["activityIds"] = undefined;
		/**
   * A JSON array to only include process instances that have variables with certain values. The array consists of objects with the three properties key, operator and value. key (String) is the variable name, operator (String) is the comparison operator to be used and value the variable value. value may be String, Number or Boolean. Valid operator values are: eq - equal to; neq - not equal to; gt - greater than; gteq - greater than or equal to; lt - lower than; lteq - lower than or equal to; like.
   * @member {Array.<module:model/VariableQueryParameterDto>} variables
   */
		exports.prototype["variables"] = undefined;
		/**
   * Filter by a list of tenant ids. A process instance must have one of the given tenant ids. Must be a JSON array of Strings.
   * @member {Array.<String>} tenantIdIn
   */
		exports.prototype["tenantIdIn"] = undefined;
		/**
   * @member {Array.<module:model/SortingDto>} sorting
   */
		exports.prototype["sorting"] = undefined;



		return exports;
	}));



},{"../ApiClient":16,"./SortingDto":121,"./VariableQueryParameterDto":139}],114:[function(require,module,exports){
/**
 * Camunda REST API
 * Swagger OpenApi Spec for Camunda REST API.
 *
 * OpenAPI spec version: v7.8.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.3.1
 *
 * Do not edit the class manually.
 *
 */

	(function(root, factory) {
		if (typeof define === "function" && define.amd) {
			// AMD. Register as an anonymous module.
			define(["ApiClient", "model/HistoricProcessInstanceQueryDto", "model/ProcessInstanceQueryDto"], factory);
		} else if (typeof module === "object" && module.exports) {
			// CommonJS-like environments that support module.exports, like Node.
			module.exports = factory(require("../ApiClient"), require("./HistoricProcessInstanceQueryDto"), require("./ProcessInstanceQueryDto"));
		} else {
			// Browser globals (root is window)
			if (!root.CamundaRestApi) {
				root.CamundaRestApi = {};
			}
			root.CamundaRestApi.ProcessInstanceSuspensionStateDto = factory(root.CamundaRestApi.ApiClient, root.CamundaRestApi.HistoricProcessInstanceQueryDto, root.CamundaRestApi.ProcessInstanceQueryDto);
		}
	}(this, function(ApiClient, HistoricProcessInstanceQueryDto, ProcessInstanceQueryDto) {
		"use strict";




		/**
   * The ProcessInstanceSuspensionStateDto model module.
   * @module model/ProcessInstanceSuspensionStateDto
   * @version v7.8.0
   */

		/**
   * Constructs a new <code>ProcessInstanceSuspensionStateDto</code>.
   * @alias module:model/ProcessInstanceSuspensionStateDto
   * @class
   */
		var exports = function() {
			var _this = this;





		};

		/**
   * Constructs a <code>ProcessInstanceSuspensionStateDto</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:model/ProcessInstanceSuspensionStateDto} obj Optional instance to populate.
   * @return {module:model/ProcessInstanceSuspensionStateDto} The populated <code>ProcessInstanceSuspensionStateDto</code> instance.
   */
		exports.constructFromObject = function(data, obj) {
			if (data) {
				obj = obj || new exports();

				if (data.hasOwnProperty("suspended")) {
					obj["suspended"] = ApiClient.convertToType(data["suspended"], "Boolean");
				}
				if (data.hasOwnProperty("processInstanceId")) {
					obj["processInstanceId"] = ApiClient.convertToType(data["processInstanceId"], "String");
				}
				if (data.hasOwnProperty("processInstanceQuery")) {
					obj["processInstanceQuery"] = ProcessInstanceQueryDto.constructFromObject(data["processInstanceQuery"]);
				}
				if (data.hasOwnProperty("historicProcessInstanceQuery")) {
					obj["historicProcessInstanceQuery"] = HistoricProcessInstanceQueryDto.constructFromObject(data["historicProcessInstanceQuery"]);
				}
			}
			return obj;
		};

		/**
   * A Boolean value which indicates whether to activate or suspend the batch. When the value is set to true, the batch will be suspended and when the value is set to false, the batch will be activated.
   * @member {Boolean} suspended
   */
		exports.prototype["suspended"] = undefined;
		/**
   * @member {String} processInstanceId
   */
		exports.prototype["processInstanceId"] = undefined;
		/**
   * @member {module:model/ProcessInstanceQueryDto} processInstanceQuery
   */
		exports.prototype["processInstanceQuery"] = undefined;
		/**
   * @member {module:model/HistoricProcessInstanceQueryDto} historicProcessInstanceQuery
   */
		exports.prototype["historicProcessInstanceQuery"] = undefined;



		return exports;
	}));



},{"../ApiClient":16,"./HistoricProcessInstanceQueryDto":84,"./ProcessInstanceQueryDto":113}],115:[function(require,module,exports){
/**
 * Camunda REST API
 * Swagger OpenApi Spec for Camunda REST API.
 *
 * OpenAPI spec version: v7.8.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.3.1
 *
 * Do not edit the class manually.
 *
 */

	(function(root, factory) {
		if (typeof define === "function" && define.amd) {
			// AMD. Register as an anonymous module.
			define(["ApiClient"], factory);
		} else if (typeof module === "object" && module.exports) {
			// CommonJS-like environments that support module.exports, like Node.
			module.exports = factory(require("../ApiClient"));
		} else {
			// Browser globals (root is window)
			if (!root.CamundaRestApi) {
				root.CamundaRestApi = {};
			}
			root.CamundaRestApi.RedeploymentDto = factory(root.CamundaRestApi.ApiClient);
		}
	}(this, function(ApiClient) {
		"use strict";




		/**
   * The RedeploymentDto model module.
   * @module model/RedeploymentDto
   * @version v7.8.0
   */

		/**
   * Constructs a new <code>RedeploymentDto</code>.
   * @alias module:model/RedeploymentDto
   * @class
   */
		var exports = function() {
			var _this = this;




		};

		/**
   * Constructs a <code>RedeploymentDto</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:model/RedeploymentDto} obj Optional instance to populate.
   * @return {module:model/RedeploymentDto} The populated <code>RedeploymentDto</code> instance.
   */
		exports.constructFromObject = function(data, obj) {
			if (data) {
				obj = obj || new exports();

				if (data.hasOwnProperty("source")) {
					obj["source"] = ApiClient.convertToType(data["source"], "String");
				}
				if (data.hasOwnProperty("resourceIds")) {
					obj["resourceIds"] = ApiClient.convertToType(data["resourceIds"], ["String"]);
				}
				if (data.hasOwnProperty("resourceNames")) {
					obj["resourceNames"] = ApiClient.convertToType(data["resourceNames"], ["String"]);
				}
			}
			return obj;
		};

		/**
   * Sets the source of the deployment.
   * @member {String} source
   */
		exports.prototype["source"] = undefined;
		/**
   * A list of deployment resource ids to re-deploy.
   * @member {Array.<String>} resourceIds
   */
		exports.prototype["resourceIds"] = undefined;
		/**
   * A list of deployment resource names to re-deploy.
   * @member {Array.<String>} resourceNames
   */
		exports.prototype["resourceNames"] = undefined;



		return exports;
	}));



},{"../ApiClient":16}],116:[function(require,module,exports){
/**
 * Camunda REST API
 * Swagger OpenApi Spec for Camunda REST API.
 *
 * OpenAPI spec version: v7.8.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.3.1
 *
 * Do not edit the class manually.
 *
 */

	(function(root, factory) {
		if (typeof define === "function" && define.amd) {
			// AMD. Register as an anonymous module.
			define(["ApiClient", "model/AtomLink"], factory);
		} else if (typeof module === "object" && module.exports) {
			// CommonJS-like environments that support module.exports, like Node.
			module.exports = factory(require("../ApiClient"), require("./AtomLink"));
		} else {
			// Browser globals (root is window)
			if (!root.CamundaRestApi) {
				root.CamundaRestApi = {};
			}
			root.CamundaRestApi.ResourceOptionsDto = factory(root.CamundaRestApi.ApiClient, root.CamundaRestApi.AtomLink);
		}
	}(this, function(ApiClient, AtomLink) {
		"use strict";




		/**
   * The ResourceOptionsDto model module.
   * @module model/ResourceOptionsDto
   * @version v7.8.0
   */

		/**
   * Constructs a new <code>ResourceOptionsDto</code>.
   * @alias module:model/ResourceOptionsDto
   * @class
   */
		var exports = function() {
			var _this = this;


		};

		/**
   * Constructs a <code>ResourceOptionsDto</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:model/ResourceOptionsDto} obj Optional instance to populate.
   * @return {module:model/ResourceOptionsDto} The populated <code>ResourceOptionsDto</code> instance.
   */
		exports.constructFromObject = function(data, obj) {
			if (data) {
				obj = obj || new exports();

				if (data.hasOwnProperty("links")) {
					obj["links"] = ApiClient.convertToType(data["links"], [AtomLink]);
				}
			}
			return obj;
		};

		/**
   * @member {Array.<module:model/AtomLink>} links
   */
		exports.prototype["links"] = undefined;



		return exports;
	}));



},{"../ApiClient":16,"./AtomLink":43}],117:[function(require,module,exports){
/**
 * Camunda REST API
 * Swagger OpenApi Spec for Camunda REST API.
 *
 * OpenAPI spec version: v7.8.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.3.1
 *
 * Do not edit the class manually.
 *
 */

	(function(root, factory) {
		if (typeof define === "function" && define.amd) {
			// AMD. Register as an anonymous module.
			define(["ApiClient"], factory);
		} else if (typeof module === "object" && module.exports) {
			// CommonJS-like environments that support module.exports, like Node.
			module.exports = factory(require("../ApiClient"));
		} else {
			// Browser globals (root is window)
			if (!root.CamundaRestApi) {
				root.CamundaRestApi = {};
			}
			root.CamundaRestApi.RetriesDto = factory(root.CamundaRestApi.ApiClient);
		}
	}(this, function(ApiClient) {
		"use strict";




		/**
   * The RetriesDto model module.
   * @module model/RetriesDto
   * @version v7.8.0
   */

		/**
   * Constructs a new <code>RetriesDto</code>.
   * @alias module:model/RetriesDto
   * @class
   */
		var exports = function() {
			var _this = this;


		};

		/**
   * Constructs a <code>RetriesDto</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:model/RetriesDto} obj Optional instance to populate.
   * @return {module:model/RetriesDto} The populated <code>RetriesDto</code> instance.
   */
		exports.constructFromObject = function(data, obj) {
			if (data) {
				obj = obj || new exports();

				if (data.hasOwnProperty("retries")) {
					obj["retries"] = ApiClient.convertToType(data["retries"], "Number");
				}
			}
			return obj;
		};

		/**
   * The number of retries to set that a job has left.
   * @member {Number} retries
   */
		exports.prototype["retries"] = undefined;



		return exports;
	}));



},{"../ApiClient":16}],118:[function(require,module,exports){
/**
 * Camunda REST API
 * Swagger OpenApi Spec for Camunda REST API.
 *
 * OpenAPI spec version: v7.8.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.3.1
 *
 * Do not edit the class manually.
 *
 */

	(function(root, factory) {
		if (typeof define === "function" && define.amd) {
			// AMD. Register as an anonymous module.
			define(["ApiClient", "model/HistoricProcessInstanceQueryDto", "model/ProcessInstanceQueryDto"], factory);
		} else if (typeof module === "object" && module.exports) {
			// CommonJS-like environments that support module.exports, like Node.
			module.exports = factory(require("../ApiClient"), require("./HistoricProcessInstanceQueryDto"), require("./ProcessInstanceQueryDto"));
		} else {
			// Browser globals (root is window)
			if (!root.CamundaRestApi) {
				root.CamundaRestApi = {};
			}
			root.CamundaRestApi.SetJobRetriesByProcessDto = factory(root.CamundaRestApi.ApiClient, root.CamundaRestApi.HistoricProcessInstanceQueryDto, root.CamundaRestApi.ProcessInstanceQueryDto);
		}
	}(this, function(ApiClient, HistoricProcessInstanceQueryDto, ProcessInstanceQueryDto) {
		"use strict";




		/**
   * The SetJobRetriesByProcessDto model module.
   * @module model/SetJobRetriesByProcessDto
   * @version v7.8.0
   */

		/**
   * Constructs a new <code>SetJobRetriesByProcessDto</code>.
   * @alias module:model/SetJobRetriesByProcessDto
   * @class
   */
		var exports = function() {
			var _this = this;





		};

		/**
   * Constructs a <code>SetJobRetriesByProcessDto</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:model/SetJobRetriesByProcessDto} obj Optional instance to populate.
   * @return {module:model/SetJobRetriesByProcessDto} The populated <code>SetJobRetriesByProcessDto</code> instance.
   */
		exports.constructFromObject = function(data, obj) {
			if (data) {
				obj = obj || new exports();

				if (data.hasOwnProperty("processInstances")) {
					obj["processInstances"] = ApiClient.convertToType(data["processInstances"], ["String"]);
				}
				if (data.hasOwnProperty("processInstanceQuery")) {
					obj["processInstanceQuery"] = ProcessInstanceQueryDto.constructFromObject(data["processInstanceQuery"]);
				}
				if (data.hasOwnProperty("historicProcessInstanceQuery")) {
					obj["historicProcessInstanceQuery"] = HistoricProcessInstanceQueryDto.constructFromObject(data["historicProcessInstanceQuery"]);
				}
				if (data.hasOwnProperty("retries")) {
					obj["retries"] = ApiClient.convertToType(data["retries"], "Number");
				}
			}
			return obj;
		};

		/**
   * A list of process instance ids to fetch jobs, for which retries will be set.
   * @member {Array.<String>} processInstances
   */
		exports.prototype["processInstances"] = undefined;
		/**
   * A process instance query like the request body for the Get Instances (POST) method.
   * @member {module:model/ProcessInstanceQueryDto} processInstanceQuery
   */
		exports.prototype["processInstanceQuery"] = undefined;
		/**
   * A historic process instance query like the request body described by POST /history/process-instance .
   * @member {module:model/HistoricProcessInstanceQueryDto} historicProcessInstanceQuery
   */
		exports.prototype["historicProcessInstanceQuery"] = undefined;
		/**
   * An integer representing the number of retries. Please note that the value cannot be negative or null.
   * @member {Number} retries
   */
		exports.prototype["retries"] = undefined;



		return exports;
	}));



},{"../ApiClient":16,"./HistoricProcessInstanceQueryDto":84,"./ProcessInstanceQueryDto":113}],119:[function(require,module,exports){
/**
 * Camunda REST API
 * Swagger OpenApi Spec for Camunda REST API.
 *
 * OpenAPI spec version: v7.8.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.3.1
 *
 * Do not edit the class manually.
 *
 */

	(function(root, factory) {
		if (typeof define === "function" && define.amd) {
			// AMD. Register as an anonymous module.
			define(["ApiClient", "model/JobQueryDto"], factory);
		} else if (typeof module === "object" && module.exports) {
			// CommonJS-like environments that support module.exports, like Node.
			module.exports = factory(require("../ApiClient"), require("./JobQueryDto"));
		} else {
			// Browser globals (root is window)
			if (!root.CamundaRestApi) {
				root.CamundaRestApi = {};
			}
			root.CamundaRestApi.SetJobRetriesDto = factory(root.CamundaRestApi.ApiClient, root.CamundaRestApi.JobQueryDto);
		}
	}(this, function(ApiClient, JobQueryDto) {
		"use strict";




		/**
   * The SetJobRetriesDto model module.
   * @module model/SetJobRetriesDto
   * @version v7.8.0
   */

		/**
   * Constructs a new <code>SetJobRetriesDto</code>.
   * @alias module:model/SetJobRetriesDto
   * @class
   */
		var exports = function() {
			var _this = this;




		};

		/**
   * Constructs a <code>SetJobRetriesDto</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:model/SetJobRetriesDto} obj Optional instance to populate.
   * @return {module:model/SetJobRetriesDto} The populated <code>SetJobRetriesDto</code> instance.
   */
		exports.constructFromObject = function(data, obj) {
			if (data) {
				obj = obj || new exports();

				if (data.hasOwnProperty("jobIds")) {
					obj["jobIds"] = ApiClient.convertToType(data["jobIds"], ["String"]);
				}
				if (data.hasOwnProperty("jobQuery")) {
					obj["jobQuery"] = JobQueryDto.constructFromObject(data["jobQuery"]);
				}
				if (data.hasOwnProperty("retries")) {
					obj["retries"] = ApiClient.convertToType(data["retries"], "Number");
				}
			}
			return obj;
		};

		/**
   * A list of job ids to set retries for.
   * @member {Array.<String>} jobIds
   */
		exports.prototype["jobIds"] = undefined;
		/**
   * A job query like the request body for the Get Jobs (POST) method.
   * @member {module:model/JobQueryDto} jobQuery
   */
		exports.prototype["jobQuery"] = undefined;
		/**
   * An integer representing the number of retries. Please note that the value cannot be negative or null.
   * @member {Number} retries
   */
		exports.prototype["retries"] = undefined;



		return exports;
	}));



},{"../ApiClient":16,"./JobQueryDto":95}],120:[function(require,module,exports){
/**
 * Camunda REST API
 * Swagger OpenApi Spec for Camunda REST API.
 *
 * OpenAPI spec version: v7.8.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.3.1
 *
 * Do not edit the class manually.
 *
 */

	(function(root, factory) {
		if (typeof define === "function" && define.amd) {
			// AMD. Register as an anonymous module.
			define(["ApiClient", "model/ExternalTaskQueryDto", "model/HistoricProcessInstanceQueryDto", "model/ProcessInstanceQueryDto"], factory);
		} else if (typeof module === "object" && module.exports) {
			// CommonJS-like environments that support module.exports, like Node.
			module.exports = factory(require("../ApiClient"), require("./ExternalTaskQueryDto"), require("./HistoricProcessInstanceQueryDto"), require("./ProcessInstanceQueryDto"));
		} else {
			// Browser globals (root is window)
			if (!root.CamundaRestApi) {
				root.CamundaRestApi = {};
			}
			root.CamundaRestApi.SetRetriesForExternalTasksDto = factory(root.CamundaRestApi.ApiClient, root.CamundaRestApi.ExternalTaskQueryDto, root.CamundaRestApi.HistoricProcessInstanceQueryDto, root.CamundaRestApi.ProcessInstanceQueryDto);
		}
	}(this, function(ApiClient, ExternalTaskQueryDto, HistoricProcessInstanceQueryDto, ProcessInstanceQueryDto) {
		"use strict";




		/**
   * The SetRetriesForExternalTasksDto model module.
   * @module model/SetRetriesForExternalTasksDto
   * @version v7.8.0
   */

		/**
   * Constructs a new <code>SetRetriesForExternalTasksDto</code>.
   * @alias module:model/SetRetriesForExternalTasksDto
   * @class
   */
		var exports = function() {
			var _this = this;







		};

		/**
   * Constructs a <code>SetRetriesForExternalTasksDto</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:model/SetRetriesForExternalTasksDto} obj Optional instance to populate.
   * @return {module:model/SetRetriesForExternalTasksDto} The populated <code>SetRetriesForExternalTasksDto</code> instance.
   */
		exports.constructFromObject = function(data, obj) {
			if (data) {
				obj = obj || new exports();

				if (data.hasOwnProperty("externalTaskIds")) {
					obj["externalTaskIds"] = ApiClient.convertToType(data["externalTaskIds"], ["String"]);
				}
				if (data.hasOwnProperty("processInstanceIds")) {
					obj["processInstanceIds"] = ApiClient.convertToType(data["processInstanceIds"], ["String"]);
				}
				if (data.hasOwnProperty("externalTaskQuery")) {
					obj["externalTaskQuery"] = ExternalTaskQueryDto.constructFromObject(data["externalTaskQuery"]);
				}
				if (data.hasOwnProperty("processInstanceQuery")) {
					obj["processInstanceQuery"] = ProcessInstanceQueryDto.constructFromObject(data["processInstanceQuery"]);
				}
				if (data.hasOwnProperty("historicProcessInstanceQuery")) {
					obj["historicProcessInstanceQuery"] = HistoricProcessInstanceQueryDto.constructFromObject(data["historicProcessInstanceQuery"]);
				}
				if (data.hasOwnProperty("retries")) {
					obj["retries"] = ApiClient.convertToType(data["retries"], "Number");
				}
			}
			return obj;
		};

		/**
   * The ids of the external tasks to set the number of retries for.
   * @member {Array.<String>} externalTaskIds
   */
		exports.prototype["externalTaskIds"] = undefined;
		/**
   * @member {Array.<String>} processInstanceIds
   */
		exports.prototype["processInstanceIds"] = undefined;
		/**
   * Query for the external tasks to set the number of retries for.
   * @member {module:model/ExternalTaskQueryDto} externalTaskQuery
   */
		exports.prototype["externalTaskQuery"] = undefined;
		/**
   * @member {module:model/ProcessInstanceQueryDto} processInstanceQuery
   */
		exports.prototype["processInstanceQuery"] = undefined;
		/**
   * @member {module:model/HistoricProcessInstanceQueryDto} historicProcessInstanceQuery
   */
		exports.prototype["historicProcessInstanceQuery"] = undefined;
		/**
   * The number of retries to set for the external task. Must be >= 0. If this is 0, an incident is created and the task cannot be fetched anymore unless the retries are increased again.
   * @member {Number} retries
   */
		exports.prototype["retries"] = undefined;



		return exports;
	}));



},{"../ApiClient":16,"./ExternalTaskQueryDto":77,"./HistoricProcessInstanceQueryDto":84,"./ProcessInstanceQueryDto":113}],121:[function(require,module,exports){
/**
 * Camunda REST API
 * Swagger OpenApi Spec for Camunda REST API.
 *
 * OpenAPI spec version: v7.8.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.3.1
 *
 * Do not edit the class manually.
 *
 */

	(function(root, factory) {
		if (typeof define === "function" && define.amd) {
			// AMD. Register as an anonymous module.
			define(["ApiClient"], factory);
		} else if (typeof module === "object" && module.exports) {
			// CommonJS-like environments that support module.exports, like Node.
			module.exports = factory(require("../ApiClient"));
		} else {
			// Browser globals (root is window)
			if (!root.CamundaRestApi) {
				root.CamundaRestApi = {};
			}
			root.CamundaRestApi.SortingDto = factory(root.CamundaRestApi.ApiClient);
		}
	}(this, function(ApiClient) {
		"use strict";




		/**
   * The SortingDto model module.
   * @module model/SortingDto
   * @version v7.8.0
   */

		/**
   * Constructs a new <code>SortingDto</code>.
   * @alias module:model/SortingDto
   * @class
   */
		var exports = function() {
			var _this = this;




		};

		/**
   * Constructs a <code>SortingDto</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:model/SortingDto} obj Optional instance to populate.
   * @return {module:model/SortingDto} The populated <code>SortingDto</code> instance.
   */
		exports.constructFromObject = function(data, obj) {
			if (data) {
				obj = obj || new exports();

				if (data.hasOwnProperty("sortBy")) {
					obj["sortBy"] = ApiClient.convertToType(data["sortBy"], "String");
				}
				if (data.hasOwnProperty("sortOrder")) {
					obj["sortOrder"] = ApiClient.convertToType(data["sortOrder"], "String");
				}
				if (data.hasOwnProperty("parameters")) {
					obj["parameters"] = ApiClient.convertToType(data["parameters"], {"String": Object});
				}
			}
			return obj;
		};

		/**
   * @member {String} sortBy
   */
		exports.prototype["sortBy"] = undefined;
		/**
   * @member {String} sortOrder
   */
		exports.prototype["sortOrder"] = undefined;
		/**
   * @member {Object.<String, Object>} parameters
   */
		exports.prototype["parameters"] = undefined;



		return exports;
	}));



},{"../ApiClient":16}],122:[function(require,module,exports){
/**
 * Camunda REST API
 * Swagger OpenApi Spec for Camunda REST API.
 *
 * OpenAPI spec version: v7.8.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.3.1
 *
 * Do not edit the class manually.
 *
 */

	(function(root, factory) {
		if (typeof define === "function" && define.amd) {
			// AMD. Register as an anonymous module.
			define(["ApiClient", "model/ProcessInstanceModificationInstructionDto", "model/TriggerVariableValueDto"], factory);
		} else if (typeof module === "object" && module.exports) {
			// CommonJS-like environments that support module.exports, like Node.
			module.exports = factory(require("../ApiClient"), require("./ProcessInstanceModificationInstructionDto"), require("./TriggerVariableValueDto"));
		} else {
			// Browser globals (root is window)
			if (!root.CamundaRestApi) {
				root.CamundaRestApi = {};
			}
			root.CamundaRestApi.StartAfterInstructionDto = factory(root.CamundaRestApi.ApiClient, root.CamundaRestApi.ProcessInstanceModificationInstructionDto, root.CamundaRestApi.TriggerVariableValueDto);
		}
	}(this, function(ApiClient, ProcessInstanceModificationInstructionDto, TriggerVariableValueDto) {
		"use strict";




		/**
   * The StartAfterInstructionDto model module.
   * @module model/StartAfterInstructionDto
   * @version v7.8.0
   */

		/**
   * Constructs a new <code>StartAfterInstructionDto</code>.
   * @alias module:model/StartAfterInstructionDto
   * @class
   * @extends module:model/ProcessInstanceModificationInstructionDto
   */
		var exports = function() {
			var _this = this;
			ProcessInstanceModificationInstructionDto.call(_this);
		};

		/**
   * Constructs a <code>StartAfterInstructionDto</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:model/StartAfterInstructionDto} obj Optional instance to populate.
   * @return {module:model/StartAfterInstructionDto} The populated <code>StartAfterInstructionDto</code> instance.
   */
		exports.constructFromObject = function(data, obj) {
			if (data) {
				obj = obj || new exports();
				ProcessInstanceModificationInstructionDto.constructFromObject(data, obj);
			}
			return obj;
		};

		exports.prototype = Object.create(ProcessInstanceModificationInstructionDto.prototype);
		exports.prototype.constructor = exports;




		return exports;
	}));



},{"../ApiClient":16,"./ProcessInstanceModificationInstructionDto":112,"./TriggerVariableValueDto":131}],123:[function(require,module,exports){
/**
 * Camunda REST API
 * Swagger OpenApi Spec for Camunda REST API.
 *
 * OpenAPI spec version: v7.8.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.3.1
 *
 * Do not edit the class manually.
 *
 */

	(function(root, factory) {
		if (typeof define === "function" && define.amd) {
			// AMD. Register as an anonymous module.
			define(["ApiClient", "model/ProcessInstanceModificationInstructionDto", "model/TriggerVariableValueDto"], factory);
		} else if (typeof module === "object" && module.exports) {
			// CommonJS-like environments that support module.exports, like Node.
			module.exports = factory(require("../ApiClient"), require("./ProcessInstanceModificationInstructionDto"), require("./TriggerVariableValueDto"));
		} else {
			// Browser globals (root is window)
			if (!root.CamundaRestApi) {
				root.CamundaRestApi = {};
			}
			root.CamundaRestApi.StartBeforeInstructionDto = factory(root.CamundaRestApi.ApiClient, root.CamundaRestApi.ProcessInstanceModificationInstructionDto, root.CamundaRestApi.TriggerVariableValueDto);
		}
	}(this, function(ApiClient, ProcessInstanceModificationInstructionDto, TriggerVariableValueDto) {
		"use strict";




		/**
   * The StartBeforeInstructionDto model module.
   * @module model/StartBeforeInstructionDto
   * @version v7.8.0
   */

		/**
   * Constructs a new <code>StartBeforeInstructionDto</code>.
   * @alias module:model/StartBeforeInstructionDto
   * @class
   * @extends module:model/ProcessInstanceModificationInstructionDto
   */
		var exports = function() {
			var _this = this;
			ProcessInstanceModificationInstructionDto.call(_this);
		};

		/**
   * Constructs a <code>StartBeforeInstructionDto</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:model/StartBeforeInstructionDto} obj Optional instance to populate.
   * @return {module:model/StartBeforeInstructionDto} The populated <code>StartBeforeInstructionDto</code> instance.
   */
		exports.constructFromObject = function(data, obj) {
			if (data) {
				obj = obj || new exports();
				ProcessInstanceModificationInstructionDto.constructFromObject(data, obj);
			}
			return obj;
		};

		exports.prototype = Object.create(ProcessInstanceModificationInstructionDto.prototype);
		exports.prototype.constructor = exports;




		return exports;
	}));



},{"../ApiClient":16,"./ProcessInstanceModificationInstructionDto":112,"./TriggerVariableValueDto":131}],124:[function(require,module,exports){
/**
 * Camunda REST API
 * Swagger OpenApi Spec for Camunda REST API.
 *
 * OpenAPI spec version: v7.8.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.3.1
 *
 * Do not edit the class manually.
 *
 */

	(function(root, factory) {
		if (typeof define === "function" && define.amd) {
			// AMD. Register as an anonymous module.
			define(["ApiClient", "model/ProcessInstanceModificationInstructionDto", "model/VariableValueDto"], factory);
		} else if (typeof module === "object" && module.exports) {
			// CommonJS-like environments that support module.exports, like Node.
			module.exports = factory(require("../ApiClient"), require("./ProcessInstanceModificationInstructionDto"), require("./VariableValueDto"));
		} else {
			// Browser globals (root is window)
			if (!root.CamundaRestApi) {
				root.CamundaRestApi = {};
			}
			root.CamundaRestApi.StartProcessInstanceDto = factory(root.CamundaRestApi.ApiClient, root.CamundaRestApi.ProcessInstanceModificationInstructionDto, root.CamundaRestApi.VariableValueDto);
		}
	}(this, function(ApiClient, ProcessInstanceModificationInstructionDto, VariableValueDto) {
		"use strict";




		/**
   * The StartProcessInstanceDto model module.
   * @module model/StartProcessInstanceDto
   * @version v7.8.0
   */

		/**
   * Constructs a new <code>StartProcessInstanceDto</code>.
   * @alias module:model/StartProcessInstanceDto
   * @class
   */
		var exports = function() {
			var _this = this;








		};

		/**
   * Constructs a <code>StartProcessInstanceDto</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:model/StartProcessInstanceDto} obj Optional instance to populate.
   * @return {module:model/StartProcessInstanceDto} The populated <code>StartProcessInstanceDto</code> instance.
   */
		exports.constructFromObject = function(data, obj) {
			if (data) {
				obj = obj || new exports();

				if (data.hasOwnProperty("variables")) {
					obj["variables"] = ApiClient.convertToType(data["variables"], {"String": VariableValueDto});
				}
				if (data.hasOwnProperty("businessKey")) {
					obj["businessKey"] = ApiClient.convertToType(data["businessKey"], "String");
				}
				if (data.hasOwnProperty("caseInstanceId")) {
					obj["caseInstanceId"] = ApiClient.convertToType(data["caseInstanceId"], "String");
				}
				if (data.hasOwnProperty("startInstructions")) {
					obj["startInstructions"] = ApiClient.convertToType(data["startInstructions"], [ProcessInstanceModificationInstructionDto]);
				}
				if (data.hasOwnProperty("skipCustomListeners")) {
					obj["skipCustomListeners"] = ApiClient.convertToType(data["skipCustomListeners"], "Boolean");
				}
				if (data.hasOwnProperty("skipIoMappings")) {
					obj["skipIoMappings"] = ApiClient.convertToType(data["skipIoMappings"], "Boolean");
				}
				if (data.hasOwnProperty("withVariablesInReturn")) {
					obj["withVariablesInReturn"] = ApiClient.convertToType(data["withVariablesInReturn"], "Boolean");
				}
			}
			return obj;
		};

		/**
   * A JSON object containing the variables the process is to be initialized with. Each key corresponds to a variable name and each value to a variable value. A variable value is a JSON object with the following properties:
   * @member {Object.<String, module:model/VariableValueDto>} variables
   */
		exports.prototype["variables"] = undefined;
		/**
   * @member {String} businessKey
   */
		exports.prototype["businessKey"] = undefined;
		/**
   * @member {String} caseInstanceId
   */
		exports.prototype["caseInstanceId"] = undefined;
		/**
   * @member {Array.<module:model/ProcessInstanceModificationInstructionDto>} startInstructions
   */
		exports.prototype["startInstructions"] = undefined;
		/**
   * @member {Boolean} skipCustomListeners
   */
		exports.prototype["skipCustomListeners"] = undefined;
		/**
   * @member {Boolean} skipIoMappings
   */
		exports.prototype["skipIoMappings"] = undefined;
		/**
   * @member {Boolean} withVariablesInReturn
   */
		exports.prototype["withVariablesInReturn"] = undefined;



		return exports;
	}));



},{"../ApiClient":16,"./ProcessInstanceModificationInstructionDto":112,"./VariableValueDto":140}],125:[function(require,module,exports){
/**
 * Camunda REST API
 * Swagger OpenApi Spec for Camunda REST API.
 *
 * OpenAPI spec version: v7.8.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.3.1
 *
 * Do not edit the class manually.
 *
 */

	(function(root, factory) {
		if (typeof define === "function" && define.amd) {
			// AMD. Register as an anonymous module.
			define(["ApiClient", "model/ProcessInstanceModificationInstructionDto", "model/TriggerVariableValueDto"], factory);
		} else if (typeof module === "object" && module.exports) {
			// CommonJS-like environments that support module.exports, like Node.
			module.exports = factory(require("../ApiClient"), require("./ProcessInstanceModificationInstructionDto"), require("./TriggerVariableValueDto"));
		} else {
			// Browser globals (root is window)
			if (!root.CamundaRestApi) {
				root.CamundaRestApi = {};
			}
			root.CamundaRestApi.StartTransitionInstructionDto = factory(root.CamundaRestApi.ApiClient, root.CamundaRestApi.ProcessInstanceModificationInstructionDto, root.CamundaRestApi.TriggerVariableValueDto);
		}
	}(this, function(ApiClient, ProcessInstanceModificationInstructionDto, TriggerVariableValueDto) {
		"use strict";




		/**
   * The StartTransitionInstructionDto model module.
   * @module model/StartTransitionInstructionDto
   * @version v7.8.0
   */

		/**
   * Constructs a new <code>StartTransitionInstructionDto</code>.
   * @alias module:model/StartTransitionInstructionDto
   * @class
   * @extends module:model/ProcessInstanceModificationInstructionDto
   */
		var exports = function() {
			var _this = this;
			ProcessInstanceModificationInstructionDto.call(_this);
		};

		/**
   * Constructs a <code>StartTransitionInstructionDto</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:model/StartTransitionInstructionDto} obj Optional instance to populate.
   * @return {module:model/StartTransitionInstructionDto} The populated <code>StartTransitionInstructionDto</code> instance.
   */
		exports.constructFromObject = function(data, obj) {
			if (data) {
				obj = obj || new exports();
				ProcessInstanceModificationInstructionDto.constructFromObject(data, obj);
			}
			return obj;
		};

		exports.prototype = Object.create(ProcessInstanceModificationInstructionDto.prototype);
		exports.prototype.constructor = exports;




		return exports;
	}));



},{"../ApiClient":16,"./ProcessInstanceModificationInstructionDto":112,"./TriggerVariableValueDto":131}],126:[function(require,module,exports){
/**
 * Camunda REST API
 * Swagger OpenApi Spec for Camunda REST API.
 *
 * OpenAPI spec version: v7.8.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.3.1
 *
 * Do not edit the class manually.
 *
 */

	(function(root, factory) {
		if (typeof define === "function" && define.amd) {
			// AMD. Register as an anonymous module.
			define(["ApiClient"], factory);
		} else if (typeof module === "object" && module.exports) {
			// CommonJS-like environments that support module.exports, like Node.
			module.exports = factory(require("../ApiClient"));
		} else {
			// Browser globals (root is window)
			if (!root.CamundaRestApi) {
				root.CamundaRestApi = {};
			}
			root.CamundaRestApi.SuspensionStateDto = factory(root.CamundaRestApi.ApiClient);
		}
	}(this, function(ApiClient) {
		"use strict";




		/**
   * The SuspensionStateDto model module.
   * @module model/SuspensionStateDto
   * @version v7.8.0
   */

		/**
   * Constructs a new <code>SuspensionStateDto</code>.
   * @alias module:model/SuspensionStateDto
   * @class
   */
		var exports = function() {
			var _this = this;


		};

		/**
   * Constructs a <code>SuspensionStateDto</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:model/SuspensionStateDto} obj Optional instance to populate.
   * @return {module:model/SuspensionStateDto} The populated <code>SuspensionStateDto</code> instance.
   */
		exports.constructFromObject = function(data, obj) {
			if (data) {
				obj = obj || new exports();

				if (data.hasOwnProperty("suspended")) {
					obj["suspended"] = ApiClient.convertToType(data["suspended"], "Boolean");
				}
			}
			return obj;
		};

		/**
   * A Boolean value which indicates whether to activate or suspend the batch. When the value is set to true, the batch will be suspended and when the value is set to false, the batch will be activated.
   * @member {Boolean} suspended
   */
		exports.prototype["suspended"] = undefined;



		return exports;
	}));



},{"../ApiClient":16}],127:[function(require,module,exports){
/**
 * Camunda REST API
 * Swagger OpenApi Spec for Camunda REST API.
 *
 * OpenAPI spec version: v7.8.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.3.1
 *
 * Do not edit the class manually.
 *
 */

	(function(root, factory) {
		if (typeof define === "function" && define.amd) {
			// AMD. Register as an anonymous module.
			define(["ApiClient"], factory);
		} else if (typeof module === "object" && module.exports) {
			// CommonJS-like environments that support module.exports, like Node.
			module.exports = factory(require("../ApiClient"));
		} else {
			// Browser globals (root is window)
			if (!root.CamundaRestApi) {
				root.CamundaRestApi = {};
			}
			root.CamundaRestApi.TaskDto = factory(root.CamundaRestApi.ApiClient);
		}
	}(this, function(ApiClient) {
		"use strict";




		/**
   * The TaskDto model module.
   * @module model/TaskDto
   * @version v7.8.0
   */

		/**
   * Constructs a new <code>TaskDto</code>.
   * @alias module:model/TaskDto
   * @class
   */
		var exports = function() {
			var _this = this;






















		};

		/**
   * Constructs a <code>TaskDto</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:model/TaskDto} obj Optional instance to populate.
   * @return {module:model/TaskDto} The populated <code>TaskDto</code> instance.
   */
		exports.constructFromObject = function(data, obj) {
			if (data) {
				obj = obj || new exports();

				if (data.hasOwnProperty("id")) {
					obj["id"] = ApiClient.convertToType(data["id"], "String");
				}
				if (data.hasOwnProperty("name")) {
					obj["name"] = ApiClient.convertToType(data["name"], "String");
				}
				if (data.hasOwnProperty("assignee")) {
					obj["assignee"] = ApiClient.convertToType(data["assignee"], "String");
				}
				if (data.hasOwnProperty("created")) {
					obj["created"] = ApiClient.convertToType(data["created"], "Date");
				}
				if (data.hasOwnProperty("due")) {
					obj["due"] = ApiClient.convertToType(data["due"], "Date");
				}
				if (data.hasOwnProperty("followUp")) {
					obj["followUp"] = ApiClient.convertToType(data["followUp"], "Date");
				}
				if (data.hasOwnProperty("delegationState")) {
					obj["delegationState"] = ApiClient.convertToType(data["delegationState"], "String");
				}
				if (data.hasOwnProperty("description")) {
					obj["description"] = ApiClient.convertToType(data["description"], "String");
				}
				if (data.hasOwnProperty("executionId")) {
					obj["executionId"] = ApiClient.convertToType(data["executionId"], "String");
				}
				if (data.hasOwnProperty("owner")) {
					obj["owner"] = ApiClient.convertToType(data["owner"], "String");
				}
				if (data.hasOwnProperty("parentTaskId")) {
					obj["parentTaskId"] = ApiClient.convertToType(data["parentTaskId"], "String");
				}
				if (data.hasOwnProperty("priority")) {
					obj["priority"] = ApiClient.convertToType(data["priority"], "Number");
				}
				if (data.hasOwnProperty("processDefinitionId")) {
					obj["processDefinitionId"] = ApiClient.convertToType(data["processDefinitionId"], "String");
				}
				if (data.hasOwnProperty("processInstanceId")) {
					obj["processInstanceId"] = ApiClient.convertToType(data["processInstanceId"], "String");
				}
				if (data.hasOwnProperty("taskDefinitionKey")) {
					obj["taskDefinitionKey"] = ApiClient.convertToType(data["taskDefinitionKey"], "String");
				}
				if (data.hasOwnProperty("caseExecutionId")) {
					obj["caseExecutionId"] = ApiClient.convertToType(data["caseExecutionId"], "String");
				}
				if (data.hasOwnProperty("caseInstanceId")) {
					obj["caseInstanceId"] = ApiClient.convertToType(data["caseInstanceId"], "String");
				}
				if (data.hasOwnProperty("caseDefinitionId")) {
					obj["caseDefinitionId"] = ApiClient.convertToType(data["caseDefinitionId"], "String");
				}
				if (data.hasOwnProperty("suspended")) {
					obj["suspended"] = ApiClient.convertToType(data["suspended"], "Boolean");
				}
				if (data.hasOwnProperty("formKey")) {
					obj["formKey"] = ApiClient.convertToType(data["formKey"], "String");
				}
				if (data.hasOwnProperty("tenantId")) {
					obj["tenantId"] = ApiClient.convertToType(data["tenantId"], "String");
				}
			}
			return obj;
		};

		/**
   * The id of the task.
   * @member {String} id
   */
		exports.prototype["id"] = undefined;
		/**
   * The task name.
   * @member {String} name
   */
		exports.prototype["name"] = undefined;
		/**
   * The user to assign to this task.
   * @member {String} assignee
   */
		exports.prototype["assignee"] = undefined;
		/**
   * @member {Date} created
   */
		exports.prototype["created"] = undefined;
		/**
   * The due date for the task. Format yyyy-MM-dd'T'HH:mm:ss.
   * @member {Date} due
   */
		exports.prototype["due"] = undefined;
		/**
   * The follow-up date for the task. Format yyyy-MM-dd'T'HH:mm:ss.
   * @member {Date} followUp
   */
		exports.prototype["followUp"] = undefined;
		/**
   * The delegation state of the task. Corresponds to the DelegationState enum in the engine. Possible values are RESOLVED and PENDING.
   * @member {String} delegationState
   */
		exports.prototype["delegationState"] = undefined;
		/**
   * The task description.
   * @member {String} description
   */
		exports.prototype["description"] = undefined;
		/**
   * @member {String} executionId
   */
		exports.prototype["executionId"] = undefined;
		/**
   * The owner of the task.
   * @member {String} owner
   */
		exports.prototype["owner"] = undefined;
		/**
   * The id of the parent task, if this task is a subtask.
   * @member {String} parentTaskId
   */
		exports.prototype["parentTaskId"] = undefined;
		/**
   * The priority of the task.
   * @member {Number} priority
   */
		exports.prototype["priority"] = undefined;
		/**
   * @member {String} processDefinitionId
   */
		exports.prototype["processDefinitionId"] = undefined;
		/**
   * @member {String} processInstanceId
   */
		exports.prototype["processInstanceId"] = undefined;
		/**
   * @member {String} taskDefinitionKey
   */
		exports.prototype["taskDefinitionKey"] = undefined;
		/**
   * @member {String} caseExecutionId
   */
		exports.prototype["caseExecutionId"] = undefined;
		/**
   * The id of the case instance the task belongs to.
   * @member {String} caseInstanceId
   */
		exports.prototype["caseInstanceId"] = undefined;
		/**
   * @member {String} caseDefinitionId
   */
		exports.prototype["caseDefinitionId"] = undefined;
		/**
   * @member {Boolean} suspended
   */
		exports.prototype["suspended"] = undefined;
		/**
   * @member {String} formKey
   */
		exports.prototype["formKey"] = undefined;
		/**
   * The id of the tenant the task belongs to.
   * @member {String} tenantId
   */
		exports.prototype["tenantId"] = undefined;



		return exports;
	}));



},{"../ApiClient":16}],128:[function(require,module,exports){
/**
 * Camunda REST API
 * Swagger OpenApi Spec for Camunda REST API.
 *
 * OpenAPI spec version: v7.8.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.3.1
 *
 * Do not edit the class manually.
 *
 */

	(function(root, factory) {
		if (typeof define === "function" && define.amd) {
			// AMD. Register as an anonymous module.
			define(["ApiClient", "model/SortingDto", "model/TaskQueryDto", "model/VariableQueryParameterDto"], factory);
		} else if (typeof module === "object" && module.exports) {
			// CommonJS-like environments that support module.exports, like Node.
			module.exports = factory(require("../ApiClient"), require("./SortingDto"), require("./TaskQueryDto"), require("./VariableQueryParameterDto"));
		} else {
			// Browser globals (root is window)
			if (!root.CamundaRestApi) {
				root.CamundaRestApi = {};
			}
			root.CamundaRestApi.TaskQueryDto = factory(root.CamundaRestApi.ApiClient, root.CamundaRestApi.SortingDto, root.CamundaRestApi.TaskQueryDto, root.CamundaRestApi.VariableQueryParameterDto);
		}
	}(this, function(ApiClient, SortingDto, TaskQueryDto, VariableQueryParameterDto) {
		"use strict";




		/**
   * The TaskQueryDto model module.
   * @module model/TaskQueryDto
   * @version v7.8.0
   */

		/**
   * Constructs a new <code>TaskQueryDto</code>.
   * @alias module:model/TaskQueryDto
   * @class
   */
		var exports = function() {
			var _this = this;

















































































		};

		/**
   * Constructs a <code>TaskQueryDto</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:model/TaskQueryDto} obj Optional instance to populate.
   * @return {module:model/TaskQueryDto} The populated <code>TaskQueryDto</code> instance.
   */
		exports.constructFromObject = function(data, obj) {
			if (data) {
				obj = obj || new exports();

				if (data.hasOwnProperty("processInstanceBusinessKey")) {
					obj["processInstanceBusinessKey"] = ApiClient.convertToType(data["processInstanceBusinessKey"], "String");
				}
				if (data.hasOwnProperty("processInstanceBusinessKeyExpression")) {
					obj["processInstanceBusinessKeyExpression"] = ApiClient.convertToType(data["processInstanceBusinessKeyExpression"], "String");
				}
				if (data.hasOwnProperty("processInstanceBusinessKeyIn")) {
					obj["processInstanceBusinessKeyIn"] = ApiClient.convertToType(data["processInstanceBusinessKeyIn"], ["String"]);
				}
				if (data.hasOwnProperty("processInstanceBusinessKeyLike")) {
					obj["processInstanceBusinessKeyLike"] = ApiClient.convertToType(data["processInstanceBusinessKeyLike"], "String");
				}
				if (data.hasOwnProperty("processInstanceBusinessKeyLikeExpression")) {
					obj["processInstanceBusinessKeyLikeExpression"] = ApiClient.convertToType(data["processInstanceBusinessKeyLikeExpression"], "String");
				}
				if (data.hasOwnProperty("processDefinitionKey")) {
					obj["processDefinitionKey"] = ApiClient.convertToType(data["processDefinitionKey"], "String");
				}
				if (data.hasOwnProperty("processDefinitionKeyIn")) {
					obj["processDefinitionKeyIn"] = ApiClient.convertToType(data["processDefinitionKeyIn"], ["String"]);
				}
				if (data.hasOwnProperty("processDefinitionId")) {
					obj["processDefinitionId"] = ApiClient.convertToType(data["processDefinitionId"], "String");
				}
				if (data.hasOwnProperty("executionId")) {
					obj["executionId"] = ApiClient.convertToType(data["executionId"], "String");
				}
				if (data.hasOwnProperty("activityInstanceIdIn")) {
					obj["activityInstanceIdIn"] = ApiClient.convertToType(data["activityInstanceIdIn"], ["String"]);
				}
				if (data.hasOwnProperty("processDefinitionName")) {
					obj["processDefinitionName"] = ApiClient.convertToType(data["processDefinitionName"], "String");
				}
				if (data.hasOwnProperty("processDefinitionNameLike")) {
					obj["processDefinitionNameLike"] = ApiClient.convertToType(data["processDefinitionNameLike"], "String");
				}
				if (data.hasOwnProperty("processInstanceId")) {
					obj["processInstanceId"] = ApiClient.convertToType(data["processInstanceId"], "String");
				}
				if (data.hasOwnProperty("assignee")) {
					obj["assignee"] = ApiClient.convertToType(data["assignee"], "String");
				}
				if (data.hasOwnProperty("assigneeExpression")) {
					obj["assigneeExpression"] = ApiClient.convertToType(data["assigneeExpression"], "String");
				}
				if (data.hasOwnProperty("assigneeLike")) {
					obj["assigneeLike"] = ApiClient.convertToType(data["assigneeLike"], "String");
				}
				if (data.hasOwnProperty("assigneeLikeExpression")) {
					obj["assigneeLikeExpression"] = ApiClient.convertToType(data["assigneeLikeExpression"], "String");
				}
				if (data.hasOwnProperty("candidateGroup")) {
					obj["candidateGroup"] = ApiClient.convertToType(data["candidateGroup"], "String");
				}
				if (data.hasOwnProperty("candidateGroupExpression")) {
					obj["candidateGroupExpression"] = ApiClient.convertToType(data["candidateGroupExpression"], "String");
				}
				if (data.hasOwnProperty("candidateUser")) {
					obj["candidateUser"] = ApiClient.convertToType(data["candidateUser"], "String");
				}
				if (data.hasOwnProperty("candidateUserExpression")) {
					obj["candidateUserExpression"] = ApiClient.convertToType(data["candidateUserExpression"], "String");
				}
				if (data.hasOwnProperty("includeAssignedTasks")) {
					obj["includeAssignedTasks"] = ApiClient.convertToType(data["includeAssignedTasks"], "Boolean");
				}
				if (data.hasOwnProperty("taskDefinitionKey")) {
					obj["taskDefinitionKey"] = ApiClient.convertToType(data["taskDefinitionKey"], "String");
				}
				if (data.hasOwnProperty("taskDefinitionKeyIn")) {
					obj["taskDefinitionKeyIn"] = ApiClient.convertToType(data["taskDefinitionKeyIn"], ["String"]);
				}
				if (data.hasOwnProperty("taskDefinitionKeyLike")) {
					obj["taskDefinitionKeyLike"] = ApiClient.convertToType(data["taskDefinitionKeyLike"], "String");
				}
				if (data.hasOwnProperty("description")) {
					obj["description"] = ApiClient.convertToType(data["description"], "String");
				}
				if (data.hasOwnProperty("descriptionLike")) {
					obj["descriptionLike"] = ApiClient.convertToType(data["descriptionLike"], "String");
				}
				if (data.hasOwnProperty("involvedUser")) {
					obj["involvedUser"] = ApiClient.convertToType(data["involvedUser"], "String");
				}
				if (data.hasOwnProperty("involvedUserExpression")) {
					obj["involvedUserExpression"] = ApiClient.convertToType(data["involvedUserExpression"], "String");
				}
				if (data.hasOwnProperty("maxPriority")) {
					obj["maxPriority"] = ApiClient.convertToType(data["maxPriority"], "Number");
				}
				if (data.hasOwnProperty("minPriority")) {
					obj["minPriority"] = ApiClient.convertToType(data["minPriority"], "Number");
				}
				if (data.hasOwnProperty("name")) {
					obj["name"] = ApiClient.convertToType(data["name"], "String");
				}
				if (data.hasOwnProperty("nameNotEqual")) {
					obj["nameNotEqual"] = ApiClient.convertToType(data["nameNotEqual"], "String");
				}
				if (data.hasOwnProperty("nameLike")) {
					obj["nameLike"] = ApiClient.convertToType(data["nameLike"], "String");
				}
				if (data.hasOwnProperty("nameNotLike")) {
					obj["nameNotLike"] = ApiClient.convertToType(data["nameNotLike"], "String");
				}
				if (data.hasOwnProperty("owner")) {
					obj["owner"] = ApiClient.convertToType(data["owner"], "String");
				}
				if (data.hasOwnProperty("ownerExpression")) {
					obj["ownerExpression"] = ApiClient.convertToType(data["ownerExpression"], "String");
				}
				if (data.hasOwnProperty("priority")) {
					obj["priority"] = ApiClient.convertToType(data["priority"], "Number");
				}
				if (data.hasOwnProperty("parentTaskId")) {
					obj["parentTaskId"] = ApiClient.convertToType(data["parentTaskId"], "String");
				}
				if (data.hasOwnProperty("unassigned")) {
					obj["unassigned"] = ApiClient.convertToType(data["unassigned"], "Boolean");
				}
				if (data.hasOwnProperty("active")) {
					obj["active"] = ApiClient.convertToType(data["active"], "Boolean");
				}
				if (data.hasOwnProperty("suspended")) {
					obj["suspended"] = ApiClient.convertToType(data["suspended"], "Boolean");
				}
				if (data.hasOwnProperty("caseDefinitionKey")) {
					obj["caseDefinitionKey"] = ApiClient.convertToType(data["caseDefinitionKey"], "String");
				}
				if (data.hasOwnProperty("caseDefinitionId")) {
					obj["caseDefinitionId"] = ApiClient.convertToType(data["caseDefinitionId"], "String");
				}
				if (data.hasOwnProperty("caseDefinitionName")) {
					obj["caseDefinitionName"] = ApiClient.convertToType(data["caseDefinitionName"], "String");
				}
				if (data.hasOwnProperty("caseDefinitionNameLike")) {
					obj["caseDefinitionNameLike"] = ApiClient.convertToType(data["caseDefinitionNameLike"], "String");
				}
				if (data.hasOwnProperty("caseInstanceId")) {
					obj["caseInstanceId"] = ApiClient.convertToType(data["caseInstanceId"], "String");
				}
				if (data.hasOwnProperty("caseInstanceBusinessKey")) {
					obj["caseInstanceBusinessKey"] = ApiClient.convertToType(data["caseInstanceBusinessKey"], "String");
				}
				if (data.hasOwnProperty("caseInstanceBusinessKeyLike")) {
					obj["caseInstanceBusinessKeyLike"] = ApiClient.convertToType(data["caseInstanceBusinessKeyLike"], "String");
				}
				if (data.hasOwnProperty("caseExecutionId")) {
					obj["caseExecutionId"] = ApiClient.convertToType(data["caseExecutionId"], "String");
				}
				if (data.hasOwnProperty("dueAfter")) {
					obj["dueAfter"] = ApiClient.convertToType(data["dueAfter"], "Date");
				}
				if (data.hasOwnProperty("dueAfterExpression")) {
					obj["dueAfterExpression"] = ApiClient.convertToType(data["dueAfterExpression"], "String");
				}
				if (data.hasOwnProperty("dueBefore")) {
					obj["dueBefore"] = ApiClient.convertToType(data["dueBefore"], "Date");
				}
				if (data.hasOwnProperty("dueBeforeExpression")) {
					obj["dueBeforeExpression"] = ApiClient.convertToType(data["dueBeforeExpression"], "String");
				}
				if (data.hasOwnProperty("dueDate")) {
					obj["dueDate"] = ApiClient.convertToType(data["dueDate"], "Date");
				}
				if (data.hasOwnProperty("dueDateExpression")) {
					obj["dueDateExpression"] = ApiClient.convertToType(data["dueDateExpression"], "String");
				}
				if (data.hasOwnProperty("followUpAfter")) {
					obj["followUpAfter"] = ApiClient.convertToType(data["followUpAfter"], "Date");
				}
				if (data.hasOwnProperty("followUpAfterExpression")) {
					obj["followUpAfterExpression"] = ApiClient.convertToType(data["followUpAfterExpression"], "String");
				}
				if (data.hasOwnProperty("followUpBefore")) {
					obj["followUpBefore"] = ApiClient.convertToType(data["followUpBefore"], "Date");
				}
				if (data.hasOwnProperty("followUpBeforeExpression")) {
					obj["followUpBeforeExpression"] = ApiClient.convertToType(data["followUpBeforeExpression"], "String");
				}
				if (data.hasOwnProperty("followUpBeforeOrNotExistent")) {
					obj["followUpBeforeOrNotExistent"] = ApiClient.convertToType(data["followUpBeforeOrNotExistent"], "Date");
				}
				if (data.hasOwnProperty("followUpBeforeOrNotExistentExpression")) {
					obj["followUpBeforeOrNotExistentExpression"] = ApiClient.convertToType(data["followUpBeforeOrNotExistentExpression"], "String");
				}
				if (data.hasOwnProperty("followUpDate")) {
					obj["followUpDate"] = ApiClient.convertToType(data["followUpDate"], "Date");
				}
				if (data.hasOwnProperty("followUpDateExpression")) {
					obj["followUpDateExpression"] = ApiClient.convertToType(data["followUpDateExpression"], "String");
				}
				if (data.hasOwnProperty("createdAfter")) {
					obj["createdAfter"] = ApiClient.convertToType(data["createdAfter"], "Date");
				}
				if (data.hasOwnProperty("createdAfterExpression")) {
					obj["createdAfterExpression"] = ApiClient.convertToType(data["createdAfterExpression"], "String");
				}
				if (data.hasOwnProperty("createdBefore")) {
					obj["createdBefore"] = ApiClient.convertToType(data["createdBefore"], "Date");
				}
				if (data.hasOwnProperty("createdBeforeExpression")) {
					obj["createdBeforeExpression"] = ApiClient.convertToType(data["createdBeforeExpression"], "String");
				}
				if (data.hasOwnProperty("createdOn")) {
					obj["createdOn"] = ApiClient.convertToType(data["createdOn"], "Date");
				}
				if (data.hasOwnProperty("createdOnExpression")) {
					obj["createdOnExpression"] = ApiClient.convertToType(data["createdOnExpression"], "String");
				}
				if (data.hasOwnProperty("delegationState")) {
					obj["delegationState"] = ApiClient.convertToType(data["delegationState"], "String");
				}
				if (data.hasOwnProperty("tenantIdIn")) {
					obj["tenantIdIn"] = ApiClient.convertToType(data["tenantIdIn"], ["String"]);
				}
				if (data.hasOwnProperty("withoutTenantId")) {
					obj["withoutTenantId"] = ApiClient.convertToType(data["withoutTenantId"], "Boolean");
				}
				if (data.hasOwnProperty("candidateGroups")) {
					obj["candidateGroups"] = ApiClient.convertToType(data["candidateGroups"], ["String"]);
				}
				if (data.hasOwnProperty("candidateGroupsExpression")) {
					obj["candidateGroupsExpression"] = ApiClient.convertToType(data["candidateGroupsExpression"], "String");
				}
				if (data.hasOwnProperty("taskVariables")) {
					obj["taskVariables"] = ApiClient.convertToType(data["taskVariables"], [VariableQueryParameterDto]);
				}
				if (data.hasOwnProperty("processVariables")) {
					obj["processVariables"] = ApiClient.convertToType(data["processVariables"], [VariableQueryParameterDto]);
				}
				if (data.hasOwnProperty("caseInstanceVariables")) {
					obj["caseInstanceVariables"] = ApiClient.convertToType(data["caseInstanceVariables"], [VariableQueryParameterDto]);
				}
				if (data.hasOwnProperty("orQueries")) {
					obj["orQueries"] = ApiClient.convertToType(data["orQueries"], [TaskQueryDto]);
				}
				if (data.hasOwnProperty("sorting")) {
					obj["sorting"] = ApiClient.convertToType(data["sorting"], [SortingDto]);
				}
			}
			return obj;
		};

		/**
   * Restrict to tasks that belong to process instances with the given business key.
   * @member {String} processInstanceBusinessKey
   */
		exports.prototype["processInstanceBusinessKey"] = undefined;
		/**
   * @member {String} processInstanceBusinessKeyExpression
   */
		exports.prototype["processInstanceBusinessKeyExpression"] = undefined;
		/**
   * Restrict to tasks that belong to process instances with one of the give business keys. The keys need to be in a comma-separated list.
   * @member {Array.<String>} processInstanceBusinessKeyIn
   */
		exports.prototype["processInstanceBusinessKeyIn"] = undefined;
		/**
   * Restrict to tasks that have a process instance business key that has the parameter value as a substring.
   * @member {String} processInstanceBusinessKeyLike
   */
		exports.prototype["processInstanceBusinessKeyLike"] = undefined;
		/**
   * @member {String} processInstanceBusinessKeyLikeExpression
   */
		exports.prototype["processInstanceBusinessKeyLikeExpression"] = undefined;
		/**
   * Restrict to tasks that belong to a process definition with the given key.
   * @member {String} processDefinitionKey
   */
		exports.prototype["processDefinitionKey"] = undefined;
		/**
   * Restrict to tasks that belong to a process definition with one of the given keys. The keys need to be in a comma-separated list.
   * @member {Array.<String>} processDefinitionKeyIn
   */
		exports.prototype["processDefinitionKeyIn"] = undefined;
		/**
   * Restrict to tasks that belong to a process definition with the given id.
   * @member {String} processDefinitionId
   */
		exports.prototype["processDefinitionId"] = undefined;
		/**
   * Restrict to tasks that belong to an execution with the given id.
   * @member {String} executionId
   */
		exports.prototype["executionId"] = undefined;
		/**
   * Only include tasks which belong to one of the passed activity instance ids.
   * @member {Array.<String>} activityInstanceIdIn
   */
		exports.prototype["activityInstanceIdIn"] = undefined;
		/**
   * Restrict to tasks that belong to a process definition with the given name.
   * @member {String} processDefinitionName
   */
		exports.prototype["processDefinitionName"] = undefined;
		/**
   * Restrict to tasks that have a process definition name that has the parameter value as a substring.
   * @member {String} processDefinitionNameLike
   */
		exports.prototype["processDefinitionNameLike"] = undefined;
		/**
   * Restrict to tasks that belong to process instances with the given id.
   * @member {String} processInstanceId
   */
		exports.prototype["processInstanceId"] = undefined;
		/**
   * Restrict to tasks that the given user is assigned to.
   * @member {String} assignee
   */
		exports.prototype["assignee"] = undefined;
		/**
   * Restrict to tasks that the user described by the given expression is assigned to. See the user guide for more information on available functions.
   * @member {String} assigneeExpression
   */
		exports.prototype["assigneeExpression"] = undefined;
		/**
   * Restrict to tasks that have an assignee that has the parameter value as a substring.
   * @member {String} assigneeLike
   */
		exports.prototype["assigneeLike"] = undefined;
		/**
   * Restrict to tasks that have an assignee that has the parameter value described by the given expression as a substring. See the user guide for more information on available functions.
   * @member {String} assigneeLikeExpression
   */
		exports.prototype["assigneeLikeExpression"] = undefined;
		/**
   * Only include tasks that are offered to the given group.
   * @member {String} candidateGroup
   */
		exports.prototype["candidateGroup"] = undefined;
		/**
   * Only include tasks that are offered to the group described by the given expression. See the user guide for more information on available functions.
   * @member {String} candidateGroupExpression
   */
		exports.prototype["candidateGroupExpression"] = undefined;
		/**
   * Only include tasks that are offered to the given user or to one of his groups.
   * @member {String} candidateUser
   */
		exports.prototype["candidateUser"] = undefined;
		/**
   * Only include tasks that are offered to the user described by the given expression. See the user guide for more information on available functions.
   * @member {String} candidateUserExpression
   */
		exports.prototype["candidateUserExpression"] = undefined;
		/**
   * Also include tasks that are assigned to users in candidate queries. Default is to only include tasks that are not assigned to any user if you query by candidate user or group(s).
   * @member {Boolean} includeAssignedTasks
   */
		exports.prototype["includeAssignedTasks"] = undefined;
		/**
   * @member {String} taskDefinitionKey
   */
		exports.prototype["taskDefinitionKey"] = undefined;
		/**
   * @member {Array.<String>} taskDefinitionKeyIn
   */
		exports.prototype["taskDefinitionKeyIn"] = undefined;
		/**
   * @member {String} taskDefinitionKeyLike
   */
		exports.prototype["taskDefinitionKeyLike"] = undefined;
		/**
   * @member {String} description
   */
		exports.prototype["description"] = undefined;
		/**
   * @member {String} descriptionLike
   */
		exports.prototype["descriptionLike"] = undefined;
		/**
   * Only include tasks that the given user is involved in. A user is involved in a task if an identity link exists between task and user (e.g., the user is the assignee).
   * @member {String} involvedUser
   */
		exports.prototype["involvedUser"] = undefined;
		/**
   * Only include tasks that the user described by the given expression is involved in. A user is involved in a task if an identity link exists between task and user (e.g., the user is the assignee). See the user guide for more information on available functions.
   * @member {String} involvedUserExpression
   */
		exports.prototype["involvedUserExpression"] = undefined;
		/**
   * @member {Number} maxPriority
   */
		exports.prototype["maxPriority"] = undefined;
		/**
   * @member {Number} minPriority
   */
		exports.prototype["minPriority"] = undefined;
		/**
   * @member {String} name
   */
		exports.prototype["name"] = undefined;
		/**
   * @member {String} nameNotEqual
   */
		exports.prototype["nameNotEqual"] = undefined;
		/**
   * @member {String} nameLike
   */
		exports.prototype["nameLike"] = undefined;
		/**
   * @member {String} nameNotLike
   */
		exports.prototype["nameNotLike"] = undefined;
		/**
   * Restrict to tasks that the given user owns.
   * @member {String} owner
   */
		exports.prototype["owner"] = undefined;
		/**
   * Restrict to tasks that the user described by the given expression owns. See the user guide for more information on available functions.
   * @member {String} ownerExpression
   */
		exports.prototype["ownerExpression"] = undefined;
		/**
   * @member {Number} priority
   */
		exports.prototype["priority"] = undefined;
		/**
   * @member {String} parentTaskId
   */
		exports.prototype["parentTaskId"] = undefined;
		/**
   * If set to true, restricts the query to all tasks that are unassigned.
   * @member {Boolean} unassigned
   */
		exports.prototype["unassigned"] = undefined;
		/**
   * @member {Boolean} active
   */
		exports.prototype["active"] = undefined;
		/**
   * @member {Boolean} suspended
   */
		exports.prototype["suspended"] = undefined;
		/**
   * Restrict to tasks that belong to a case definition with the given key.
   * @member {String} caseDefinitionKey
   */
		exports.prototype["caseDefinitionKey"] = undefined;
		/**
   * Restrict to tasks that belong to a case definition with the given id.
   * @member {String} caseDefinitionId
   */
		exports.prototype["caseDefinitionId"] = undefined;
		/**
   * Restrict to tasks that belong to a case definition with the given name.
   * @member {String} caseDefinitionName
   */
		exports.prototype["caseDefinitionName"] = undefined;
		/**
   * Restrict to tasks that have a case definition name that has the parameter value as a substring.
   * @member {String} caseDefinitionNameLike
   */
		exports.prototype["caseDefinitionNameLike"] = undefined;
		/**
   * Restrict to tasks that belong to case instances with the given id.
   * @member {String} caseInstanceId
   */
		exports.prototype["caseInstanceId"] = undefined;
		/**
   * Restrict to tasks that belong to case instances with the given business key.
   * @member {String} caseInstanceBusinessKey
   */
		exports.prototype["caseInstanceBusinessKey"] = undefined;
		/**
   * Restrict to tasks that have a case instance business key that has the parameter value as a substring.
   * @member {String} caseInstanceBusinessKeyLike
   */
		exports.prototype["caseInstanceBusinessKeyLike"] = undefined;
		/**
   * Restrict to tasks that belong to a case execution with the given id.
   * @member {String} caseExecutionId
   */
		exports.prototype["caseExecutionId"] = undefined;
		/**
   * @member {Date} dueAfter
   */
		exports.prototype["dueAfter"] = undefined;
		/**
   * @member {String} dueAfterExpression
   */
		exports.prototype["dueAfterExpression"] = undefined;
		/**
   * @member {Date} dueBefore
   */
		exports.prototype["dueBefore"] = undefined;
		/**
   * @member {String} dueBeforeExpression
   */
		exports.prototype["dueBeforeExpression"] = undefined;
		/**
   * @member {Date} dueDate
   */
		exports.prototype["dueDate"] = undefined;
		/**
   * @member {String} dueDateExpression
   */
		exports.prototype["dueDateExpression"] = undefined;
		/**
   * @member {Date} followUpAfter
   */
		exports.prototype["followUpAfter"] = undefined;
		/**
   * @member {String} followUpAfterExpression
   */
		exports.prototype["followUpAfterExpression"] = undefined;
		/**
   * @member {Date} followUpBefore
   */
		exports.prototype["followUpBefore"] = undefined;
		/**
   * @member {String} followUpBeforeExpression
   */
		exports.prototype["followUpBeforeExpression"] = undefined;
		/**
   * @member {Date} followUpBeforeOrNotExistent
   */
		exports.prototype["followUpBeforeOrNotExistent"] = undefined;
		/**
   * @member {String} followUpBeforeOrNotExistentExpression
   */
		exports.prototype["followUpBeforeOrNotExistentExpression"] = undefined;
		/**
   * @member {Date} followUpDate
   */
		exports.prototype["followUpDate"] = undefined;
		/**
   * @member {String} followUpDateExpression
   */
		exports.prototype["followUpDateExpression"] = undefined;
		/**
   * @member {Date} createdAfter
   */
		exports.prototype["createdAfter"] = undefined;
		/**
   * @member {String} createdAfterExpression
   */
		exports.prototype["createdAfterExpression"] = undefined;
		/**
   * @member {Date} createdBefore
   */
		exports.prototype["createdBefore"] = undefined;
		/**
   * @member {String} createdBeforeExpression
   */
		exports.prototype["createdBeforeExpression"] = undefined;
		/**
   * @member {Date} createdOn
   */
		exports.prototype["createdOn"] = undefined;
		/**
   * @member {String} createdOnExpression
   */
		exports.prototype["createdOnExpression"] = undefined;
		/**
   * @member {String} delegationState
   */
		exports.prototype["delegationState"] = undefined;
		/**
   * Restrict to tasks that belong to one of the given tenant ids. The ids need to be in a comma-separated list.
   * @member {Array.<String>} tenantIdIn
   */
		exports.prototype["tenantIdIn"] = undefined;
		/**
   * Only include tasks which belong to no tenant. Value may only be true, as false is the default behavior.
   * @member {Boolean} withoutTenantId
   */
		exports.prototype["withoutTenantId"] = undefined;
		/**
   * @member {Array.<String>} candidateGroups
   */
		exports.prototype["candidateGroups"] = undefined;
		/**
   * @member {String} candidateGroupsExpression
   */
		exports.prototype["candidateGroupsExpression"] = undefined;
		/**
   * @member {Array.<module:model/VariableQueryParameterDto>} taskVariables
   */
		exports.prototype["taskVariables"] = undefined;
		/**
   * @member {Array.<module:model/VariableQueryParameterDto>} processVariables
   */
		exports.prototype["processVariables"] = undefined;
		/**
   * @member {Array.<module:model/VariableQueryParameterDto>} caseInstanceVariables
   */
		exports.prototype["caseInstanceVariables"] = undefined;
		/**
   * @member {Array.<module:model/TaskQueryDto>} orQueries
   */
		exports.prototype["orQueries"] = undefined;
		/**
   * @member {Array.<module:model/SortingDto>} sorting
   */
		exports.prototype["sorting"] = undefined;



		return exports;
	}));



},{"../ApiClient":16,"./SortingDto":121,"./TaskQueryDto":128,"./VariableQueryParameterDto":139}],129:[function(require,module,exports){
/**
 * Camunda REST API
 * Swagger OpenApi Spec for Camunda REST API.
 *
 * OpenAPI spec version: v7.8.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.3.1
 *
 * Do not edit the class manually.
 *
 */

	(function(root, factory) {
		if (typeof define === "function" && define.amd) {
			// AMD. Register as an anonymous module.
			define(["ApiClient"], factory);
		} else if (typeof module === "object" && module.exports) {
			// CommonJS-like environments that support module.exports, like Node.
			module.exports = factory(require("../ApiClient"));
		} else {
			// Browser globals (root is window)
			if (!root.CamundaRestApi) {
				root.CamundaRestApi = {};
			}
			root.CamundaRestApi.TenantDto = factory(root.CamundaRestApi.ApiClient);
		}
	}(this, function(ApiClient) {
		"use strict";




		/**
   * The TenantDto model module.
   * @module model/TenantDto
   * @version v7.8.0
   */

		/**
   * Constructs a new <code>TenantDto</code>.
   * @alias module:model/TenantDto
   * @class
   */
		var exports = function() {
			var _this = this;



		};

		/**
   * Constructs a <code>TenantDto</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:model/TenantDto} obj Optional instance to populate.
   * @return {module:model/TenantDto} The populated <code>TenantDto</code> instance.
   */
		exports.constructFromObject = function(data, obj) {
			if (data) {
				obj = obj || new exports();

				if (data.hasOwnProperty("id")) {
					obj["id"] = ApiClient.convertToType(data["id"], "String");
				}
				if (data.hasOwnProperty("name")) {
					obj["name"] = ApiClient.convertToType(data["name"], "String");
				}
			}
			return obj;
		};

		/**
   * The id of the tenant.
   * @member {String} id
   */
		exports.prototype["id"] = undefined;
		/**
   * The name of the tenant.
   * @member {String} name
   */
		exports.prototype["name"] = undefined;



		return exports;
	}));



},{"../ApiClient":16}],130:[function(require,module,exports){
/**
 * Camunda REST API
 * Swagger OpenApi Spec for Camunda REST API.
 *
 * OpenAPI spec version: v7.8.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.3.1
 *
 * Do not edit the class manually.
 *
 */

	(function(root, factory) {
		if (typeof define === "function" && define.amd) {
			// AMD. Register as an anonymous module.
			define(["ApiClient"], factory);
		} else if (typeof module === "object" && module.exports) {
			// CommonJS-like environments that support module.exports, like Node.
			module.exports = factory(require("../ApiClient"));
		} else {
			// Browser globals (root is window)
			if (!root.CamundaRestApi) {
				root.CamundaRestApi = {};
			}
			root.CamundaRestApi.TransitionInstanceDto = factory(root.CamundaRestApi.ApiClient);
		}
	}(this, function(ApiClient) {
		"use strict";




		/**
   * The TransitionInstanceDto model module.
   * @module model/TransitionInstanceDto
   * @version v7.8.0
   */

		/**
   * Constructs a new <code>TransitionInstanceDto</code>.
   * @alias module:model/TransitionInstanceDto
   * @class
   */
		var exports = function() {
			var _this = this;










		};

		/**
   * Constructs a <code>TransitionInstanceDto</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:model/TransitionInstanceDto} obj Optional instance to populate.
   * @return {module:model/TransitionInstanceDto} The populated <code>TransitionInstanceDto</code> instance.
   */
		exports.constructFromObject = function(data, obj) {
			if (data) {
				obj = obj || new exports();

				if (data.hasOwnProperty("id")) {
					obj["id"] = ApiClient.convertToType(data["id"], "String");
				}
				if (data.hasOwnProperty("parentActivityInstanceId")) {
					obj["parentActivityInstanceId"] = ApiClient.convertToType(data["parentActivityInstanceId"], "String");
				}
				if (data.hasOwnProperty("processInstanceId")) {
					obj["processInstanceId"] = ApiClient.convertToType(data["processInstanceId"], "String");
				}
				if (data.hasOwnProperty("processDefinitionId")) {
					obj["processDefinitionId"] = ApiClient.convertToType(data["processDefinitionId"], "String");
				}
				if (data.hasOwnProperty("activityId")) {
					obj["activityId"] = ApiClient.convertToType(data["activityId"], "String");
				}
				if (data.hasOwnProperty("activityName")) {
					obj["activityName"] = ApiClient.convertToType(data["activityName"], "String");
				}
				if (data.hasOwnProperty("activityType")) {
					obj["activityType"] = ApiClient.convertToType(data["activityType"], "String");
				}
				if (data.hasOwnProperty("executionId")) {
					obj["executionId"] = ApiClient.convertToType(data["executionId"], "String");
				}
				if (data.hasOwnProperty("targetActivityId")) {
					obj["targetActivityId"] = ApiClient.convertToType(data["targetActivityId"], "String");
				}
			}
			return obj;
		};

		/**
   * @member {String} id
   */
		exports.prototype["id"] = undefined;
		/**
   * @member {String} parentActivityInstanceId
   */
		exports.prototype["parentActivityInstanceId"] = undefined;
		/**
   * @member {String} processInstanceId
   */
		exports.prototype["processInstanceId"] = undefined;
		/**
   * @member {String} processDefinitionId
   */
		exports.prototype["processDefinitionId"] = undefined;
		/**
   * @member {String} activityId
   */
		exports.prototype["activityId"] = undefined;
		/**
   * @member {String} activityName
   */
		exports.prototype["activityName"] = undefined;
		/**
   * @member {String} activityType
   */
		exports.prototype["activityType"] = undefined;
		/**
   * @member {String} executionId
   */
		exports.prototype["executionId"] = undefined;
		/**
   * @member {String} targetActivityId
   */
		exports.prototype["targetActivityId"] = undefined;



		return exports;
	}));



},{"../ApiClient":16}],131:[function(require,module,exports){
/**
 * Camunda REST API
 * Swagger OpenApi Spec for Camunda REST API.
 *
 * OpenAPI spec version: v7.8.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.3.1
 *
 * Do not edit the class manually.
 *
 */

	(function(root, factory) {
		if (typeof define === "function" && define.amd) {
			// AMD. Register as an anonymous module.
			define(["ApiClient"], factory);
		} else if (typeof module === "object" && module.exports) {
			// CommonJS-like environments that support module.exports, like Node.
			module.exports = factory(require("../ApiClient"));
		} else {
			// Browser globals (root is window)
			if (!root.CamundaRestApi) {
				root.CamundaRestApi = {};
			}
			root.CamundaRestApi.TriggerVariableValueDto = factory(root.CamundaRestApi.ApiClient);
		}
	}(this, function(ApiClient) {
		"use strict";




		/**
   * The TriggerVariableValueDto model module.
   * @module model/TriggerVariableValueDto
   * @version v7.8.0
   */

		/**
   * Constructs a new <code>TriggerVariableValueDto</code>.
   * @alias module:model/TriggerVariableValueDto
   * @class
   */
		var exports = function() {
			var _this = this;





		};

		/**
   * Constructs a <code>TriggerVariableValueDto</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:model/TriggerVariableValueDto} obj Optional instance to populate.
   * @return {module:model/TriggerVariableValueDto} The populated <code>TriggerVariableValueDto</code> instance.
   */
		exports.constructFromObject = function(data, obj) {
			if (data) {
				obj = obj || new exports();

				if (data.hasOwnProperty("type")) {
					obj["type"] = ApiClient.convertToType(data["type"], "String");
				}
				if (data.hasOwnProperty("value")) {
					obj["value"] = ApiClient.convertToType(data["value"], Object);
				}
				if (data.hasOwnProperty("valueInfo")) {
					obj["valueInfo"] = ApiClient.convertToType(data["valueInfo"], {"String": Object});
				}
				if (data.hasOwnProperty("local")) {
					obj["local"] = ApiClient.convertToType(data["local"], "Boolean");
				}
			}
			return obj;
		};

		/**
   * @member {String} type
   */
		exports.prototype["type"] = undefined;
		/**
   * @member {Object} value
   */
		exports.prototype["value"] = undefined;
		/**
   * @member {Object.<String, Object>} valueInfo
   */
		exports.prototype["valueInfo"] = undefined;
		/**
   * @member {Boolean} local
   */
		exports.prototype["local"] = undefined;



		return exports;
	}));



},{"../ApiClient":16}],132:[function(require,module,exports){
/**
 * Camunda REST API
 * Swagger OpenApi Spec for Camunda REST API.
 *
 * OpenAPI spec version: v7.8.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.3.1
 *
 * Do not edit the class manually.
 *
 */

	(function(root, factory) {
		if (typeof define === "function" && define.amd) {
			// AMD. Register as an anonymous module.
			define(["ApiClient"], factory);
		} else if (typeof module === "object" && module.exports) {
			// CommonJS-like environments that support module.exports, like Node.
			module.exports = factory(require("../ApiClient"));
		} else {
			// Browser globals (root is window)
			if (!root.CamundaRestApi) {
				root.CamundaRestApi = {};
			}
			root.CamundaRestApi.UserCredentialsDto = factory(root.CamundaRestApi.ApiClient);
		}
	}(this, function(ApiClient) {
		"use strict";




		/**
   * The UserCredentialsDto model module.
   * @module model/UserCredentialsDto
   * @version v7.8.0
   */

		/**
   * Constructs a new <code>UserCredentialsDto</code>.
   * @alias module:model/UserCredentialsDto
   * @class
   */
		var exports = function() {
			var _this = this;



		};

		/**
   * Constructs a <code>UserCredentialsDto</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:model/UserCredentialsDto} obj Optional instance to populate.
   * @return {module:model/UserCredentialsDto} The populated <code>UserCredentialsDto</code> instance.
   */
		exports.constructFromObject = function(data, obj) {
			if (data) {
				obj = obj || new exports();

				if (data.hasOwnProperty("password")) {
					obj["password"] = ApiClient.convertToType(data["password"], "String");
				}
				if (data.hasOwnProperty("authenticatedUserPassword")) {
					obj["authenticatedUserPassword"] = ApiClient.convertToType(data["authenticatedUserPassword"], "String");
				}
			}
			return obj;
		};

		/**
   * The user's new password.
   * @member {String} password
   */
		exports.prototype["password"] = undefined;
		/**
   * The password of the authenticated user who changes the password of the user (i.e., the user with passed id as path parameter).
   * @member {String} authenticatedUserPassword
   */
		exports.prototype["authenticatedUserPassword"] = undefined;



		return exports;
	}));



},{"../ApiClient":16}],133:[function(require,module,exports){
/**
 * Camunda REST API
 * Swagger OpenApi Spec for Camunda REST API.
 *
 * OpenAPI spec version: v7.8.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.3.1
 *
 * Do not edit the class manually.
 *
 */

	(function(root, factory) {
		if (typeof define === "function" && define.amd) {
			// AMD. Register as an anonymous module.
			define(["ApiClient", "model/UserCredentialsDto", "model/UserProfileDto"], factory);
		} else if (typeof module === "object" && module.exports) {
			// CommonJS-like environments that support module.exports, like Node.
			module.exports = factory(require("../ApiClient"), require("./UserCredentialsDto"), require("./UserProfileDto"));
		} else {
			// Browser globals (root is window)
			if (!root.CamundaRestApi) {
				root.CamundaRestApi = {};
			}
			root.CamundaRestApi.UserDto = factory(root.CamundaRestApi.ApiClient, root.CamundaRestApi.UserCredentialsDto, root.CamundaRestApi.UserProfileDto);
		}
	}(this, function(ApiClient, UserCredentialsDto, UserProfileDto) {
		"use strict";




		/**
   * The UserDto model module.
   * @module model/UserDto
   * @version v7.8.0
   */

		/**
   * Constructs a new <code>UserDto</code>.
   * @alias module:model/UserDto
   * @class
   */
		var exports = function() {
			var _this = this;



		};

		/**
   * Constructs a <code>UserDto</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:model/UserDto} obj Optional instance to populate.
   * @return {module:model/UserDto} The populated <code>UserDto</code> instance.
   */
		exports.constructFromObject = function(data, obj) {
			if (data) {
				obj = obj || new exports();

				if (data.hasOwnProperty("profile")) {
					obj["profile"] = UserProfileDto.constructFromObject(data["profile"]);
				}
				if (data.hasOwnProperty("credentials")) {
					obj["credentials"] = UserCredentialsDto.constructFromObject(data["credentials"]);
				}
			}
			return obj;
		};

		/**
   * A JSON object containing variable key-value pairs. The object contains the following properties: id (String), firstName (String), lastName (String) and email (String).
   * @member {module:model/UserProfileDto} profile
   */
		exports.prototype["profile"] = undefined;
		/**
   * A JSON object containing variable key-value pairs. The object contains the following property: password (String).
   * @member {module:model/UserCredentialsDto} credentials
   */
		exports.prototype["credentials"] = undefined;



		return exports;
	}));



},{"../ApiClient":16,"./UserCredentialsDto":132,"./UserProfileDto":135}],134:[function(require,module,exports){
/**
 * Camunda REST API
 * Swagger OpenApi Spec for Camunda REST API.
 *
 * OpenAPI spec version: v7.8.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.3.1
 *
 * Do not edit the class manually.
 *
 */

	(function(root, factory) {
		if (typeof define === "function" && define.amd) {
			// AMD. Register as an anonymous module.
			define(["ApiClient"], factory);
		} else if (typeof module === "object" && module.exports) {
			// CommonJS-like environments that support module.exports, like Node.
			module.exports = factory(require("../ApiClient"));
		} else {
			// Browser globals (root is window)
			if (!root.CamundaRestApi) {
				root.CamundaRestApi = {};
			}
			root.CamundaRestApi.UserIdDto = factory(root.CamundaRestApi.ApiClient);
		}
	}(this, function(ApiClient) {
		"use strict";




		/**
   * The UserIdDto model module.
   * @module model/UserIdDto
   * @version v7.8.0
   */

		/**
   * Constructs a new <code>UserIdDto</code>.
   * @alias module:model/UserIdDto
   * @class
   */
		var exports = function() {
			var _this = this;


		};

		/**
   * Constructs a <code>UserIdDto</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:model/UserIdDto} obj Optional instance to populate.
   * @return {module:model/UserIdDto} The populated <code>UserIdDto</code> instance.
   */
		exports.constructFromObject = function(data, obj) {
			if (data) {
				obj = obj || new exports();

				if (data.hasOwnProperty("userId")) {
					obj["userId"] = ApiClient.convertToType(data["userId"], "String");
				}
			}
			return obj;
		};

		/**
   * The id of the user that claims the task.
   * @member {String} userId
   */
		exports.prototype["userId"] = undefined;



		return exports;
	}));



},{"../ApiClient":16}],135:[function(require,module,exports){
/**
 * Camunda REST API
 * Swagger OpenApi Spec for Camunda REST API.
 *
 * OpenAPI spec version: v7.8.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.3.1
 *
 * Do not edit the class manually.
 *
 */

	(function(root, factory) {
		if (typeof define === "function" && define.amd) {
			// AMD. Register as an anonymous module.
			define(["ApiClient"], factory);
		} else if (typeof module === "object" && module.exports) {
			// CommonJS-like environments that support module.exports, like Node.
			module.exports = factory(require("../ApiClient"));
		} else {
			// Browser globals (root is window)
			if (!root.CamundaRestApi) {
				root.CamundaRestApi = {};
			}
			root.CamundaRestApi.UserProfileDto = factory(root.CamundaRestApi.ApiClient);
		}
	}(this, function(ApiClient) {
		"use strict";




		/**
   * The UserProfileDto model module.
   * @module model/UserProfileDto
   * @version v7.8.0
   */

		/**
   * Constructs a new <code>UserProfileDto</code>.
   * @alias module:model/UserProfileDto
   * @class
   */
		var exports = function() {
			var _this = this;





		};

		/**
   * Constructs a <code>UserProfileDto</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:model/UserProfileDto} obj Optional instance to populate.
   * @return {module:model/UserProfileDto} The populated <code>UserProfileDto</code> instance.
   */
		exports.constructFromObject = function(data, obj) {
			if (data) {
				obj = obj || new exports();

				if (data.hasOwnProperty("id")) {
					obj["id"] = ApiClient.convertToType(data["id"], "String");
				}
				if (data.hasOwnProperty("firstName")) {
					obj["firstName"] = ApiClient.convertToType(data["firstName"], "String");
				}
				if (data.hasOwnProperty("lastName")) {
					obj["lastName"] = ApiClient.convertToType(data["lastName"], "String");
				}
				if (data.hasOwnProperty("email")) {
					obj["email"] = ApiClient.convertToType(data["email"], "String");
				}
			}
			return obj;
		};

		/**
   * The id of the user.
   * @member {String} id
   */
		exports.prototype["id"] = undefined;
		/**
   * The firstname of the user.
   * @member {String} firstName
   */
		exports.prototype["firstName"] = undefined;
		/**
   * The lastname of the user.
   * @member {String} lastName
   */
		exports.prototype["lastName"] = undefined;
		/**
   * The email of the user.
   * @member {String} email
   */
		exports.prototype["email"] = undefined;



		return exports;
	}));



},{"../ApiClient":16}],136:[function(require,module,exports){
/**
 * Camunda REST API
 * Swagger OpenApi Spec for Camunda REST API.
 *
 * OpenAPI spec version: v7.8.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.3.1
 *
 * Do not edit the class manually.
 *
 */

	(function(root, factory) {
		if (typeof define === "function" && define.amd) {
			// AMD. Register as an anonymous module.
			define(["ApiClient"], factory);
		} else if (typeof module === "object" && module.exports) {
			// CommonJS-like environments that support module.exports, like Node.
			module.exports = factory(require("../ApiClient"));
		} else {
			// Browser globals (root is window)
			if (!root.CamundaRestApi) {
				root.CamundaRestApi = {};
			}
			root.CamundaRestApi.VariableInstanceDto = factory(root.CamundaRestApi.ApiClient);
		}
	}(this, function(ApiClient) {
		"use strict";




		/**
   * The VariableInstanceDto model module.
   * @module model/VariableInstanceDto
   * @version v7.8.0
   */

		/**
   * Constructs a new <code>VariableInstanceDto</code>.
   * @alias module:model/VariableInstanceDto
   * @class
   */
		var exports = function() {
			var _this = this;














		};

		/**
   * Constructs a <code>VariableInstanceDto</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:model/VariableInstanceDto} obj Optional instance to populate.
   * @return {module:model/VariableInstanceDto} The populated <code>VariableInstanceDto</code> instance.
   */
		exports.constructFromObject = function(data, obj) {
			if (data) {
				obj = obj || new exports();

				if (data.hasOwnProperty("type")) {
					obj["type"] = ApiClient.convertToType(data["type"], "String");
				}
				if (data.hasOwnProperty("value")) {
					obj["value"] = ApiClient.convertToType(data["value"], Object);
				}
				if (data.hasOwnProperty("valueInfo")) {
					obj["valueInfo"] = ApiClient.convertToType(data["valueInfo"], {"String": Object});
				}
				if (data.hasOwnProperty("id")) {
					obj["id"] = ApiClient.convertToType(data["id"], "String");
				}
				if (data.hasOwnProperty("name")) {
					obj["name"] = ApiClient.convertToType(data["name"], "String");
				}
				if (data.hasOwnProperty("processInstanceId")) {
					obj["processInstanceId"] = ApiClient.convertToType(data["processInstanceId"], "String");
				}
				if (data.hasOwnProperty("executionId")) {
					obj["executionId"] = ApiClient.convertToType(data["executionId"], "String");
				}
				if (data.hasOwnProperty("caseInstanceId")) {
					obj["caseInstanceId"] = ApiClient.convertToType(data["caseInstanceId"], "String");
				}
				if (data.hasOwnProperty("caseExecutionId")) {
					obj["caseExecutionId"] = ApiClient.convertToType(data["caseExecutionId"], "String");
				}
				if (data.hasOwnProperty("taskId")) {
					obj["taskId"] = ApiClient.convertToType(data["taskId"], "String");
				}
				if (data.hasOwnProperty("activityInstanceId")) {
					obj["activityInstanceId"] = ApiClient.convertToType(data["activityInstanceId"], "String");
				}
				if (data.hasOwnProperty("errorMessage")) {
					obj["errorMessage"] = ApiClient.convertToType(data["errorMessage"], "String");
				}
				if (data.hasOwnProperty("tenantId")) {
					obj["tenantId"] = ApiClient.convertToType(data["tenantId"], "String");
				}
			}
			return obj;
		};

		/**
   * @member {String} type
   */
		exports.prototype["type"] = undefined;
		/**
   * @member {Object} value
   */
		exports.prototype["value"] = undefined;
		/**
   * @member {Object.<String, Object>} valueInfo
   */
		exports.prototype["valueInfo"] = undefined;
		/**
   * The id of the variable instance.
   * @member {String} id
   */
		exports.prototype["id"] = undefined;
		/**
   * The name of the variable instance.
   * @member {String} name
   */
		exports.prototype["name"] = undefined;
		/**
   * The id of the process instance that this variable instance belongs to.
   * @member {String} processInstanceId
   */
		exports.prototype["processInstanceId"] = undefined;
		/**
   * The id of the execution that this variable instance belongs to.
   * @member {String} executionId
   */
		exports.prototype["executionId"] = undefined;
		/**
   * The id of the case instance that this variable instance belongs to.
   * @member {String} caseInstanceId
   */
		exports.prototype["caseInstanceId"] = undefined;
		/**
   * The id of the case execution that this variable instance belongs to.
   * @member {String} caseExecutionId
   */
		exports.prototype["caseExecutionId"] = undefined;
		/**
   * The id of the task that this variable instance belongs to.
   * @member {String} taskId
   */
		exports.prototype["taskId"] = undefined;
		/**
   * The id of the activity instance that this variable instance belongs to.
   * @member {String} activityInstanceId
   */
		exports.prototype["activityInstanceId"] = undefined;
		/**
   * An error message in case a Java Serialized Object could not be de-serialized.
   * @member {String} errorMessage
   */
		exports.prototype["errorMessage"] = undefined;
		/**
   * The id of the tenant that this variable instance belongs to.
   * @member {String} tenantId
   */
		exports.prototype["tenantId"] = undefined;



		return exports;
	}));



},{"../ApiClient":16}],137:[function(require,module,exports){
/**
 * Camunda REST API
 * Swagger OpenApi Spec for Camunda REST API.
 *
 * OpenAPI spec version: v7.8.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.3.1
 *
 * Do not edit the class manually.
 *
 */

	(function(root, factory) {
		if (typeof define === "function" && define.amd) {
			// AMD. Register as an anonymous module.
			define(["ApiClient", "model/SortingDto"], factory);
		} else if (typeof module === "object" && module.exports) {
			// CommonJS-like environments that support module.exports, like Node.
			module.exports = factory(require("../ApiClient"), require("./SortingDto"));
		} else {
			// Browser globals (root is window)
			if (!root.CamundaRestApi) {
				root.CamundaRestApi = {};
			}
			root.CamundaRestApi.VariableInstanceQueryDto = factory(root.CamundaRestApi.ApiClient, root.CamundaRestApi.SortingDto);
		}
	}(this, function(ApiClient, SortingDto) {
		"use strict";




		/**
   * The VariableInstanceQueryDto model module.
   * @module model/VariableInstanceQueryDto
   * @version v7.8.0
   */

		/**
   * Constructs a new <code>VariableInstanceQueryDto</code>.
   * @alias module:model/VariableInstanceQueryDto
   * @class
   */
		var exports = function() {
			var _this = this;


		};

		/**
   * Constructs a <code>VariableInstanceQueryDto</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:model/VariableInstanceQueryDto} obj Optional instance to populate.
   * @return {module:model/VariableInstanceQueryDto} The populated <code>VariableInstanceQueryDto</code> instance.
   */
		exports.constructFromObject = function(data, obj) {
			if (data) {
				obj = obj || new exports();

				if (data.hasOwnProperty("sorting")) {
					obj["sorting"] = ApiClient.convertToType(data["sorting"], [SortingDto]);
				}
			}
			return obj;
		};

		/**
   * @member {Array.<module:model/SortingDto>} sorting
   */
		exports.prototype["sorting"] = undefined;



		return exports;
	}));



},{"../ApiClient":16,"./SortingDto":121}],138:[function(require,module,exports){
/**
 * Camunda REST API
 * Swagger OpenApi Spec for Camunda REST API.
 *
 * OpenAPI spec version: v7.8.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.3.1
 *
 * Do not edit the class manually.
 *
 */

	(function(root, factory) {
		if (typeof define === "function" && define.amd) {
			// AMD. Register as an anonymous module.
			define(["ApiClient"], factory);
		} else if (typeof module === "object" && module.exports) {
			// CommonJS-like environments that support module.exports, like Node.
			module.exports = factory(require("../ApiClient"));
		} else {
			// Browser globals (root is window)
			if (!root.CamundaRestApi) {
				root.CamundaRestApi = {};
			}
			root.CamundaRestApi.VariableNameDto = factory(root.CamundaRestApi.ApiClient);
		}
	}(this, function(ApiClient) {
		"use strict";




		/**
   * The VariableNameDto model module.
   * @module model/VariableNameDto
   * @version v7.8.0
   */

		/**
   * Constructs a new <code>VariableNameDto</code>.
   * @alias module:model/VariableNameDto
   * @class
   */
		var exports = function() {
			var _this = this;



		};

		/**
   * Constructs a <code>VariableNameDto</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:model/VariableNameDto} obj Optional instance to populate.
   * @return {module:model/VariableNameDto} The populated <code>VariableNameDto</code> instance.
   */
		exports.constructFromObject = function(data, obj) {
			if (data) {
				obj = obj || new exports();

				if (data.hasOwnProperty("name")) {
					obj["name"] = ApiClient.convertToType(data["name"], "String");
				}
				if (data.hasOwnProperty("local")) {
					obj["local"] = ApiClient.convertToType(data["local"], "Boolean");
				}
			}
			return obj;
		};

		/**
   * @member {String} name
   */
		exports.prototype["name"] = undefined;
		/**
   * @member {Boolean} local
   */
		exports.prototype["local"] = undefined;



		return exports;
	}));



},{"../ApiClient":16}],139:[function(require,module,exports){
/**
 * Camunda REST API
 * Swagger OpenApi Spec for Camunda REST API.
 *
 * OpenAPI spec version: v7.8.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.3.1
 *
 * Do not edit the class manually.
 *
 */

	(function(root, factory) {
		if (typeof define === "function" && define.amd) {
			// AMD. Register as an anonymous module.
			define(["ApiClient"], factory);
		} else if (typeof module === "object" && module.exports) {
			// CommonJS-like environments that support module.exports, like Node.
			module.exports = factory(require("../ApiClient"));
		} else {
			// Browser globals (root is window)
			if (!root.CamundaRestApi) {
				root.CamundaRestApi = {};
			}
			root.CamundaRestApi.VariableQueryParameterDto = factory(root.CamundaRestApi.ApiClient);
		}
	}(this, function(ApiClient) {
		"use strict";




		/**
   * The VariableQueryParameterDto model module.
   * @module model/VariableQueryParameterDto
   * @version v7.8.0
   */

		/**
   * Constructs a new <code>VariableQueryParameterDto</code>.
   * @alias module:model/VariableQueryParameterDto
   * @class
   */
		var exports = function() {
			var _this = this;




		};

		/**
   * Constructs a <code>VariableQueryParameterDto</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:model/VariableQueryParameterDto} obj Optional instance to populate.
   * @return {module:model/VariableQueryParameterDto} The populated <code>VariableQueryParameterDto</code> instance.
   */
		exports.constructFromObject = function(data, obj) {
			if (data) {
				obj = obj || new exports();

				if (data.hasOwnProperty("operator")) {
					obj["operator"] = ApiClient.convertToType(data["operator"], "String");
				}
				if (data.hasOwnProperty("value")) {
					obj["value"] = ApiClient.convertToType(data["value"], Object);
				}
				if (data.hasOwnProperty("name")) {
					obj["name"] = ApiClient.convertToType(data["name"], "String");
				}
			}
			return obj;
		};

		/**
   * @member {String} operator
   */
		exports.prototype["operator"] = undefined;
		/**
   * @member {Object} value
   */
		exports.prototype["value"] = undefined;
		/**
   * @member {String} name
   */
		exports.prototype["name"] = undefined;



		return exports;
	}));



},{"../ApiClient":16}],140:[function(require,module,exports){
/**
 * Camunda REST API
 * Swagger OpenApi Spec for Camunda REST API.
 *
 * OpenAPI spec version: v7.8.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.3.1
 *
 * Do not edit the class manually.
 *
 */

	(function(root, factory) {
		if (typeof define === "function" && define.amd) {
			// AMD. Register as an anonymous module.
			define(["ApiClient"], factory);
		} else if (typeof module === "object" && module.exports) {
			// CommonJS-like environments that support module.exports, like Node.
			module.exports = factory(require("../ApiClient"));
		} else {
			// Browser globals (root is window)
			if (!root.CamundaRestApi) {
				root.CamundaRestApi = {};
			}
			root.CamundaRestApi.VariableValueDto = factory(root.CamundaRestApi.ApiClient);
		}
	}(this, function(ApiClient) {
		"use strict";




		/**
   * The VariableValueDto model module.
   * @module model/VariableValueDto
   * @version v7.8.0
   */

		/**
   * Constructs a new <code>VariableValueDto</code>.
   * @alias module:model/VariableValueDto
   * @class
   */
		var exports = function() {
			var _this = this;




		};

		/**
   * Constructs a <code>VariableValueDto</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:model/VariableValueDto} obj Optional instance to populate.
   * @return {module:model/VariableValueDto} The populated <code>VariableValueDto</code> instance.
   */
		exports.constructFromObject = function(data, obj) {
			if (data) {
				obj = obj || new exports();

				if (data.hasOwnProperty("type")) {
					obj["type"] = ApiClient.convertToType(data["type"], "String");
				}
				if (data.hasOwnProperty("value")) {
					obj["value"] = ApiClient.convertToType(data["value"], Object);
				}
				if (data.hasOwnProperty("valueInfo")) {
					obj["valueInfo"] = ApiClient.convertToType(data["valueInfo"], {"String": Object});
				}
			}
			return obj;
		};

		/**
   * @member {String} type
   */
		exports.prototype["type"] = undefined;
		/**
   * @member {Object} value
   */
		exports.prototype["value"] = undefined;
		/**
   * @member {Object.<String, Object>} valueInfo
   */
		exports.prototype["valueInfo"] = undefined;



		return exports;
	}));



},{"../ApiClient":16}],141:[function(require,module,exports){
	"use strict";

	var Camunda = window.Camunda || {};


	Camunda.RestApi = require("camunda_rest_api");
	//var taskSvc = new CamundaRestApi.TaskApi(); // Allocate the API class we're going to use.
	//var taskModel = new CamundaRestApi.TaskDto(); // Construct a model instance.

	window.Camunda = Camunda;
},{"camunda_rest_api":39}]},{},[141]);
